
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vDiffuse;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_vDiffuse             c7       1
            //
            
                vs_2_0
                def c8, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c4
                dp3 r0.y, v1, c5
                dp3 r0.z, v1, c6
                dp3 r0.x, r0, r0
                rsq r0.x, r0.x
                mul r0.x, r0.x, r0.z
                max r0.x, -r0.x, c8.x
                min r0.x, r0.x, c8.y
                mul oD0, r0.x, c7
                mov oT0.xy, v2
            
            // approximately 14 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl v0
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

