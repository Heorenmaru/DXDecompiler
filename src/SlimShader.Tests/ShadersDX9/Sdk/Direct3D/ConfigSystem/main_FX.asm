
//listing of all techniques and passes with embedded asm listings 

technique RenderScenePS30
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //
            
                vs_3_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2.xyz
                dcl_texcoord2 o3.xyz
                dcl_texcoord3 o4.xyz
                dcl_texcoord4 o5.xyz
                dcl_texcoord5 o6.xyz
                dcl_texcoord6 o7.xyz
                dp4 o0.x, v0, c0
                dp4 o0.y, v0, c1
                dp4 o0.z, v0, c2
                dp4 o0.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul o3.xyz, r0.w, r0
                dp4 r0.x, v0, c8
                dp4 r0.y, v0, c9
                dp4 r0.z, v0, c10
                add r1.xyz, -r0, c4
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul o4.xyz, r0.w, r1
                add r1.xyz, -r0, c5
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul o5.xyz, r0.w, r1
                add r1.xyz, -r0, c6
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul o6.xyz, r0.w, r1
                add r1.xyz, -r0, c7
                mov o2.xyz, -r0
                dp3 r0.x, r1, r1
                rsq r0.x, r0.x
                mul o7.xyz, r0.x, r1
                mov o1.xy, v2
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4 g_matDiffuse;
            //   float g_matPower;
            //   float4 g_matSpecular;
            //   sampler2D g_samScene;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_matDiffuse   c0       1
            //   g_matSpecular  c1       1
            //   g_matPower     c2       1
            //   g_vLightColor  c3       1
            //   g_bUseSpecular c4       1
            //   g_samScene     s0       1
            //
            
                ps_3_0
                def c5, 0, 0, 0, 0
                dcl_texcoord v0.xy
                dcl_texcoord1 v1.xyz
                dcl_texcoord2 v2.xyz
                dcl_texcoord3 v3.xyz
                dcl_texcoord4 v4.xyz
                dcl_texcoord5 v5.xyz
                dcl_texcoord6 v6.xyz
                dcl_2d s0
                dp3 r0.x, v1, v1
                rsq r0.x, r0.x
                mov r1.xyz, v1
                mad r0.yzw, r1.xxyz, r0.x, v3.xxyz
                nrm r2.xyz, r0.yzww
                dp3 r0.y, v2, r2
                max r1.w, r0.y, c5.x
                pow r0.y, r1.w, c2.x
                mad r2.xyz, r1, r0.x, v4
                nrm r3.xyz, r2
                dp3 r0.z, v2, r3
                max r1.w, r0.z, c5.x
                pow r0.z, r1.w, c2.x
                add r0.y, r0.z, r0.y
                mad r2.xyz, r1, r0.x, v5
                mad r0.xzw, r1.xyyz, r0.x, v6.xyyz
                nrm r1.xyz, r0.xzww
                dp3 r0.x, v2, r1
                max r1.x, r0.x, c5.x
                pow r0.x, r1.x, c2.x
                nrm r1.xyz, r2
                dp3 r0.z, v2, r1
                max r1.x, r0.z, c5.x
                pow r0.z, r1.x, c2.x
                add r0.y, r0.z, r0.y
                add r0.x, r0.x, r0.y
                mul r0.x, r0.x, c1.x
                mul r0.x, r0.x, c3.x
                mov r1.x, c5.x
                cmp r0.x, -c4.x, r1.x, r0.x
                mov r1.xyz, v2
                dp3 r0.y, r1, v3
                max r1.w, r0.y, c5.x
                dp3 r0.y, r1, v4
                max r2.x, r0.y, c5.x
                add r0.y, r1.w, r2.x
                dp3 r0.z, r1, v5
                max r1.w, r0.z, c5.x
                add r0.y, r0.y, r1.w
                dp3 r0.z, r1, v6
                max r1.x, r0.z, c5.x
                add r0.y, r0.y, r1.x
                texld r1, v0, s0
                mul r1, r1, c0
                mul r1, r0.y, r1
                mad oC0, r1, c3, r0.x
            
            // approximately 62 instruction slots used (1 texture, 61 arithmetic)
            };
    }
}

technique RenderScenePS20A
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                dp4 r0.x, v0, c8
                dp4 r0.y, v0, c9
                dp4 r0.z, v0, c10
                add r1.xyz, -r0, c4
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT3.xyz, r0.w, r1
                add r1.xyz, -r0, c5
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT4.xyz, r0.w, r1
                add r1.xyz, -r0, c6
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT5.xyz, r0.w, r1
                add r1.xyz, -r0, c7
                mov oT1.xyz, -r0
                dp3 r0.x, r1, r1
                rsq r0.x, r0.x
                mul oT6.xyz, r0.x, r1
                mov oT0.xy, v2
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4 g_matDiffuse;
            //   float g_matPower;
            //   float4 g_matSpecular;
            //   sampler2D g_samScene;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_matDiffuse   c0       1
            //   g_matSpecular  c1       1
            //   g_matPower     c2       1
            //   g_vLightColor  c3       1
            //   g_bUseSpecular c4       1
            //   g_samScene     s0       1
            //
            
                ps_2_x
                def c5, 0, 0, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl t6.xyz
                dcl_2d s0
                dp3 r0.w, t1, t1
                rsq r0.x, r0.w
                mov r1.xyz, t1
                mad r0.yzw, r1.xxyz, r0.x, t3.xxyz
                nrm r2.xyz, r0.yzww
                dp3 r1.w, t2, r2
                max r0.y, r1.w, c5.x
                pow r1.w, r0.y, c2.x
                mad r0.yzw, r1.xxyz, r0.x, t4.xxyz
                nrm r2.xyz, r0.yzww
                dp3 r0.y, t2, r2
                max r2.x, r0.y, c5.x
                pow r0.y, r2.x, c2.x
                add r1.w, r0.y, r1.w
                mad r0.yzw, r1.xxyz, r0.x, t5.xxyz
                mad r1.xyz, r1, r0.x, t6
                nrm r2.xyz, r1
                dp3 r0.x, t2, r2
                max r1.x, r0.x, c5.x
                pow r0.x, r1.x, c2.x
                nrm r1.xyz, r0.yzww
                dp3 r0.y, t2, r1
                max r1.x, r0.y, c5.x
                pow r0.y, r1.x, c2.x
                add r0.y, r0.y, r1.w
                add r0.x, r0.x, r0.y
                mul r0.x, r0.x, c1.x
                mul r0.x, r0.x, c3.x
                mov r1.x, c5.x
                cmp r0.x, -c4.x, r1.x, r0.x
                mov r1.xyz, t2
                dp3 r1.w, r1, t3
                max r0.y, r1.w, c5.x
                dp3 r1.w, r1, t4
                max r0.z, r1.w, c5.x
                add r1.w, r0.z, r0.y
                dp3 r0.y, r1, t5
                max r2.x, r0.y, c5.x
                add r1.w, r1.w, r2.x
                dp3 r0.y, r1, t6
                max r1.x, r0.y, c5.x
                add r0.y, r1.x, r1.w
                texld r1, t0, s0
                mul r1, r1, c0
                mul r1, r0.y, r1
                mad r0, r1, c3, r0.x
                mov oC0, r0
            
            // approximately 63 instruction slots used (1 texture, 62 arithmetic)
            };
    }
}

technique RenderScenePS20B
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                dp4 r0.x, v0, c8
                dp4 r0.y, v0, c9
                dp4 r0.z, v0, c10
                add r1.xyz, -r0, c4
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT3.xyz, r0.w, r1
                add r1.xyz, -r0, c5
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT4.xyz, r0.w, r1
                add r1.xyz, -r0, c6
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT5.xyz, r0.w, r1
                add r1.xyz, -r0, c7
                mov oT1.xyz, -r0
                dp3 r0.x, r1, r1
                rsq r0.x, r0.x
                mul oT6.xyz, r0.x, r1
                mov oT0.xy, v2
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4 g_matDiffuse;
            //   float g_matPower;
            //   float4 g_matSpecular;
            //   sampler2D g_samScene;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_matDiffuse   c0       1
            //   g_matSpecular  c1       1
            //   g_matPower     c2       1
            //   g_vLightColor  c3       1
            //   g_bUseSpecular c4       1
            //   g_samScene     s0       1
            //
            
                ps_2_x
                def c5, 0, 0, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl t6.xyz
                dcl_2d s0
                texld r0, t0, s0
                dp3 r1.w, t1, t1
                rsq r1.x, r1.w
                mov r2.xyz, t1
                mad r3.xyz, r2, r1.x, t3
                nrm r4.xyz, r3
                dp3 r2.w, t2, r4
                max r1.y, r2.w, c5.x
                pow r2.w, r1.y, c2.x
                mad r3.xyz, r2, r1.x, t4
                nrm r4.xyz, r3
                dp3 r1.y, t2, r4
                max r3.x, r1.y, c5.x
                pow r1.y, r3.x, c2.x
                add r2.w, r1.y, r2.w
                mad r3.xyz, r2, r1.x, t5
                mad r1.xyz, r2, r1.x, t6
                nrm r2.xyz, r1
                dp3 r3.w, t2, r2
                max r1.x, r3.w, c5.x
                pow r3.w, r1.x, c2.x
                nrm r1.xyz, r3
                dp3 r1.x, t2, r1
                max r2.x, r1.x, c5.x
                pow r1.x, r2.x, c2.x
                add r1.x, r1.x, r2.w
                add r1.x, r3.w, r1.x
                mul r1.x, r1.x, c1.x
                mul r1.x, r1.x, c3.x
                mov r2.x, c5.x
                cmp r1.x, -c4.x, r2.x, r1.x
                mov r2.xyz, t2
                dp3 r2.w, r2, t3
                max r1.y, r2.w, c5.x
                dp3 r2.w, r2, t4
                max r1.z, r2.w, c5.x
                add r2.w, r1.z, r1.y
                dp3 r1.y, r2, t5
                max r3.x, r1.y, c5.x
                add r2.w, r2.w, r3.x
                dp3 r1.y, r2, t6
                max r2.x, r1.y, c5.x
                add r1.y, r2.x, r2.w
                mul r0, r0, c0
                mul r0, r1.y, r0
                mad r0, r0, c3, r1.x
                mov oC0, r0
            
            // approximately 63 instruction slots used (1 texture, 62 arithmetic)
            };
    }
}

technique RenderScenePS20
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                dp4 r0.x, v0, c8
                dp4 r0.y, v0, c9
                dp4 r0.z, v0, c10
                add r1.xyz, -r0, c4
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT3.xyz, r0.w, r1
                add r1.xyz, -r0, c5
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT4.xyz, r0.w, r1
                add r1.xyz, -r0, c6
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                mul oT5.xyz, r0.w, r1
                add r1.xyz, -r0, c7
                mov oT1.xyz, -r0
                dp3 r0.x, r1, r1
                rsq r0.x, r0.x
                mul oT6.xyz, r0.x, r1
                mov oT0.xy, v2
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4 g_matDiffuse;
            //   float g_matPower;
            //   float4 g_matSpecular;
            //   sampler2D g_samScene;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_matDiffuse   c0       1
            //   g_matSpecular  c1       1
            //   g_matPower     c2       1
            //   g_vLightColor  c3       1
            //   g_bUseSpecular c4       1
            //   g_samScene     s0       1
            //
            
                ps_2_0
                def c5, 0, 0, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl t4.xyz
                dcl t5.xyz
                dcl t6.xyz
                dcl_2d s0
                texld r0, t0, s0
                dp3 r1.w, t1, t1
                rsq r1.x, r1.w
                mov r2.xyz, t1
                mad r3.xyz, r2, r1.x, t3
                nrm r4.xyz, r3
                dp3 r2.w, t2, r4
                max r1.y, r2.w, c5.x
                pow r2.w, r1.y, c2.x
                mad r3.xyz, r2, r1.x, t4
                nrm r4.xyz, r3
                dp3 r1.y, t2, r4
                max r3.x, r1.y, c5.x
                pow r1.y, r3.x, c2.x
                add r2.w, r1.y, r2.w
                mad r3.xyz, r2, r1.x, t5
                mad r1.xyz, r2, r1.x, t6
                nrm r2.xyz, r1
                dp3 r3.w, t2, r2
                max r1.x, r3.w, c5.x
                pow r3.w, r1.x, c2.x
                nrm r1.xyz, r3
                dp3 r1.x, t2, r1
                max r2.x, r1.x, c5.x
                pow r1.x, r2.x, c2.x
                add r1.x, r1.x, r2.w
                add r1.x, r3.w, r1.x
                mul r1.x, r1.x, c1.x
                mul r1.x, r1.x, c3.x
                mov r2.x, c5.x
                cmp r1.x, -c4.x, r2.x, r1.x
                mov r2.xyz, t2
                dp3 r2.w, r2, t3
                max r1.y, r2.w, c5.x
                dp3 r2.w, r2, t4
                max r1.z, r2.w, c5.x
                add r2.w, r1.z, r1.y
                dp3 r1.y, r2, t5
                max r3.x, r1.y, c5.x
                add r2.w, r2.w, r3.x
                dp3 r1.y, r2, t6
                max r2.x, r1.y, c5.x
                add r1.y, r2.x, r2.w
                mul r0, r0, c0
                mul r0, r1.y, r0
                mad r0, r0, c3, r1.x
                mov oC0, r0
            
            // approximately 63 instruction slots used (1 texture, 62 arithmetic)
            };
    }
}

technique RenderScenePS14
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //   float4 g_matDiffuse;
            //   float4 g_matSpecular;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //   g_matDiffuse     c11      1
            //   g_matSpecular    c12      1
            //   g_vLightColor    c13      1
            //   g_bUseSpecular   c14      1
            //
            
                vs_1_1
                def c15, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0
                dp4 r1.x, v0, c8
                dp4 r1.y, v0, c9
                dp4 r1.z, v0, c10
                add r2.xyz, -r1, c4
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                add r3.xyz, -r1, c5
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r4.xyz, -r1, c6
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r4.xyz, r1.w, r4
                dp3 r1.w, r0, r4
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r5.xyz, -r1, c7
                dp3 r1.w, r5, r5
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r5
                dp3 r1.w, r0, r5
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                mul r6, r0.w, c11
                mul oD0, r6, c13
                dp3 r0.w, -r1, -r1
                rsq r0.w, r0.w
                mad r3.xyz, -r1, r0.w, r3
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r2.w, r1.w, r1.w
                mul r2.w, r2.w, r2.w
                mul r1.w, r1.w, r2.w
                mad r2.xyz, -r1, r0.w, r2
                dp3 r2.w, r2, r2
                rsq r2.w, r2.w
                mul r2.xyz, r2.w, r2
                dp3 r2.x, r0, r2
                max r2.x, r2.x, c15.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.y, r2.x, r2.x
                mul r2.y, r2.y, r2.y
                mad r1.w, r2.x, r2.y, r1.w
                mad r2.xyz, -r1, r0.w, r4
                mad r1.xyz, -r1, r0.w, r5
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r2.x, r0.w, r0.w
                mul r2.x, r2.x, r2.x
                mad r0.w, r0.w, r2.x, r1.w
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r0.x, r0, r1
                max r0.x, r0.x, c15.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.y, r0.x, r0.x
                mul r0.y, r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.w
                mul r0, r0.x, c12
                mul r0, r0, c13
                mul oD1, r0, c14.x
                mov oT0.xy, v2
            
            // approximately 96 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl v0
                dcl v1
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1, v0
                mad r0, r0, r1, v1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique RenderScenePS13
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //   float4 g_matDiffuse;
            //   float4 g_matSpecular;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //   g_matDiffuse     c11      1
            //   g_matSpecular    c12      1
            //   g_vLightColor    c13      1
            //   g_bUseSpecular   c14      1
            //
            
                vs_1_1
                def c15, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0
                dp4 r1.x, v0, c8
                dp4 r1.y, v0, c9
                dp4 r1.z, v0, c10
                add r2.xyz, -r1, c4
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                add r3.xyz, -r1, c5
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r4.xyz, -r1, c6
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r4.xyz, r1.w, r4
                dp3 r1.w, r0, r4
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r5.xyz, -r1, c7
                dp3 r1.w, r5, r5
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r5
                dp3 r1.w, r0, r5
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                mul r6, r0.w, c11
                mul oD0, r6, c13
                dp3 r0.w, -r1, -r1
                rsq r0.w, r0.w
                mad r3.xyz, -r1, r0.w, r3
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r2.w, r1.w, r1.w
                mul r2.w, r2.w, r2.w
                mul r1.w, r1.w, r2.w
                mad r2.xyz, -r1, r0.w, r2
                dp3 r2.w, r2, r2
                rsq r2.w, r2.w
                mul r2.xyz, r2.w, r2
                dp3 r2.x, r0, r2
                max r2.x, r2.x, c15.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.y, r2.x, r2.x
                mul r2.y, r2.y, r2.y
                mad r1.w, r2.x, r2.y, r1.w
                mad r2.xyz, -r1, r0.w, r4
                mad r1.xyz, -r1, r0.w, r5
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r2.x, r0.w, r0.w
                mul r2.x, r2.x, r2.x
                mad r0.w, r0.w, r2.x, r1.w
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r0.x, r0, r1
                max r0.x, r0.x, c15.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.y, r0.x, r0.x
                mul r0.y, r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.w
                mul r0, r0.x, c12
                mul r0, r0, c13
                mul oD1, r0, c14.x
                mov oT0.xy, v2
            
            // approximately 96 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl v0
                dcl v1
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1, v0
                mad r0, r0, r1, v1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique RenderScenePS12
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //   float4 g_matDiffuse;
            //   float4 g_matSpecular;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //   g_matDiffuse     c11      1
            //   g_matSpecular    c12      1
            //   g_vLightColor    c13      1
            //   g_bUseSpecular   c14      1
            //
            
                vs_1_1
                def c15, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0
                dp4 r1.x, v0, c8
                dp4 r1.y, v0, c9
                dp4 r1.z, v0, c10
                add r2.xyz, -r1, c4
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                add r3.xyz, -r1, c5
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r4.xyz, -r1, c6
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r4.xyz, r1.w, r4
                dp3 r1.w, r0, r4
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r5.xyz, -r1, c7
                dp3 r1.w, r5, r5
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r5
                dp3 r1.w, r0, r5
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                mul r6, r0.w, c11
                mul oD0, r6, c13
                dp3 r0.w, -r1, -r1
                rsq r0.w, r0.w
                mad r3.xyz, -r1, r0.w, r3
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r2.w, r1.w, r1.w
                mul r2.w, r2.w, r2.w
                mul r1.w, r1.w, r2.w
                mad r2.xyz, -r1, r0.w, r2
                dp3 r2.w, r2, r2
                rsq r2.w, r2.w
                mul r2.xyz, r2.w, r2
                dp3 r2.x, r0, r2
                max r2.x, r2.x, c15.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.y, r2.x, r2.x
                mul r2.y, r2.y, r2.y
                mad r1.w, r2.x, r2.y, r1.w
                mad r2.xyz, -r1, r0.w, r4
                mad r1.xyz, -r1, r0.w, r5
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r2.x, r0.w, r0.w
                mul r2.x, r2.x, r2.x
                mad r0.w, r0.w, r2.x, r1.w
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r0.x, r0, r1
                max r0.x, r0.x, c15.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.y, r0.x, r0.x
                mul r0.y, r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.w
                mul r0, r0.x, c12
                mul r0, r0, c13
                mul oD1, r0, c14.x
                mov oT0.xy, v2
            
            // approximately 96 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl v0
                dcl v1
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1, v0
                mad r0, r0, r1, v1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique RenderScenePS11
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mView;
            //   float4 g_vLightPos[4];
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightPos  c0       4
            //   g_mView      c4       3
            //
            
                preshader
                dot c4, c0, c4
                dot c4.yzwx, c0, c5
                dot c4.zwxy, c0, c6
                dot c5, c1, c4
                dot c5.yzwx, c1, c5
                dot c5.zwxy, c1, c6
                dot c6, c2, c4
                dot c6.yzwx, c2, c5
                dot c6.zwxy, c2, c6
                dot c7, c3, c4
                dot c7.yzwx, c3, c5
                dot c7.zwxy, c3, c6
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bUseSpecular;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProj;
            //   float4 g_matDiffuse;
            //   float4 g_matSpecular;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorldView     c8       3
            //   g_matDiffuse     c11      1
            //   g_matSpecular    c12      1
            //   g_vLightColor    c13      1
            //   g_bUseSpecular   c14      1
            //
            
                vs_1_1
                def c15, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0
                dp4 r1.x, v0, c8
                dp4 r1.y, v0, c9
                dp4 r1.z, v0, c10
                add r2.xyz, -r1, c4
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                add r3.xyz, -r1, c5
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r4.xyz, -r1, c6
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r4.xyz, r1.w, r4
                dp3 r1.w, r0, r4
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                add r5.xyz, -r1, c7
                dp3 r1.w, r5, r5
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r5
                dp3 r1.w, r0, r5
                max r1.w, r1.w, c15.x
                add r0.w, r0.w, r1.w
                mul r6, r0.w, c11
                mul oD0, r6, c13
                dp3 r0.w, -r1, -r1
                rsq r0.w, r0.w
                mad r3.xyz, -r1, r0.w, r3
                dp3 r1.w, r3, r3
                rsq r1.w, r1.w
                mul r3.xyz, r1.w, r3
                dp3 r1.w, r0, r3
                max r1.w, r1.w, c15.x
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r1.w, r1.w, r1.w
                mul r2.w, r1.w, r1.w
                mul r2.w, r2.w, r2.w
                mul r1.w, r1.w, r2.w
                mad r2.xyz, -r1, r0.w, r2
                dp3 r2.w, r2, r2
                rsq r2.w, r2.w
                mul r2.xyz, r2.w, r2
                dp3 r2.x, r0, r2
                max r2.x, r2.x, c15.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.y, r2.x, r2.x
                mul r2.y, r2.y, r2.y
                mad r1.w, r2.x, r2.y, r1.w
                mad r2.xyz, -r1, r0.w, r4
                mad r1.xyz, -r1, r0.w, r5
                dp3 r0.w, r2, r2
                rsq r0.w, r0.w
                mul r2.xyz, r0.w, r2
                dp3 r0.w, r0, r2
                max r0.w, r0.w, c15.x
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r0.w, r0.w, r0.w
                mul r2.x, r0.w, r0.w
                mul r2.x, r2.x, r2.x
                mad r0.w, r0.w, r2.x, r1.w
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r0.x, r0, r1
                max r0.x, r0.x, c15.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.y, r0.x, r0.x
                mul r0.y, r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.w
                mul r0, r0.x, c12
                mul r0, r0, c13
                mul oD1, r0, c14.x
                mov oT0.xy, v2
            
            // approximately 96 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl v0
                dcl v1
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1, v0
                mad r0, r0, r1, v1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique FFRenderScene
{
    pass P0
    {
        //No embedded vertex shader
        //No embedded pixel shader
    }
}

