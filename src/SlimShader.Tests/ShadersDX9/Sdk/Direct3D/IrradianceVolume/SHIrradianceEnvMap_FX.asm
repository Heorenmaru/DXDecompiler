
//listing of all techniques and passes with embedded asm listings 

technique RenderWithSHIrradEnvMap
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   MaterialDiffuseColor c0       1
            //
            
                preshader
                mov c12.x, c0.w
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 MaterialDiffuseColor;
            //   float4 cAb;
            //   float4 cAg;
            //   float4 cAr;
            //   float4 cBb;
            //   float4 cBg;
            //   float4 cBr;
            //   float4 cC;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   MaterialDiffuseColor   c4       1
            //   cAr                    c5       1
            //   cAg                    c6       1
            //   cAb                    c7       1
            //   cBr                    c8       1
            //   cBg                    c9       1
            //   cBb                    c10      1
            //   cC                     c11      1
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, c5, v1
                dp4 r0.y, c6, v1
                dp4 r0.z, c7, v1
                mul r1, v1.yzzx, v1.xyzz
                dp4 r2.x, c8, r1
                dp4 r2.y, c9, r1
                dp4 r2.z, c10, r1
                add r0.xyz, r0, r2
                mul r0.w, v1.y, v1.y
                mad r0.w, v1.x, v1.x, -r0.w
                mad r0.xyz, c11, r0.w, r0
                mul oD0.xyz, r0, c4
                mov oD0.w, c12.x
                mov oT0.xy, v2
            
            // approximately 18 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D AlbedoSampler;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   AlbedoSampler s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique RenderWithSHIrradEnvMapNoAlbedo
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   MaterialDiffuseColor c0       1
            //
            
                preshader
                mov c12.x, c0.w
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 MaterialDiffuseColor;
            //   float4 cAb;
            //   float4 cAg;
            //   float4 cAr;
            //   float4 cBb;
            //   float4 cBg;
            //   float4 cBr;
            //   float4 cC;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   MaterialDiffuseColor   c4       1
            //   cAr                    c5       1
            //   cAg                    c6       1
            //   cAb                    c7       1
            //   cBr                    c8       1
            //   cBg                    c9       1
            //   cBb                    c10      1
            //   cC                     c11      1
            //
            
                vs_2_0
                def c13, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, c5, v1
                dp4 r0.y, c6, v1
                dp4 r0.z, c7, v1
                mul r1, v1.yzzx, v1.xyzz
                dp4 r2.x, c8, r1
                dp4 r2.y, c9, r1
                dp4 r2.z, c10, r1
                add r0.xyz, r0, r2
                mul r0.w, v1.y, v1.y
                mad r0.w, v1.x, v1.x, -r0.w
                mad r0.xyz, c11, r0.w, r0
                mul oD0.xyz, r0, c4
                mov oD0.w, c12.x
                mov oT0.xy, c13.x
            
            // approximately 18 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl v0
                mov oC0, v0
            
            // approximately 1 instruction slot used
            };
    }
}

