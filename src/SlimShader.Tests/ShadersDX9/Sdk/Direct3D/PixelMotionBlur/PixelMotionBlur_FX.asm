
//listing of all techniques and passes with embedded asm listings 

technique WorldWithVelocityMRT
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 LightAmbient;
            //   float4 LightDiffuse;
            //   float4 MaterialAmbientColor;
            //   float4 MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   MaterialAmbientColor c0       1
            //   MaterialDiffuseColor c1       1
            //   LightAmbient         c2       1
            //   LightDiffuse         c3       1
            //
            
                preshader
                mul c11.xyz, c1.xyz, c3.xyz
                mul c12.xyz, c0.xyz, c2.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 LightDir;
            //   float4x4 mWorld;
            //   float4x4 mWorldViewProjection;
            //   float4x4 mWorldViewProjectionLast;
            //
            //
            // Registers:
            //
            //   Name                     Reg   Size
            //   ------------------------ ----- ----
            //   mWorldViewProjection     c0       4
            //   mWorldViewProjectionLast c4       4
            //   mWorld                   c8       3
            //   LightDir                 c13      1
            //
            
                vs_2_0
                def c14, 0.5, 0, 1, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.z, v0, c2
                dp4 r0.x, v0, c7
                rcp r0.x, r0.x
                dp4 r1.x, v0, c4
                dp4 r1.y, v0, c5
                mul r0.xy, r0.x, r1
                dp4 r1.w, v0, c3
                rcp r0.z, r1.w
                dp4 r1.x, v0, c0
                dp4 r1.y, v0, c1
                mad r0.xy, r1, r0.z, -r0
                mov oPos.xyw, r1
                mul oT1.xy, r0, c14.x
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0
                dp3 r0.x, r1, c13
                max r0.x, r0.x, c14.y
                mov r1.xyz, c11
                mad oD0.xyz, r1, r0.x, c12
                mov oD0.w, c14.z
                mov oT0.xy, v2
            
            // approximately 25 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                def c0, 1, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl t1.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
                mov r0.xy, t1
                mov r0.zw, c0.x
                mov oC1, r0
            
            // approximately 6 instruction slots used (1 texture, 5 arithmetic)
            };
    }
}

technique WorldWithVelocityTwoPasses
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 LightAmbient;
            //   float4 LightDiffuse;
            //   float4 MaterialAmbientColor;
            //   float4 MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   MaterialAmbientColor c0       1
            //   MaterialDiffuseColor c1       1
            //   LightAmbient         c2       1
            //   LightDiffuse         c3       1
            //
            
                preshader
                mul c11.xyz, c1.xyz, c3.xyz
                mul c12.xyz, c0.xyz, c2.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 LightDir;
            //   float4x4 mWorld;
            //   float4x4 mWorldViewProjection;
            //   float4x4 mWorldViewProjectionLast;
            //
            //
            // Registers:
            //
            //   Name                     Reg   Size
            //   ------------------------ ----- ----
            //   mWorldViewProjection     c0       4
            //   mWorldViewProjectionLast c4       4
            //   mWorld                   c8       3
            //   LightDir                 c13      1
            //
            
                vs_2_0
                def c14, 0.5, 0, 1, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.z, v0, c2
                dp4 r0.x, v0, c7
                rcp r0.x, r0.x
                dp4 r1.x, v0, c4
                dp4 r1.y, v0, c5
                mul r0.xy, r0.x, r1
                dp4 r1.w, v0, c3
                rcp r0.z, r1.w
                dp4 r1.x, v0, c0
                dp4 r1.y, v0, c1
                mad r0.xy, r1, r0.z, -r0
                mov oPos.xyw, r1
                mul oT1.xy, r0, c14.x
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0
                dp3 r0.x, r1, c13
                max r0.x, r0.x, c14.y
                mov r1.xyz, c11
                mad oD0.xyz, r1, r0.x, c12
                mov oD0.w, c14.z
                mov oT0.xy, v2
            
            // approximately 25 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass P1
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 LightAmbient;
            //   float4 LightDiffuse;
            //   float4 MaterialAmbientColor;
            //   float4 MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                 Reg   Size
            //   -------------------- ----- ----
            //   MaterialAmbientColor c0       1
            //   MaterialDiffuseColor c1       1
            //   LightAmbient         c2       1
            //   LightDiffuse         c3       1
            //
            
                preshader
                mul c11.xyz, c1.xyz, c3.xyz
                mul c12.xyz, c0.xyz, c2.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 LightDir;
            //   float4x4 mWorld;
            //   float4x4 mWorldViewProjection;
            //   float4x4 mWorldViewProjectionLast;
            //
            //
            // Registers:
            //
            //   Name                     Reg   Size
            //   ------------------------ ----- ----
            //   mWorldViewProjection     c0       4
            //   mWorldViewProjectionLast c4       4
            //   mWorld                   c8       3
            //   LightDir                 c13      1
            //
            
                vs_2_0
                def c14, 0.5, 0, 1, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.z, v0, c2
                dp4 r0.x, v0, c7
                rcp r0.x, r0.x
                dp4 r1.x, v0, c4
                dp4 r1.y, v0, c5
                mul r0.xy, r0.x, r1
                dp4 r1.w, v0, c3
                rcp r0.z, r1.w
                dp4 r1.x, v0, c0
                dp4 r1.y, v0, c1
                mad r0.xy, r1, r0.z, -r0
                mov oPos.xyw, r1
                mul oT1.xy, r0, c14.x
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0
                dp3 r0.x, r1, c13
                max r0.x, r0.x, c14.y
                mov r1.xyz, c11
                mad oD0.xyz, r1, r0.x, c12
                mov oD0.w, c14.z
                mov oT0.xy, v2
            
            // approximately 25 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 0, 0, 0
                dcl t1.xy
                mov r0.xy, t1
                mov r0.zw, c0.x
                mov oC0, r0
            
            // approximately 3 instruction slots used
            };
    }
}

technique PostProcessMotionBlur
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D CurFramePixelVelSampler;
            //   sampler2D LastFramePixelVelSampler;
            //   float PixelBlurConst;
            //   sampler2D RenderTargetSampler;
            //
            //
            // Registers:
            //
            //   Name                     Reg   Size
            //   ------------------------ ----- ----
            //   PixelBlurConst           c0       1
            //   RenderTargetSampler      s0       1
            //   CurFramePixelVelSampler  s1       1
            //   LastFramePixelVelSampler s2       1
            //
            
                ps_2_0
                def c1, 0.0833333358, 0.166666672, 0.25, 0.333333343
                def c2, 0.416666687, 0.5, 0.583333373, 0.666666687
                def c3, 0.75, 0.833333373, 0.916666687, 1
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                texld r0, t0, s1
                texld r1, t0, s2
                mul r0.z, r0.y, r0.y
                mad r0.z, r0.x, r0.x, r0.z
                mul r0.w, r1.y, r1.y
                mad r0.w, r1.x, r1.x, r0.w
                add r0.z, -r0.w, r0.z
                mul r2.x, r1.x, c0.x
                mul r2.y, -r1.y, c0.x
                mul r1.x, r0.x, c0.x
                mul r1.y, -r0.y, c0.x
                cmp r0.xy, r0.z, r1, r2
                mad r1.xy, r0, c1.x, t0
                mad r2.xy, r0, c1.y, t0
                mad r3.xy, r0, c1.z, t0
                mad r4.xy, r0, c1.w, t0
                mad r5.xy, r0, c2.x, t0
                mad r6.xy, r0, c2.y, t0
                mad r7.xy, r0, c2.z, t0
                mad r8.xy, r0, c2.w, t0
                mad r9.xy, r0, c3.x, t0
                texld r10, t0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                add r1.xyz, r1, r10
                add r1.xyz, r2, r1
                add r1.xyz, r3, r1
                add r1.xyz, r4, r1
                add r1.xyz, r5, r1
                add r1.xyz, r6, r1
                add r1.xyz, r7, r1
                add r1.xyz, r8, r1
                add r1.xyz, r9, r1
                mad r2.xy, r0, c3.y, t0
                mad r0.xy, r0, c3.z, t0
                texld r0, r0, s0
                texld r2, r2, s0
                add r1.xyz, r1, r2
                add r0.xyz, r0, r1
                mul r0.xyz, r0, c1.x
                mov r0.w, c3.w
                mov oC0, r0
            
            // approximately 49 instruction slots used (14 texture, 35 arithmetic)
            };
    }
}

