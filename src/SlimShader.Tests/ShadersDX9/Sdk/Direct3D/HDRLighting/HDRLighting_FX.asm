
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mObjectToView;
            //   float4x4 g_mProjection;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_mObjectToView c0       4
            //   g_mProjection   c4       4
            //
            
                vs_2_0
                def c8, 1, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                mad r0, v0.xyzx, c8.xxxy, c8.yyyx
                dp4 r1.w, r0, c3
                dp4 r1.x, r0, c0
                dp4 r1.y, r0, c1
                dp4 r1.z, r0, c2
                dp4 oPos.x, r1, c4
                dp4 oPos.y, r1, c5
                dp4 oPos.z, r1, c6
                dp4 oPos.w, r1, c7
                mov oT1.xyz, r1
                mov oT0.xy, v2
            
            // approximately 17 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vEmissive;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vEmissive  c0       1
            //
            
                preshader
                add c8.xyz, (0.0199999996, 0.0199999996, 0.0199999996), c0.xyz
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avLightIntensity[2];
            //   float4 g_avLightPositionView[2];
            //   bool g_bEnableTexture;
            //   float g_fDiffuseCoefficient;
            //   float g_fPhongCoefficient;
            //   float g_fPhongExponent;
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name                  Reg   Size
            //   --------------------- ----- ----
            //   g_avLightPositionView c0       2
            //   g_avLightIntensity    c2       2
            //   g_bEnableTexture      c4       1
            //   g_fPhongExponent      c5       1
            //   g_fPhongCoefficient   c6       1
            //   g_fDiffuseCoefficient c7       1
            //   s0                    s0       1
            //
            
                ps_2_0
                def c9, 1, 0, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                texld r0, t0, s0
                add r1.xyz, -t1, c0
                dp3 r0.w, r1, r1
                rsq r0.w, r0.w
                rcp r0.w, r0.w
                mul r0.w, r0.w, r0.w
                rcp r0.w, r0.w
                add r1.xyz, t1, -c0
                nrm r2.xyz, r1
                dp3 r2.w, r2, t2
                add r2.w, r2.w, r2.w
                mad r1.xyz, t2, -r2.w, r2
                dp3_sat r1.w, t2, -r2
                nrm r2.xyz, -t1
                dp3_sat r2.w, r1, r2
                pow r1.x, r2.w, c5.x
                mul r2.w, r1.x, c6.x
                mad r2.w, c7.x, r1.w, r2.w
                mul r1.xyz, r2.w, c2
                mad r1.xyz, r1, r0.w, c8
                add r3.xyz, -t1, c1
                dp3 r0.w, r3, r3
                rsq r0.w, r0.w
                rcp r0.w, r0.w
                mul r0.w, r0.w, r0.w
                rcp r0.w, r0.w
                add r3.xyz, t1, -c1
                nrm r4.xyz, r3
                dp3 r1.w, r4, t2
                add r1.w, r1.w, r1.w
                mad r3.xyz, t2, -r1.w, r4
                dp3_sat r1.w, t2, -r4
                dp3_sat r2.x, r3, r2
                pow r3.x, r2.x, c5.x
                mul r2.x, r3.x, c6.x
                mad r1.w, c7.x, r1.w, r2.x
                mul r2.xyz, r1.w, c3
                mad r1.xyz, r2, r0.w, r1
                mul r0.xyz, r0, r1
                cmp r0.xyz, -c4.x, r1, r0
                mov r0.w, c9.x
                mov oC0, r0
            
            // approximately 52 instruction slots used (1 texture, 51 arithmetic)
            };
    }
}

technique Bloom
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      15
            //   g_avSampleWeights c15     15
            //   s0                s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mul r0, r0, c16
                mad r0, c15, r1, r0
                mad r0, c17, r2, r0
                mad r0, c18, r3, r0
                mad r0, c19, r4, r0
                mad r0, c20, r5, r0
                mad r0, c21, r6, r0
                mad r0, c22, r7, r0
                mad r0, c23, r8, r0
                mad r0, c24, r9, r0
                mad r0, c25, r10, r0
                add r1.xy, t0, c11
                add r2.xy, t0, c12
                add r3.xy, t0, c13
                add r4.xy, t0, c14
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                mad r0, c26, r1, r0
                mad r0, c27, r2, r0
                mad r0, c28, r3, r0
                mad r0, c29, r4, r0
                mov oC0, r0
            
            // approximately 46 instruction slots used (15 texture, 31 arithmetic)
            };
    }
}

technique Star
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       8
            //   g_avSampleWeights c8       8
            //   s0                s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                mul r0, r0, c9
                mad r0, c8, r1, r0
                mad r0, c10, r2, r0
                mad r0, c11, r3, r0
                mad r0, c12, r4, r0
                mad r0, c13, r5, r0
                mad r0, c14, r6, r0
                mad r0, c15, r7, r0
                mov oC0, r0
            
            // approximately 25 instruction slots used (8 texture, 17 arithmetic)
            };
    }
}

technique SampleAvgLum
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //
            
                ps_2_0
                def c9, 0.212500006, 0.715399981, 0.0720999986, 9.99999975e-005
                def c10, 0.693147182, 0.111111112, 1, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                dp3 r1.w, r0, c9
                add r1.w, r1.w, c9.w
                log r1.w, r1.w
                mul r1.w, r1.w, c10.x
                dp3 r2.w, r1, c9
                add r2.w, r2.w, c9.w
                log r2.w, r2.w
                mad r2.w, r2.w, c10.x, r1.w
                dp3 r3.w, r2, c9
                add r3.w, r3.w, c9.w
                log r3.w, r3.w
                mad r3.w, r3.w, c10.x, r2.w
                dp3 r4.w, r3, c9
                add r4.w, r4.w, c9.w
                log r4.w, r4.w
                mad r4.w, r4.w, c10.x, r3.w
                dp3 r5.w, r4, c9
                add r5.w, r5.w, c9.w
                log r5.w, r5.w
                mad r5.w, r5.w, c10.x, r4.w
                dp3 r6.w, r5, c9
                add r6.w, r6.w, c9.w
                log r6.w, r6.w
                mad r6.w, r6.w, c10.x, r5.w
                dp3 r7.w, r6, c9
                add r7.w, r7.w, c9.w
                log r7.w, r7.w
                mad r7.w, r7.w, c10.x, r6.w
                dp3 r8.w, r7, c9
                add r8.w, r8.w, c9.w
                log r8.w, r8.w
                mad r8.w, r8.w, c10.x, r7.w
                dp3 r0.x, r8, c9
                add r0.x, r0.x, c9.w
                log r0.x, r0.x
                mad r0.x, r0.x, c10.x, r8.w
                mul r0.xyz, r0.x, c10.y
                mov r0.w, c10.z
                mov oC0, r0
            
            // approximately 57 instruction slots used (9 texture, 48 arithmetic)
            };
    }
}

technique ResampleAvgLum
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      16
            //   s0                s0       1
            //
            
                ps_2_0
                def c16, 0.0625, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                add r0.x, r0.x, r1.x
                add r0.x, r2.x, r0.x
                add r0.x, r3.x, r0.x
                add r0.x, r4.x, r0.x
                add r0.x, r5.x, r0.x
                add r0.x, r6.x, r0.x
                add r0.x, r7.x, r0.x
                add r0.x, r8.x, r0.x
                add r0.x, r9.x, r0.x
                add r0.x, r10.x, r0.x
                add r1.xy, t0, c11
                add r2.xy, t0, c12
                add r3.xy, t0, c13
                add r4.xy, t0, c14
                add r5.xy, t0, c15
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                add r0.x, r0.x, r1.x
                add r0.x, r2.x, r0.x
                add r0.x, r3.x, r0.x
                add r0.x, r4.x, r0.x
                add r0.x, r5.x, r0.x
                mul r0.xyz, r0.x, c16.x
                mov r0.w, c16.y
                mov oC0, r0
            
            // approximately 50 instruction slots used (16 texture, 34 arithmetic)
            };
    }
}

technique ResampleAvgLumExp
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      16
            //   s0                s0       1
            //
            
                ps_2_0
                def c16, 0.0901684389, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                add r0.x, r0.x, r1.x
                add r0.x, r2.x, r0.x
                add r0.x, r3.x, r0.x
                add r0.x, r4.x, r0.x
                add r0.x, r5.x, r0.x
                add r0.x, r6.x, r0.x
                add r0.x, r7.x, r0.x
                add r0.x, r8.x, r0.x
                add r0.x, r9.x, r0.x
                add r0.x, r10.x, r0.x
                add r1.xy, t0, c11
                add r2.xy, t0, c12
                add r3.xy, t0, c13
                add r4.xy, t0, c14
                add r5.xy, t0, c15
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                add r0.x, r0.x, r1.x
                add r0.x, r2.x, r0.x
                add r0.x, r3.x, r0.x
                add r0.x, r4.x, r0.x
                add r0.x, r5.x, r0.x
                mul r0.x, r0.x, c16.x
                exp r0.xyz, r0.x
                mov r0.w, c16.y
                mov oC0, r0
            
            // approximately 51 instruction slots used (16 texture, 35 arithmetic)
            };
    }
}

technique CalculateAdaptedLum
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fElapsedTime;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_fElapsedTime c0       1
            //
            
                preshader
                mul r0.x, c0.x, (-0.874389522)
                exp r1.x, r0.x
                neg r0.x, r1.x
                add c0.x, r0.x, (1)
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //   s1           s1       1
            //
            
                ps_2_0
                def c1, 0.5, 1, 0, 0
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c1.x
                texld r1, r0, s0
                texld r0, r0, s1
                lrp r2.xyz, c0.x, r0.x, r1.x
                mov r2.w, c1.y
                mov oC0, r2
            
            // approximately 6 instruction slots used (2 texture, 4 arithmetic)
            };
    }
}

technique DownScale4x4
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      16
            //   s0                s0       1
            //
            
                ps_2_0
                def c16, 0.0625, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                add r0, r0, r1
                add r0, r2, r0
                add r0, r3, r0
                add r0, r4, r0
                add r0, r5, r0
                add r0, r6, r0
                add r0, r7, r0
                add r0, r8, r0
                add r0, r9, r0
                add r0, r10, r0
                add r1.xy, t0, c11
                add r2.xy, t0, c12
                add r3.xy, t0, c13
                add r4.xy, t0, c14
                add r5.xy, t0, c15
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                add r0, r0, r1
                add r0, r2, r0
                add r0, r3, r0
                add r0, r4, r0
                add r0, r5, r0
                mul r0, r0, c16.x
                mov oC0, r0
            
            // approximately 49 instruction slots used (16 texture, 33 arithmetic)
            };
    }
}

technique DownScale2x2
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       4
            //   s0                s0       1
            //
            
                ps_2_0
                def c4, 0.25, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                add r0, r0, r1
                add r0, r2, r0
                add r0, r3, r0
                mul r0, r0, c4.x
                mov oC0, r0
            
            // approximately 13 instruction slots used (4 texture, 9 arithmetic)
            };
    }
}

technique GaussBlur5x5
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      12
            //   g_avSampleWeights c12     12
            //   s0                s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mul r0, r0, c13
                mad r0, c12, r1, r0
                mad r0, c14, r2, r0
                mad r0, c15, r3, r0
                mad r0, c16, r4, r0
                mad r0, c17, r5, r0
                mad r0, c18, r6, r0
                mad r0, c19, r7, r0
                mad r0, c20, r8, r0
                mad r0, c21, r9, r0
                mad r0, c22, r10, r0
                add r1.xy, t0, c11
                texld r1, r1, s0
                mad r0, c23, r1, r0
                mov oC0, r0
            
            // approximately 37 instruction slots used (12 texture, 25 arithmetic)
            };
    }
}

technique BrightPassFilter
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fMiddleGray;
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   g_fMiddleGray c0       1
            //   s0            s0       1
            //   s1            s1       1
            //
            
                ps_2_0
                def c1, 10, 0, 0, 0
                def c2, 0.5, 0.00100000005, -5, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c2.x
                texld r0, r0, s1
                texld r1, t0, s0
                add r0.x, r0.x, c2.y
                rcp r0.x, r0.x
                mul r0.x, r0.x, c0.x
                mad r1.xyz, r1, r0.x, c2.z
                max r0, r1, c2.w
                add r1.xyz, r0, c1.x
                rcp r2.x, r1.x
                rcp r2.y, r1.y
                rcp r2.z, r1.z
                mul r0.xyz, r0, r2
                mov oC0, r0
            
            // approximately 14 instruction slots used (2 texture, 12 arithmetic)
            };
    }
}

technique FinalScenePass
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bEnableBlueShift;
            //   bool g_bEnableToneMap;
            //   float g_fBloomScale;
            //   float g_fMiddleGray;
            //   float g_fStarScale;
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_fMiddleGray      c0       1
            //   g_bEnableBlueShift c1       1
            //   g_bEnableToneMap   c2       1
            //   g_fBloomScale      c3       1
            //   g_fStarScale       c4       1
            //   s0                 s0       1
            //   s1                 s1       1
            //   s2                 s2       1
            //   s3                 s3       1
            //
            
                ps_2_0
                def c5, 0.212500006, 0.715399981, 0.0720999986, 0.00100000005
                def c6, 1.04999995, 0.970000029, 1.26999998, 0
                def c7, 0.5, 1.5, 0.243902445, 1
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                mov r0.xy, c7.x
                texld r0, r0, s3
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s1
                add r0.y, r0.x, c7.y
                add r0.x, r0.x, c5.w
                rcp r0.x, r0.x
                mul r0.x, r0.x, c0.x
                mad_sat r0.y, r0.y, -c7.z, c7.w
                dp3 r0.z, r1, c5
                mad r4.xyz, r0.z, c6, -r1
                mad r0.yzw, r0.y, r4.wzyx, r1.wzyx
                cmp r0.yzw, -c1.x, r1.wzyx, r0
                mul r4.xyz, r0.x, r0.wzyx
                mad r5.xyz, r0.wzyx, r0.x, c7.w
                rcp r6.x, r5.x
                rcp r6.y, r5.y
                rcp r6.z, r5.z
                mul r4.xyz, r4, r6
                cmp r1.xyz, -c2.x, r0.wzyx, r4
                mad r0, c4.x, r2, r1
                mad r0, c3.x, r3, r0
                mov oC0, r0
            
            // approximately 24 instruction slots used (4 texture, 20 arithmetic)
            };
    }
}

technique MergeTextures_1
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       1
            //   s0                s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, c0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique MergeTextures_2
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       2
            //   s0                s0       1
            //   s1                s1       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                texld r1, t0, s0
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mov oC0, r0
            
            // approximately 5 instruction slots used (2 texture, 3 arithmetic)
            };
    }
}

technique MergeTextures_3
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       3
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mov oC0, r0
            
            // approximately 7 instruction slots used (3 texture, 4 arithmetic)
            };
    }
}

technique MergeTextures_4
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       4
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //   s3                s3       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s3
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mad r0, c3, r3, r0
                mov oC0, r0
            
            // approximately 9 instruction slots used (4 texture, 5 arithmetic)
            };
    }
}

technique MergeTextures_5
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //   sampler2D s4;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       5
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //   s3                s3       1
            //   s4                s4       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                dcl_2d s4
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s3
                texld r4, t0, s4
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mad r0, c3, r3, r0
                mad r0, c4, r4, r0
                mov oC0, r0
            
            // approximately 11 instruction slots used (5 texture, 6 arithmetic)
            };
    }
}

technique MergeTextures_6
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //   sampler2D s4;
            //   sampler2D s5;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       6
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //   s3                s3       1
            //   s4                s4       1
            //   s5                s5       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                dcl_2d s4
                dcl_2d s5
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s3
                texld r4, t0, s4
                texld r5, t0, s5
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mad r0, c3, r3, r0
                mad r0, c4, r4, r0
                mad r0, c5, r5, r0
                mov oC0, r0
            
            // approximately 13 instruction slots used (6 texture, 7 arithmetic)
            };
    }
}

technique MergeTextures_7
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //   sampler2D s4;
            //   sampler2D s5;
            //   sampler2D s6;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       7
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //   s3                s3       1
            //   s4                s4       1
            //   s5                s5       1
            //   s6                s6       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                dcl_2d s4
                dcl_2d s5
                dcl_2d s6
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s3
                texld r4, t0, s4
                texld r5, t0, s5
                texld r6, t0, s6
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mad r0, c3, r3, r0
                mad r0, c4, r4, r0
                mad r0, c5, r5, r0
                mad r0, c6, r6, r0
                mov oC0, r0
            
            // approximately 15 instruction slots used (7 texture, 8 arithmetic)
            };
    }
}

technique MergeTextures_8
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //   sampler2D s3;
            //   sampler2D s4;
            //   sampler2D s5;
            //   sampler2D s6;
            //   sampler2D s7;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleWeights c0       8
            //   s0                s0       1
            //   s1                s1       1
            //   s2                s2       1
            //   s3                s3       1
            //   s4                s4       1
            //   s5                s5       1
            //   s6                s6       1
            //   s7                s7       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                dcl_2d s4
                dcl_2d s5
                dcl_2d s6
                dcl_2d s7
                texld r0, t0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                texld r3, t0, s3
                texld r4, t0, s4
                texld r5, t0, s5
                texld r6, t0, s6
                texld r7, t0, s7
                mul r0, r0, c1
                mad r0, c0, r1, r0
                mad r0, c2, r2, r0
                mad r0, c3, r3, r0
                mad r0, c4, r4, r0
                mad r0, c5, r5, r0
                mad r0, c6, r6, r0
                mad r0, c7, r7, r0
                mov oC0, r0
            
            // approximately 17 instruction slots used (8 texture, 9 arithmetic)
            };
    }
}

