
//listing of all techniques and passes with embedded asm listings 

technique Specular
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fMaterialAlpha;
            //   float3 g_vLightColor;
            //   float3 g_vMaterialAmbient;
            //   float3 g_vMaterialDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_vMaterialAmbient c0       1
            //   g_vMaterialDiffuse c1       1
            //   g_fMaterialAlpha   c2       1
            //   g_vLightColor      c3       1
            //
            
                preshader
                mul c8.xyz, c0.xyz, c3.xyz
                mul c7.xyz, c1.xyz, c3.xyz
                mov c9.x, c2.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   int g_nMaterialShininess;
            //   float3 g_vCameraPosition;
            //   float3 g_vLightPosition;
            //   float3 g_vMaterialSpecular;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_vMaterialSpecular    c10      1
            //   g_nMaterialShininess   c11      1
            //   g_vLightPosition       c12      1
            //   g_vCameraPosition      c13      1
            //
            
                vs_2_0
                def c14, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r1.xyz, -r0, c12
                add r0.xyz, r0, -c13
                nrm r2.xyz, r0
                nrm r0.xyz, r1
                dp3 r1.x, v1, c4
                dp3 r1.y, v1, c5
                dp3 r1.z, v1, c6
                dp3 r0.w, r0, r1
                add r1.w, r0.w, r0.w
                max r0.w, r0.w, c14.x
                min r0.w, r0.w, c14.y
                mov r3.xyz, c7
                mad r3.xyz, r3, r0.w, c8
                mad r0.xyz, r1, -r1.w, r0
                dp3 r0.x, r0, r2
                max r0.x, r0.x, c14.x
                min r0.x, r0.x, c14.y
                pow r1.x, r0.x, c11.x
                mad oD0.xyz, c10, r1.x, r3
                mov oT0.xy, v2
                mov oD0.w, c9.x
            
            // approximately 34 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl v0
                mov oC0, v0
            
            // approximately 1 instruction slot used
            };
    }
}

technique NoSpecular
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fMaterialAlpha;
            //   float3 g_vLightColor;
            //   float3 g_vMaterialAmbient;
            //   float3 g_vMaterialDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_vMaterialAmbient c0       1
            //   g_vMaterialDiffuse c1       1
            //   g_fMaterialAlpha   c2       1
            //   g_vLightColor      c3       1
            //
            
                preshader
                mul c8.xyz, c0.xyz, c3.xyz
                mul c7.xyz, c1.xyz, c3.xyz
                mov c9.x, c2.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightPosition;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_vLightPosition       c10      1
            //
            
                vs_2_0
                def c11, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r0.xyz, -r0, c10
                nrm r1.xyz, r0
                dp3 r0.x, v1, c4
                dp3 r0.y, v1, c5
                dp3 r0.z, v1, c6
                dp3 r0.x, r1, r0
                max r0.x, r0.x, c11.x
                min r0.x, r0.x, c11.y
                mov r1.xyz, c7
                mad oD0.xyz, r1, r0.x, c8
                mov oT0.xy, v2
                mov oD0.w, c9.x
            
            // approximately 21 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl v0
                mov oC0, v0
            
            // approximately 1 instruction slot used
            };
    }
}

technique TexturedSpecular
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fMaterialAlpha;
            //   float3 g_vLightColor;
            //   float3 g_vMaterialAmbient;
            //   float3 g_vMaterialDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_vMaterialAmbient c0       1
            //   g_vMaterialDiffuse c1       1
            //   g_fMaterialAlpha   c2       1
            //   g_vLightColor      c3       1
            //
            
                preshader
                mul c8.xyz, c0.xyz, c3.xyz
                mul c7.xyz, c1.xyz, c3.xyz
                mov c9.x, c2.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   int g_nMaterialShininess;
            //   float3 g_vCameraPosition;
            //   float3 g_vLightPosition;
            //   float3 g_vMaterialSpecular;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_vMaterialSpecular    c10      1
            //   g_nMaterialShininess   c11      1
            //   g_vLightPosition       c12      1
            //   g_vCameraPosition      c13      1
            //
            
                vs_2_0
                def c14, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r1.xyz, -r0, c12
                add r0.xyz, r0, -c13
                nrm r2.xyz, r0
                nrm r0.xyz, r1
                dp3 r1.x, v1, c4
                dp3 r1.y, v1, c5
                dp3 r1.z, v1, c6
                dp3 r0.w, r0, r1
                add r1.w, r0.w, r0.w
                max r0.w, r0.w, c14.x
                min r0.w, r0.w, c14.y
                mov r3.xyz, c7
                mad r3.xyz, r3, r0.w, c8
                mad r0.xyz, r1, -r1.w, r0
                dp3 r0.x, r0, r2
                max r0.x, r0.x, c14.x
                min r0.x, r0.x, c14.y
                pow r1.x, r0.x, c11.x
                mad oD0.xyz, c10, r1.x, r3
                mov oT0.xy, v2
                mov oD0.w, c9.x
            
            // approximately 34 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl v0
                dcl_2d s0
                texld r0, t0, s0
                mul r0.xyz, r0, v0
                mov r0.w, v0.w
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique TexturedNoSpecular
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fMaterialAlpha;
            //   float3 g_vLightColor;
            //   float3 g_vMaterialAmbient;
            //   float3 g_vMaterialDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_vMaterialAmbient c0       1
            //   g_vMaterialDiffuse c1       1
            //   g_fMaterialAlpha   c2       1
            //   g_vLightColor      c3       1
            //
            
                preshader
                mul c8.xyz, c0.xyz, c3.xyz
                mul c7.xyz, c1.xyz, c3.xyz
                mov c9.x, c2.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightPosition;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_vLightPosition       c10      1
            //
            
                vs_2_0
                def c11, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r0.xyz, -r0, c10
                nrm r1.xyz, r0
                dp3 r0.x, v1, c4
                dp3 r0.y, v1, c5
                dp3 r0.z, v1, c6
                dp3 r0.x, r1, r0
                max r0.x, r0.x, c11.x
                min r0.x, r0.x, c11.y
                mov r1.xyz, c7
                mad oD0.xyz, r1, r0.x, c8
                mov oT0.xy, v2
                mov oD0.w, c9.x
            
            // approximately 21 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl v0
                dcl_2d s0
                texld r0, t0, s0
                mul r0.xyz, r0, v0
                mov r0.w, v0.w
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

