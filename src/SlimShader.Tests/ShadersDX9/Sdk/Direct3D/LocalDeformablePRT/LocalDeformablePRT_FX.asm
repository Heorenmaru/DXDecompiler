
//listing of all techniques and passes with embedded asm listings 

technique NdotL
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   int g_NumBones;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_NumBones   c0       1
            //
            
                preshader
                add r0.x, c0.x, (-1)
                lt r1.x, (0), r0.x
                neg r0.y, r1.x
                add r1.y, r0.y, (2)
                lt r2.x, r1.x, r0.x
                mul r0.y, r1.y, r2.x
                add r2.y, r0.y, r1.x
                mov c78.x, r1.x
                lt r1.x, r2.y, r0.x
                mul r0.y, r1.x, r2.x
                mov c79.x, r2.x
                neg r0.z, r2.y
                add r1.x, r0.z, (3)
                mul r2.x, r0.y, r1.x
                add r0.z, r2.x, r2.y
                lt r1.x, r0.z, r0.x
                mov c83.x, r0.x
                mul c82.x, r0.y, r1.x
                mov c81.x, r0.y
            
            // approximately 19 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mViewProjection;
            //   float4x3 g_mWorldMatrixArray[26];
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_mWorldMatrixArray c0      78
            //   g_mViewProjection   c84      4
            //
            
                vs_2_0
                def c92, 3, 0, 0, 0
                def c88, 1, 0, 0, 0
                def c89, 0, 1, 0, 0
                def c90, 0, 0, 1, 0
                def c91, 0, 0, 0, 1
                dcl_position v0
                dcl_normal v1
                dcl_tangent v2
                dcl_blendweight v3
                dcl_blendindices v4
                dcl_texcoord v5
                slt r0, v4, -v4
                frc r1, v4
                add r2, -r1, v4
                slt r1, -r1, r1
                mad r0, r0, r1, r2
                mul r1, r0, c92.x
                mova a0.w, c83.x
                dp4 r0.x, r0, c88[a0.w]
                mul r0.x, r0.x, c92.x
                mova a0.w, r1.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v2, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mov r2.w, v3.x
                mad r3.w, c78.x, r2.w, v3.y
                mul r4, r2, c78.x
                mova a0.w, r1.y
                dp3 r5.x, v2, c0[a0.w]
                mova a0.w, r1.y
                dp3 r5.y, v2, c1[a0.w]
                mova a0.w, r1.y
                dp3 r5.z, v2, c2[a0.w]
                mad r3.xyz, r5, v3.y, r4
                mad r2, c78.x, -r2, r3
                mad r2, c79.x, r2, r4
                add r3.w, r2.w, v3.z
                mova a0.w, r1.z
                dp3 r4.x, v2, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v2, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v2, c2[a0.w]
                mad r3.xyz, r4, v3.z, r2
                lrp r4, c81.x, r3, r2
                add r2.w, r4.w, v3.w
                mova a0.w, r1.w
                dp3 r3.x, v2, c0[a0.w]
                mova a0.w, r1.w
                dp3 r3.y, v2, c1[a0.w]
                mova a0.w, r1.w
                dp3 r3.z, v2, c2[a0.w]
                mad r2.xyz, r3, v3.w, r4
                lrp r3, c82.x, r2, r4
                add r0.y, -r3.w, c88.x
                mova a0.w, r1.y
                dp4 r2.x, v0, c0[a0.w]
                mova a0.w, r1.y
                dp4 r2.y, v0, c1[a0.w]
                mova a0.w, r1.y
                dp4 r2.z, v0, c2[a0.w]
                mul r2.xyz, r2, v3.y
                mul r2.xyz, r2, c79.x
                mova a0.w, r1.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.x
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.x
                mad r2.xyz, c78.x, r4, r2
                mova a0.w, r1.z
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.z
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.z
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.z
                mad r2.xyz, c81.x, r4, r2
                mova a0.w, r1.w
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.w
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.w
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.w
                mad r2.xyz, c82.x, r4, r2
                mova a0.w, r0.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r0.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r0.x
                dp4 r4.z, v0, c2[a0.w]
                mad r2.xyz, r4, r0.y, r2
                mov r2.w, c88.x
                dp4 oPos.x, r2, c84
                dp4 oPos.y, r2, c85
                dp4 oPos.z, r2, c86
                dp4 oPos.w, r2, c87
                mova a0.w, r1.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mova a0.w, r1.y
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.y
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.y
                dp3 r4.z, v1, c2[a0.w]
                mul r4.xyz, r4, v3.y
                mul r4.xyz, r4, c79.x
                mad r2.xyz, c78.x, r2, r4
                mova a0.w, r1.z
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v1, c2[a0.w]
                mul r1.xyz, r4, v3.z
                mad r1.xyz, c81.x, r1, r2
                mova a0.w, r1.w
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.w
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.w
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.w
                mad r1.xyz, c82.x, r2, r1
                mova a0.w, r0.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v1, c2[a0.w]
                mad r1.xyz, r2, r0.y, r1
                mova a0.w, r0.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v2, c2[a0.w]
                mad r0.xyz, r2, r0.y, r3
                mul r2.xyz, r0.yzxw, r1.zxyw
                mad oT3.xyz, r1.yzxw, r0.zxyw, -r2
                mov oT1.xyz, r1
                mov oT2.xyz, r0
                mov oT0.xy, v5
            
            // approximately 142 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D AlbedoSampler;
            //   sampler2D NormalMapSampler;
            //   float g_fLightIntensity;
            //   float3 g_vLightDirection;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightDirection c0       1
            //   g_fLightIntensity c1       1
            //   AlbedoSampler     s0       1
            //   NormalMapSampler  s1       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                texld r1, t0, s0
                mul r2.xyz, r0.y, t3
                mad r2.xyz, r0.x, t2, r2
                mad r0.xyz, r0.z, t1, r2
                dp3_sat r0.x, r0, c0
                mul r0.x, r0.x, c1.x
                mul r0, r0.x, r1
                mov oC0, r0
            
            // approximately 9 instruction slots used (2 texture, 7 arithmetic)
            };
    }
}

technique LDPRT
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   int g_NumBones;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_NumBones   c0       1
            //
            
                preshader
                add r0.x, c0.x, (-1)
                lt r1.x, (0), r0.x
                neg r0.y, r1.x
                add r1.y, r0.y, (2)
                lt r2.x, r1.x, r0.x
                mul r0.y, r1.y, r2.x
                add r2.y, r0.y, r1.x
                mov c78.x, r1.x
                lt r1.x, r2.y, r0.x
                mul r0.y, r1.x, r2.x
                mov c79.x, r2.x
                neg r0.z, r2.y
                add r1.x, r0.z, (3)
                mul r2.x, r0.y, r1.x
                add r0.z, r2.x, r2.y
                lt r1.x, r0.z, r0.x
                mov c83.x, r0.x
                mul c82.x, r0.y, r1.x
                mov c81.x, r0.y
            
            // approximately 19 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mViewProjection;
            //   float4x3 g_mWorldMatrixArray[26];
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_mWorldMatrixArray c0      78
            //   g_mViewProjection   c84      4
            //
            
                vs_2_0
                def c92, 3, 0, 0, 0
                def c88, 1, 0, 0, 0
                def c89, 0, 1, 0, 0
                def c90, 0, 0, 1, 0
                def c91, 0, 0, 0, 1
                dcl_position v0
                dcl_normal v1
                dcl_tangent v2
                dcl_blendweight v3
                dcl_blendindices v4
                dcl_texcoord v5
                slt r0, v4, -v4
                frc r1, v4
                add r2, -r1, v4
                slt r1, -r1, r1
                mad r0, r0, r1, r2
                mul r1, r0, c92.x
                mova a0.w, c83.x
                dp4 r0.x, r0, c88[a0.w]
                mul r0.x, r0.x, c92.x
                mova a0.w, r1.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v2, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mov r2.w, v3.x
                mad r3.w, c78.x, r2.w, v3.y
                mul r4, r2, c78.x
                mova a0.w, r1.y
                dp3 r5.x, v2, c0[a0.w]
                mova a0.w, r1.y
                dp3 r5.y, v2, c1[a0.w]
                mova a0.w, r1.y
                dp3 r5.z, v2, c2[a0.w]
                mad r3.xyz, r5, v3.y, r4
                mad r2, c78.x, -r2, r3
                mad r2, c79.x, r2, r4
                add r3.w, r2.w, v3.z
                mova a0.w, r1.z
                dp3 r4.x, v2, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v2, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v2, c2[a0.w]
                mad r3.xyz, r4, v3.z, r2
                lrp r4, c81.x, r3, r2
                add r2.w, r4.w, v3.w
                mova a0.w, r1.w
                dp3 r3.x, v2, c0[a0.w]
                mova a0.w, r1.w
                dp3 r3.y, v2, c1[a0.w]
                mova a0.w, r1.w
                dp3 r3.z, v2, c2[a0.w]
                mad r2.xyz, r3, v3.w, r4
                lrp r3, c82.x, r2, r4
                add r0.y, -r3.w, c88.x
                mova a0.w, r1.y
                dp4 r2.x, v0, c0[a0.w]
                mova a0.w, r1.y
                dp4 r2.y, v0, c1[a0.w]
                mova a0.w, r1.y
                dp4 r2.z, v0, c2[a0.w]
                mul r2.xyz, r2, v3.y
                mul r2.xyz, r2, c79.x
                mova a0.w, r1.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.x
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.x
                mad r2.xyz, c78.x, r4, r2
                mova a0.w, r1.z
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.z
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.z
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.z
                mad r2.xyz, c81.x, r4, r2
                mova a0.w, r1.w
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.w
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.w
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.w
                mad r2.xyz, c82.x, r4, r2
                mova a0.w, r0.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r0.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r0.x
                dp4 r4.z, v0, c2[a0.w]
                mad r2.xyz, r4, r0.y, r2
                mov r2.w, c88.x
                dp4 oPos.x, r2, c84
                dp4 oPos.y, r2, c85
                dp4 oPos.z, r2, c86
                dp4 oPos.w, r2, c87
                mova a0.w, r1.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mova a0.w, r1.y
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.y
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.y
                dp3 r4.z, v1, c2[a0.w]
                mul r4.xyz, r4, v3.y
                mul r4.xyz, r4, c79.x
                mad r2.xyz, c78.x, r2, r4
                mova a0.w, r1.z
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v1, c2[a0.w]
                mul r1.xyz, r4, v3.z
                mad r1.xyz, c81.x, r1, r2
                mova a0.w, r1.w
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.w
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.w
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.w
                mad r1.xyz, c82.x, r2, r1
                mova a0.w, r0.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v1, c2[a0.w]
                mad r1.xyz, r2, r0.y, r1
                mova a0.w, r0.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v2, c2[a0.w]
                mad r0.xyz, r2, r0.y, r3
                mul r2.xyz, r0.yzxw, r1.zxyw
                mad oT3.xyz, r1.yzxw, r0.zxyw, -r2
                mov oT1.xyz, r1
                mov oT2.xyz, r0
                mov oT0.xy, v5
            
            // approximately 142 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D AlbedoSampler;
            //   sampler2D NormalMapSampler;
            //   samplerCUBE YlmCoeff0Sampler;
            //   samplerCUBE YlmCoeff4Sampler;
            //   samplerCUBE YlmCoeff8Sampler;
            //   float3 g_vColorTransmit;
            //   float4 g_vLightCoeffsB[4];
            //   float4 g_vLightCoeffsG[4];
            //   float4 g_vLightCoeffsR[4];
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_vLightCoeffsR  c0       3
            //   g_vLightCoeffsG  c3       3
            //   g_vLightCoeffsB  c6       3
            //   g_vColorTransmit c9       1
            //   AlbedoSampler    s0       1
            //   NormalMapSampler s1       1
            //   YlmCoeff0Sampler s2       1
            //   YlmCoeff4Sampler s3       1
            //   YlmCoeff8Sampler s4       1
            //
            
                ps_2_0
                def c10, 0.25, 0, 0, 0
                def c11, 1, 0.666666687, 0.666666687, 0.666666687
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl_2d s0
                dcl_2d s1
                dcl_cube s2
                dcl_cube s3
                dcl_cube s4
                texld r0, t0, s1
                mov r1.w, c11.x
                mov r2.yzw, -c11.w
                mov r3.x, c11.x
                mul r4.xyz, r0.y, t3
                mad r4.xyz, r0.x, t2, r4
                mad r0.xyz, r0.z, t1, r4
                texld r4, r0, s2
                texld r5, t0, s0
                texld r6, r0, s3
                texld r0, r0, s4
                mov r3.yzw, r5.w
                mul r7, r3, r4
                mul r4, r4, c11
                mov r2.x, r3.w
                mul r2, r2, r7
                mad r7, c9.x, r2, r4
                mul r0, r0, c10
                mul r6, r6, c10.x
                mul r8, r3.w, r6
                mad r9, c9.x, r8, r6
                mul r9, r9, c1
                mad r7, c0, r7, r9
                mul r3, r3.w, r0
                mad r9, c9.x, r3, r0
                mad r7, c2, r9, r7
                dp4 r1.x, r7, c11.x
                mad r7, c9.y, r2, r4
                mad r2, c9.z, r2, r4
                mad r4, c9.y, r8, r6
                mad r6, c9.z, r8, r6
                mul r6, r6, c7
                mad r2, c6, r2, r6
                mul r4, r4, c4
                mad r4, c3, r7, r4
                mad r6, c9.y, r3, r0
                mad r0, c9.z, r3, r0
                mad r0, c8, r0, r2
                dp4 r1.z, r0, c11.x
                mad r0, c5, r6, r4
                dp4 r1.y, r0, c11.x
                mul r0, r1, r5
                mov oC0, r0
            
            // approximately 43 instruction slots used (5 texture, 38 arithmetic)
            };
    }
}

technique NdotL_Unbias
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   int g_NumBones;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_NumBones   c0       1
            //
            
                preshader
                add r0.x, c0.x, (-1)
                lt r1.x, (0), r0.x
                neg r0.y, r1.x
                add r1.y, r0.y, (2)
                lt r2.x, r1.x, r0.x
                mul r0.y, r1.y, r2.x
                add r2.y, r0.y, r1.x
                mov c78.x, r1.x
                lt r1.x, r2.y, r0.x
                mul r0.y, r1.x, r2.x
                mov c79.x, r2.x
                neg r0.z, r2.y
                add r1.x, r0.z, (3)
                mul r2.x, r0.y, r1.x
                add r0.z, r2.x, r2.y
                lt r1.x, r0.z, r0.x
                mov c83.x, r0.x
                mul c82.x, r0.y, r1.x
                mov c81.x, r0.y
            
            // approximately 19 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mViewProjection;
            //   float4x3 g_mWorldMatrixArray[26];
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_mWorldMatrixArray c0      78
            //   g_mViewProjection   c84      4
            //
            
                vs_2_0
                def c92, 3, 0, 0, 0
                def c88, 1, 0, 0, 0
                def c89, 0, 1, 0, 0
                def c90, 0, 0, 1, 0
                def c91, 0, 0, 0, 1
                dcl_position v0
                dcl_normal v1
                dcl_tangent v2
                dcl_blendweight v3
                dcl_blendindices v4
                dcl_texcoord v5
                slt r0, v4, -v4
                frc r1, v4
                add r2, -r1, v4
                slt r1, -r1, r1
                mad r0, r0, r1, r2
                mul r1, r0, c92.x
                mova a0.w, c83.x
                dp4 r0.x, r0, c88[a0.w]
                mul r0.x, r0.x, c92.x
                mova a0.w, r1.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v2, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mov r2.w, v3.x
                mad r3.w, c78.x, r2.w, v3.y
                mul r4, r2, c78.x
                mova a0.w, r1.y
                dp3 r5.x, v2, c0[a0.w]
                mova a0.w, r1.y
                dp3 r5.y, v2, c1[a0.w]
                mova a0.w, r1.y
                dp3 r5.z, v2, c2[a0.w]
                mad r3.xyz, r5, v3.y, r4
                mad r2, c78.x, -r2, r3
                mad r2, c79.x, r2, r4
                add r3.w, r2.w, v3.z
                mova a0.w, r1.z
                dp3 r4.x, v2, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v2, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v2, c2[a0.w]
                mad r3.xyz, r4, v3.z, r2
                lrp r4, c81.x, r3, r2
                add r2.w, r4.w, v3.w
                mova a0.w, r1.w
                dp3 r3.x, v2, c0[a0.w]
                mova a0.w, r1.w
                dp3 r3.y, v2, c1[a0.w]
                mova a0.w, r1.w
                dp3 r3.z, v2, c2[a0.w]
                mad r2.xyz, r3, v3.w, r4
                lrp r3, c82.x, r2, r4
                add r0.y, -r3.w, c88.x
                mova a0.w, r1.y
                dp4 r2.x, v0, c0[a0.w]
                mova a0.w, r1.y
                dp4 r2.y, v0, c1[a0.w]
                mova a0.w, r1.y
                dp4 r2.z, v0, c2[a0.w]
                mul r2.xyz, r2, v3.y
                mul r2.xyz, r2, c79.x
                mova a0.w, r1.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.x
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.x
                mad r2.xyz, c78.x, r4, r2
                mova a0.w, r1.z
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.z
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.z
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.z
                mad r2.xyz, c81.x, r4, r2
                mova a0.w, r1.w
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.w
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.w
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.w
                mad r2.xyz, c82.x, r4, r2
                mova a0.w, r0.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r0.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r0.x
                dp4 r4.z, v0, c2[a0.w]
                mad r2.xyz, r4, r0.y, r2
                mov r2.w, c88.x
                dp4 oPos.x, r2, c84
                dp4 oPos.y, r2, c85
                dp4 oPos.z, r2, c86
                dp4 oPos.w, r2, c87
                mova a0.w, r1.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mova a0.w, r1.y
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.y
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.y
                dp3 r4.z, v1, c2[a0.w]
                mul r4.xyz, r4, v3.y
                mul r4.xyz, r4, c79.x
                mad r2.xyz, c78.x, r2, r4
                mova a0.w, r1.z
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v1, c2[a0.w]
                mul r1.xyz, r4, v3.z
                mad r1.xyz, c81.x, r1, r2
                mova a0.w, r1.w
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.w
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.w
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.w
                mad r1.xyz, c82.x, r2, r1
                mova a0.w, r0.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v1, c2[a0.w]
                mad r1.xyz, r2, r0.y, r1
                mova a0.w, r0.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v2, c2[a0.w]
                mad r0.xyz, r2, r0.y, r3
                mul r2.xyz, r0.yzxw, r1.zxyw
                mad oT3.xyz, r1.yzxw, r0.zxyw, -r2
                mov oT1.xyz, r1
                mov oT2.xyz, r0
                mov oT0.xy, v5
            
            // approximately 142 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D AlbedoSampler;
            //   sampler2D NormalMapSampler;
            //   float g_fLightIntensity;
            //   float3 g_vLightDirection;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightDirection c0       1
            //   g_fLightIntensity c1       1
            //   AlbedoSampler     s0       1
            //   NormalMapSampler  s1       1
            //
            
                ps_2_0
                def c2, 2, -1, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                texld r1, t0, s0
                mad r0.xyz, r0, c2.x, c2.y
                mul r2.xyz, r0.y, t3
                mad r2.xyz, r0.x, t2, r2
                mad r0.xyz, r0.z, t1, r2
                dp3_sat r0.x, r0, c0
                mul r0.x, r0.x, c1.x
                mul r0, r0.x, r1
                mov oC0, r0
            
            // approximately 10 instruction slots used (2 texture, 8 arithmetic)
            };
    }
}

technique LDPRT_Unbias
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   int g_NumBones;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_NumBones   c0       1
            //
            
                preshader
                add r0.x, c0.x, (-1)
                lt r1.x, (0), r0.x
                neg r0.y, r1.x
                add r1.y, r0.y, (2)
                lt r2.x, r1.x, r0.x
                mul r0.y, r1.y, r2.x
                add r2.y, r0.y, r1.x
                mov c78.x, r1.x
                lt r1.x, r2.y, r0.x
                mul r0.y, r1.x, r2.x
                mov c79.x, r2.x
                neg r0.z, r2.y
                add r1.x, r0.z, (3)
                mul r2.x, r0.y, r1.x
                add r0.z, r2.x, r2.y
                lt r1.x, r0.z, r0.x
                mov c83.x, r0.x
                mul c82.x, r0.y, r1.x
                mov c81.x, r0.y
            
            // approximately 19 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mViewProjection;
            //   float4x3 g_mWorldMatrixArray[26];
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_mWorldMatrixArray c0      78
            //   g_mViewProjection   c84      4
            //
            
                vs_2_0
                def c92, 3, 0, 0, 0
                def c88, 1, 0, 0, 0
                def c89, 0, 1, 0, 0
                def c90, 0, 0, 1, 0
                def c91, 0, 0, 0, 1
                dcl_position v0
                dcl_normal v1
                dcl_tangent v2
                dcl_blendweight v3
                dcl_blendindices v4
                dcl_texcoord v5
                slt r0, v4, -v4
                frc r1, v4
                add r2, -r1, v4
                slt r1, -r1, r1
                mad r0, r0, r1, r2
                mul r1, r0, c92.x
                mova a0.w, c83.x
                dp4 r0.x, r0, c88[a0.w]
                mul r0.x, r0.x, c92.x
                mova a0.w, r1.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v2, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mov r2.w, v3.x
                mad r3.w, c78.x, r2.w, v3.y
                mul r4, r2, c78.x
                mova a0.w, r1.y
                dp3 r5.x, v2, c0[a0.w]
                mova a0.w, r1.y
                dp3 r5.y, v2, c1[a0.w]
                mova a0.w, r1.y
                dp3 r5.z, v2, c2[a0.w]
                mad r3.xyz, r5, v3.y, r4
                mad r2, c78.x, -r2, r3
                mad r2, c79.x, r2, r4
                add r3.w, r2.w, v3.z
                mova a0.w, r1.z
                dp3 r4.x, v2, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v2, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v2, c2[a0.w]
                mad r3.xyz, r4, v3.z, r2
                lrp r4, c81.x, r3, r2
                add r2.w, r4.w, v3.w
                mova a0.w, r1.w
                dp3 r3.x, v2, c0[a0.w]
                mova a0.w, r1.w
                dp3 r3.y, v2, c1[a0.w]
                mova a0.w, r1.w
                dp3 r3.z, v2, c2[a0.w]
                mad r2.xyz, r3, v3.w, r4
                lrp r3, c82.x, r2, r4
                add r0.y, -r3.w, c88.x
                mova a0.w, r1.y
                dp4 r2.x, v0, c0[a0.w]
                mova a0.w, r1.y
                dp4 r2.y, v0, c1[a0.w]
                mova a0.w, r1.y
                dp4 r2.z, v0, c2[a0.w]
                mul r2.xyz, r2, v3.y
                mul r2.xyz, r2, c79.x
                mova a0.w, r1.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.x
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.x
                mad r2.xyz, c78.x, r4, r2
                mova a0.w, r1.z
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.z
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.z
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.z
                mad r2.xyz, c81.x, r4, r2
                mova a0.w, r1.w
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r1.w
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r1.w
                dp4 r4.z, v0, c2[a0.w]
                mul r4.xyz, r4, v3.w
                mad r2.xyz, c82.x, r4, r2
                mova a0.w, r0.x
                dp4 r4.x, v0, c0[a0.w]
                mova a0.w, r0.x
                dp4 r4.y, v0, c1[a0.w]
                mova a0.w, r0.x
                dp4 r4.z, v0, c2[a0.w]
                mad r2.xyz, r4, r0.y, r2
                mov r2.w, c88.x
                dp4 oPos.x, r2, c84
                dp4 oPos.y, r2, c85
                dp4 oPos.z, r2, c86
                dp4 oPos.w, r2, c87
                mova a0.w, r1.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.x
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.x
                mova a0.w, r1.y
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.y
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.y
                dp3 r4.z, v1, c2[a0.w]
                mul r4.xyz, r4, v3.y
                mul r4.xyz, r4, c79.x
                mad r2.xyz, c78.x, r2, r4
                mova a0.w, r1.z
                dp3 r4.x, v1, c0[a0.w]
                mova a0.w, r1.z
                dp3 r4.y, v1, c1[a0.w]
                mova a0.w, r1.z
                dp3 r4.z, v1, c2[a0.w]
                mul r1.xyz, r4, v3.z
                mad r1.xyz, c81.x, r1, r2
                mova a0.w, r1.w
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r1.w
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r1.w
                dp3 r2.z, v1, c2[a0.w]
                mul r2.xyz, r2, v3.w
                mad r1.xyz, c82.x, r2, r1
                mova a0.w, r0.x
                dp3 r2.x, v1, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v1, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v1, c2[a0.w]
                mad r1.xyz, r2, r0.y, r1
                mova a0.w, r0.x
                dp3 r2.x, v2, c0[a0.w]
                mova a0.w, r0.x
                dp3 r2.y, v2, c1[a0.w]
                mova a0.w, r0.x
                dp3 r2.z, v2, c2[a0.w]
                mad r0.xyz, r2, r0.y, r3
                mul r2.xyz, r0.yzxw, r1.zxyw
                mad oT3.xyz, r1.yzxw, r0.zxyw, -r2
                mov oT1.xyz, r1
                mov oT2.xyz, r0
                mov oT0.xy, v5
            
            // approximately 142 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D AlbedoSampler;
            //   sampler2D NormalMapSampler;
            //   samplerCUBE YlmCoeff0Sampler;
            //   samplerCUBE YlmCoeff4Sampler;
            //   samplerCUBE YlmCoeff8Sampler;
            //   float3 g_vColorTransmit;
            //   float4 g_vLightCoeffsB[4];
            //   float4 g_vLightCoeffsG[4];
            //   float4 g_vLightCoeffsR[4];
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_vLightCoeffsR  c0       3
            //   g_vLightCoeffsG  c3       3
            //   g_vLightCoeffsB  c6       3
            //   g_vColorTransmit c9       1
            //   AlbedoSampler    s0       1
            //   NormalMapSampler s1       1
            //   YlmCoeff0Sampler s2       1
            //   YlmCoeff4Sampler s3       1
            //   YlmCoeff8Sampler s4       1
            //
            
                ps_2_0
                def c10, 2, -1, 0.25, 1
                def c11, 0.25, 0, 0, 0
                def c12, 1, 0.666666687, 0.666666687, 0.666666687
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3.xyz
                dcl_2d s0
                dcl_2d s1
                dcl_cube s2
                dcl_cube s3
                dcl_cube s4
                texld r0, t0, s1
                mov r1.yzw, -c12.w
                mov r2.x, c10.w
                mad r0.xyz, r0, c10.x, c10.y
                mul r3.xyz, r0.y, t3
                mad r3.xyz, r0.x, t2, r3
                mad r0.xyz, r0.z, t1, r3
                texld r3, r0, s2
                texld r4, t0, s0
                texld r5, r0, s3
                texld r0, r0, s4
                mov r2.yzw, r4.w
                mul r6, r2, r3
                mul r3, r3, c12
                mov r1.x, r2.w
                mul r1, r1, r6
                mad r6, c9.x, r1, r3
                mul r0, r0, c11
                mul r5, r5, c10.z
                mul r7, r2.w, r5
                mad r8, c9.x, r7, r5
                mul r8, r8, c1
                mad r6, c0, r6, r8
                mul r2, r2.w, r0
                mad r8, c9.x, r2, r0
                mad r6, c2, r8, r6
                dp4 r6.x, r6, c10.w
                mad r8, c9.y, r1, r3
                mad r1, c9.z, r1, r3
                mad r3, c9.y, r7, r5
                mad r5, c9.z, r7, r5
                mul r5, r5, c7
                mad r1, c6, r1, r5
                mul r3, r3, c4
                mad r3, c3, r8, r3
                mad r5, c9.y, r2, r0
                mad r0, c9.z, r2, r0
                mad r0, c8, r0, r1
                dp4 r6.z, r0, c10.w
                mad r0, c5, r5, r3
                dp4 r6.y, r0, c10.w
                mov r6.w, c10.w
                mul r0, r4, r6
                mov oC0, r0
            
            // approximately 44 instruction slots used (5 texture, 39 arithmetic)
            };
    }
}

