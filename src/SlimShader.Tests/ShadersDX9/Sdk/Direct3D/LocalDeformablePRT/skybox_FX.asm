
//listing of all techniques and passes with embedded asm listings 

technique Skybox
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mInvWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                      Reg   Size
            //   ------------------------- ----- ----
            //   g_mInvWorldViewProjection c0       4
            //
            
                vs_2_0
                dcl_position v0
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT0.xyz, r0.w, r0
                mov oPos, v0
            
            // approximately 8 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fAlpha;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_fAlpha     c0       1
            //
            
                preshader
                mov c1.x, c0.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   samplerCUBE EnvironmentSampler;
            //   float g_fScale;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_fScale           c0       1
            //   EnvironmentSampler s0       1
            //
            
                ps_2_0
                dcl t0.xyz
                dcl_cube s0
                texld r0, t0, s0
                mul r0.xyz, r0, c0.x
                mov r0.w, c1.x
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

