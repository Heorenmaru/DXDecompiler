
//listing of all techniques and passes with embedded asm listings 

technique RenderSceneAmbient
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_texcoord v1
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                mov oT0.xy, v1
            
            // approximately 5 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //   float4 g_vAmbient;
            //   float4 g_vMatColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vAmbient   c0       1
            //   g_vMatColor  c1       1
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, c0
                mul r0, r0, c1
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique ShowShadowVolume
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass P1
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique ShowShadowVolume2Sided
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderShadowVolume
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass P1
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderShadowVolume2Sided
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderShadowVolumeComplexity
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fFarClip;
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mProj                c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vLightView           c12      1
            //   g_fFarClip             c13      1
            //
            
                vs_2_0
                def c14, 0, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                add r0.w, -r0.z, c13.x
                add r1.xyz, r0, -c12
                mul r2.xyz, r0.w, r1
                rcp r0.w, r1.z
                mad r2.xyz, r2, r0.w, r0
                slt r0.x, c12.z, r0.z
                dp4 r2.w, v0, c3
                mov r1.w, c14.x
                lrp r3, r0.x, r2, r1
                dp4 r0.x, r3, c4
                dp4 r0.y, r3, c5
                dp4 r0.z, r3, c6
                dp4 r0.w, r3, c7
                dp4 r2.x, v0, c8
                dp4 r2.y, v0, c9
                dp4 r2.z, v0, c10
                dp4 r2.w, v0, c11
                add r0, r0, -r2
                dp3 r3.x, v1, c0
                dp3 r3.y, v1, c1
                dp3 r3.z, v1, c2
                dp3 r1.x, r3, -r1
                slt r1.x, r1.x, c14.x
                mad oPos, r1.x, r0, r2
            
            // approximately 27 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0.xyz, c0.xyz
                mov c0.w, (0.100000001)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderScene
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightColor;
            //   float4 g_vMatColor;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   g_vLightColor c0       1
            //   g_vMatColor   c1       1
            //
            
                preshader
                mul c8, c0, c1
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c4
                dp4 oPos.y, v0, c5
                dp4 oPos.z, v0, c6
                dp4 oPos.w, v0, c7
                dp4 oT0.x, v0, c0
                dp4 oT0.y, v0, c1
                dp4 oT0.z, v0, c2
                dp4 oT0.w, v0, c3
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT1.xyz, r0.w, r0
                mov oT2.xy, v2
                mov oT3, c8
            
            // approximately 16 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //   float3 g_vLightView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_vLightView c0       1
            //   g_samScene   s0       1
            //
            
                ps_2_0
                def c1, 1.44000006, 1, 0, 0
                dcl t0.xyz
                dcl t1.xyz
                dcl t2.xy
                dcl t3
                dcl_2d s0
                texld r0, t2, s0
                add r1.xyz, -t0, c0
                dp3 r1.w, r1, r1
                rsq r2.w, r1.w
                rcp r1.w, r1.w
                mul r1.xyz, r1, r2.w
                nrm r2.xyz, t1
                dp3_sat r1.x, r2, r1
                mul r2, r1.x, t3
                mul r2, r2, c1.x
                mul r1, r1.w, r2
                mov r0.w, c1.y
                mul r0, r1, r0
                mov oC0, r0
            
            // approximately 16 instruction slots used (1 texture, 15 arithmetic)
            };
    }
}

technique RenderDirtyStencil
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightColor;
            //   float4 g_vMatColor;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   g_vLightColor c0       1
            //   g_vMatColor   c1       1
            //
            
                preshader
                mul c8, c0, c1
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 oPos.x, v0, c4
                dp4 oPos.y, v0, c5
                dp4 oPos.z, v0, c6
                dp4 oPos.w, v0, c7
                dp4 oT0.x, v0, c0
                dp4 oT0.y, v0, c1
                dp4 oT0.z, v0, c2
                dp4 oT0.w, v0, c3
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT1.xyz, r0.w, r0
                mov oT2.xy, v2
                mov oT3, c8
            
            // approximately 16 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vShadowColor;
            //
            //
            // Registers:
            //
            //   Name           Reg   Size
            //   -------------- ----- ----
            //   g_vShadowColor c0       1
            //
            
                preshader
                mov c0, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderComplexity
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 0, 0, 0
                mov r0, c0.x
                mov oC0, r0
            
            // approximately 2 instruction slots used
            };
    }
    pass p1
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 0, 0, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p2
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 0.5, 0, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p3
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 1, 0, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p4
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 0, 1, 0, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p5
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 0, 1, 1, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p6
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 0, 0, 1, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass p7
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                def c0, 1, 0, 1, 1
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
}

