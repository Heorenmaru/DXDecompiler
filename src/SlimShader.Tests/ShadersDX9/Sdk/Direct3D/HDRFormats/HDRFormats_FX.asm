
//listing of all techniques and passes with embedded asm listings 

technique Bloom
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   float4 g_avSampleWeights[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0      15
            //   g_avSampleWeights c15     15
            //   s0                s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                add r9.xy, t0, c9
                add r10.xy, t0, c10
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mul r0, r0, c16
                mad r0, c15, r1, r0
                mad r0, c17, r2, r0
                mad r0, c18, r3, r0
                mad r0, c19, r4, r0
                mad r0, c20, r5, r0
                mad r0, c21, r6, r0
                mad r0, c22, r7, r0
                mad r0, c23, r8, r0
                mad r0, c24, r9, r0
                mad r0, c25, r10, r0
                add r1.xy, t0, c11
                add r2.xy, t0, c12
                add r3.xy, t0, c13
                add r4.xy, t0, c14
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                mad r0, c26, r1, r0
                mad r0, c27, r2, r0
                mad r0, c28, r3, r0
                mad r0, c29, r4, r0
                mov oC0, r0
            
            // approximately 46 instruction slots used (15 texture, 31 arithmetic)
            };
    }
}

technique Scene_FP16
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProj;
            //   float3 g_vEyePt;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorld         c4       3
            //   g_vEyePt         c7       1
            //
            
                vs_2_0
                def c8, 1, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                mad r0, v0.xyzx, c8.xxxy, c8.yyyx
                dp4 oPos.x, r0, c0
                dp4 oPos.y, r0, c1
                dp4 oPos.z, r0, c2
                dp4 oPos.w, r0, c3
                dp3 oT0.x, v1, c4
                dp3 oT0.y, v1, c5
                dp3 oT0.z, v1, c6
                dp4 r1.x, r0, c4
                dp4 r1.y, r0, c5
                dp4 r1.z, r0, c6
                add oT1.xyz, r1, -c7
            
            // approximately 12 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   samplerCUBE CubeSampler;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   CubeSampler  s3       1
            //
            
                ps_2_0
                def c0, 0, 0, 0.400000006, 0.200000003
                def c1, 1, 0, 0, 0
                dcl t0.xyz
                dcl t1.xyz
                dcl_cube s3
                mov r0.xyz, t0
                dp3 r0.w, t1, r0
                add r0.w, r0.w, r0.w
                mad r0.xyz, r0, -r0.w, t1
                texld r0, r0, s3
                mul_sat r1.xyz, t0.y, c0
                add r2.xy, r0, -r1.y
                add r2.z, r0.z, -r1.z
                mad r0.xyz, r2, c0.w, r1
                mov r0.w, c1.x
                mov oC0, r0
            
            // approximately 11 instruction slots used (1 texture, 10 arithmetic)
            };
    }
}

technique Scene_RGBE8
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProj;
            //   float3 g_vEyePt;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorld         c4       3
            //   g_vEyePt         c7       1
            //
            
                vs_2_0
                def c8, 1, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                mad r0, v0.xyzx, c8.xxxy, c8.yyyx
                dp4 oPos.x, r0, c0
                dp4 oPos.y, r0, c1
                dp4 oPos.z, r0, c2
                dp4 oPos.w, r0, c3
                dp3 oT0.x, v1, c4
                dp3 oT0.y, v1, c5
                dp3 oT0.z, v1, c6
                dp4 r1.x, r0, c4
                dp4 r1.y, r0, c5
                dp4 r1.z, r0, c6
                add oT1.xyz, r1, -c7
            
            // approximately 12 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   samplerCUBE CubeSampler;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   CubeSampler  s3       1
            //
            
                ps_2_0
                def c0, 255, -128, 0.200000003, 128
                def c1, 0, 0, 0.400000006, 0.00392156886
                dcl t0.xyz
                dcl t1.xyz
                dcl_cube s3
                mov r0.xyz, t0
                dp3 r0.w, t1, r0
                add r0.w, r0.w, r0.w
                mad r0.xyz, r0, -r0.w, t1
                texld r0, r0, s3
                mad r0.w, r0.w, c0.x, c0.y
                exp r0.w, r0.w
                mul_sat r1.xyz, t0.y, c1
                mad r2.xy, r0, r0.w, -r1.y
                mad r2.z, r0.z, r0.w, -r1.z
                mad r0.xyz, r2, c0.z, r1
                max r1.x, r0.x, r0.y
                max r2.x, r1.x, r0.z
                log r0.w, r2.x
                frc r1.x, -r0.w
                add r0.w, r0.w, r1.x
                exp r1.x, r0.w
                add r0.w, r0.w, c0.w
                mul r2.w, r0.w, c1.w
                rcp r0.w, r1.x
                mul r2.xyz, r0.w, r0
                mov oC0, r2
            
            // approximately 22 instruction slots used (1 texture, 21 arithmetic)
            };
    }
}

technique Scene_RGB16
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProj;
            //   float3 g_vEyePt;
            //
            //
            // Registers:
            //
            //   Name             Reg   Size
            //   ---------------- ----- ----
            //   g_mWorldViewProj c0       4
            //   g_mWorld         c4       3
            //   g_vEyePt         c7       1
            //
            
                vs_2_0
                def c8, 1, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                mad r0, v0.xyzx, c8.xxxy, c8.yyyx
                dp4 oPos.x, r0, c0
                dp4 oPos.y, r0, c1
                dp4 oPos.z, r0, c2
                dp4 oPos.w, r0, c3
                dp3 oT0.x, v1, c4
                dp3 oT0.y, v1, c5
                dp3 oT0.z, v1, c6
                dp4 r1.x, r0, c4
                dp4 r1.y, r0, c5
                dp4 r1.z, r0, c6
                add oT1.xyz, r1, -c7
            
            // approximately 12 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   samplerCUBE CubeSampler;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   CubeSampler  s3       1
            //
            
                ps_2_0
                def c0, 0, 0, 0.400000006, 100
                def c1, 0.200000003, 0.00999999978, 0, 0
                dcl t0.xyz
                dcl t1.xyz
                dcl_cube s3
                mov r0.xyz, t0
                dp3 r0.w, t1, r0
                add r0.w, r0.w, r0.w
                mad r0.xyz, r0, -r0.w, t1
                texld r0, r0, s3
                mul_sat r1.xyz, t0.y, c0
                mad r2.xy, r0, c0.w, -r1.y
                mad r2.z, r0.z, c0.w, -r1.z
                mad r0.xyz, r2, c1.x, r1
                mul r0.xyz, r0, c1.y
                mov r0.w, c0.x
                mov oC0, r0
            
            // approximately 12 instruction slots used (1 texture, 11 arithmetic)
            };
    }
}

technique FinalPass_FP16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //   s1           s1       1
            //   s2           s2       1
            //
            
                ps_2_0
                def c0, 0.5, 0.00100000005, 0.720000029, 1
                def c1, 0.666666687, 1, 0.600000024, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mov r0.xy, c0.x
                texld r0, r0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                add r1.w, r0.x, c0.y
                rcp r1.w, r1.w
                mul r1.w, r1.w, c0.z
                mul r0.xyz, r1.w, r1
                mad r1.xyz, r0, c1.x, c1.y
                mul r3.xyz, r0, r1
                mad r0.xyz, r0, r1, c0.w
                mul r1.xyz, r2, c1.z
                rcp r2.x, r0.x
                rcp r2.y, r0.y
                rcp r2.z, r0.z
                mad r0.xyz, r3, r2, r1
                mov r0.w, c0.w
                mov oC0, r0
            
            // approximately 18 instruction slots used (3 texture, 15 arithmetic)
            };
    }
}

technique FinalPass_RGBE8
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //   s1           s1       1
            //   s2           s2       1
            //
            
                ps_2_0
                def c0, 0.5, 255, -128, 0.00100000005
                def c1, 0.720000029, 0.666666687, 1, 0.600000024
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mov r0.xy, c0.x
                texld r0, r0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                mad r2.w, r0.w, c0.y, c0.z
                exp r2.w, r2.w
                mad r2.w, r0.x, r2.w, c0.w
                rcp r2.w, r2.w
                mul r2.w, r2.w, c1.x
                mad r1.w, r1.w, c0.y, c0.z
                exp r1.w, r1.w
                mul r0.xyz, r1.w, r1
                mul r0.xyz, r2.w, r0
                mad r1.xyz, r0, c1.y, c1.z
                mul r3.xyz, r0, r1
                mad r0.xyz, r0, r1, c1.z
                rcp r1.x, r0.x
                rcp r1.y, r0.y
                rcp r1.z, r0.z
                mul r0.xyz, r2, c1.w
                mad r0.xyz, r3, r1, r0
                mov r0.w, c1.z
                mov oC0, r0
            
            // approximately 23 instruction slots used (3 texture, 20 arithmetic)
            };
    }
}

technique FinalPass_RGB16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //   sampler2D s1;
            //   sampler2D s2;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //   s1           s1       1
            //   s2           s2       1
            //
            
                ps_2_0
                def c0, 0.5, 100, 0.00100000005, 0.720000029
                def c1, 0.666666687, 1, 0.600000024, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mov r0.xy, c0.x
                texld r0, r0, s1
                texld r1, t0, s0
                texld r2, t0, s2
                mad r1.w, r0.x, c0.y, c0.z
                rcp r1.w, r1.w
                mul r1.w, r1.w, c0.w
                mul r0.xyz, r1, c0.y
                mul r0.xyz, r1.w, r0
                mad r1.xyz, r0, c1.x, c1.y
                mul r3.xyz, r0, r1
                mad r0.xyz, r0, r1, c1.y
                mul r1.xyz, r2, c1.z
                rcp r2.x, r0.x
                rcp r2.y, r0.y
                rcp r2.z, r0.z
                mad r0.xyz, r3, r2, r1
                mov r0.w, c1.y
                mov oC0, r0
            
            // approximately 19 instruction slots used (3 texture, 16 arithmetic)
            };
    }
}

technique FinalPassEncoded_RGB
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov oC0, r0
            
            // approximately 2 instruction slots used (1 texture, 1 arithmetic)
            };
    }
}

technique FinalPassEncoded_A
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   s0           s0       1
            //
            
                ps_2_0
                def c0, 1, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r0.xyz, r0.w
                mov r0.w, c0.x
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique DownScale3x3_FP16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //
            
                ps_2_0
                def c9, 0.111111112, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                add r0.x, r0.x, r1.x
                add r0.x, r2.x, r0.x
                add r0.x, r3.x, r0.x
                add r0.x, r4.x, r0.x
                add r0.x, r5.x, r0.x
                add r0.x, r6.x, r0.x
                add r0.x, r7.x, r0.x
                add r0.x, r8.x, r0.x
                mul r0.xyz, r0.x, c9.x
                mov r0.w, c9.y
                mov oC0, r0
            
            // approximately 29 instruction slots used (9 texture, 20 arithmetic)
            };
    }
}

technique DownScale3x3_RGBE8
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //
            
                ps_2_0
                def c9, 255, -128, 0.111111112, 128
                def c10, 0.00392156886, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                mad r0.y, r0.w, c9.x, c9.y
                exp r0.y, r0.y
                mul r0.x, r0.y, r0.x
                mad r0.y, r1.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r1.x, r0.y, r0.x
                mad r0.y, r2.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r2.x, r0.y, r0.x
                mad r0.y, r3.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r3.x, r0.y, r0.x
                mad r0.y, r4.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r4.x, r0.y, r0.x
                mad r0.y, r5.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r5.x, r0.y, r0.x
                mad r0.y, r6.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r6.x, r0.y, r0.x
                mad r0.y, r7.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r7.x, r0.y, r0.x
                mad r0.y, r8.w, c9.x, c9.y
                exp r0.y, r0.y
                mad r0.x, r8.x, r0.y, r0.x
                mul r0.x, r0.x, c9.z
                log r0.y, r0.x
                frc r0.z, -r0.y
                add r0.y, r0.z, r0.y
                exp r0.z, r0.y
                add r0.y, r0.y, c9.w
                mul r1.w, r0.y, c10.x
                rcp r0.y, r0.z
                mul r1.x, r0.y, r0.x
                mov r1.yz, c10.y
                mov oC0, r1
            
            // approximately 56 instruction slots used (9 texture, 47 arithmetic)
            };
    }
}

technique DownScale3x3_RGB16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //
            
                ps_2_0
                def c9, 100, 0.00111111114, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                mul r0.x, r0.x, c9.x
                mad r0.x, r1.x, c9.x, r0.x
                mad r0.x, r2.x, c9.x, r0.x
                mad r0.x, r3.x, c9.x, r0.x
                mad r0.x, r4.x, c9.x, r0.x
                mad r0.x, r5.x, c9.x, r0.x
                mad r0.x, r6.x, c9.x, r0.x
                mad r0.x, r7.x, c9.x, r0.x
                mad r0.x, r8.x, c9.x, r0.x
                mul r0.x, r0.x, c9.y
                mov r0.yzw, c9.z
                mov oC0, r0
            
            // approximately 30 instruction slots used (9 texture, 21 arithmetic)
            };
    }
}

technique DownScale2x2_Lum_FP16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       4
            //   s0                s0       1
            //
            
                ps_2_0
                def c4, 0.212500006, 0.715399981, 0.0720999986, 0.25
                def c5, 1, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                dp3 r1.w, r0, c4
                dp3 r2.w, r1, c4
                add r2.w, r1.w, r2.w
                dp3 r3.w, r2, c4
                add r3.w, r2.w, r3.w
                dp3 r0.x, r3, c4
                add r0.x, r0.x, r3.w
                mul r0.xyz, r0.x, c4.w
                mov r0.w, c5.x
                mov oC0, r0
            
            // approximately 18 instruction slots used (4 texture, 14 arithmetic)
            };
    }
}

technique DownScale2x2_Lum_RGBE8
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       4
            //   s0                s0       1
            //
            
                ps_2_0
                def c4, 0.212500006, 0.715399981, 0.0720999986, 0.00392156886
                def c5, 255, -128, 0.25, 128
                def c6, 0, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                mad r0.w, r0.w, c5.x, c5.y
                exp r0.w, r0.w
                mul r0.xyz, r0.w, r0
                dp3 r0.x, r0, c4
                mad r1.w, r1.w, c5.x, c5.y
                exp r1.w, r1.w
                mul r1.xyz, r1.w, r1
                dp3 r0.y, r1, c4
                add r0.x, r0.y, r0.x
                mad r2.w, r2.w, c5.x, c5.y
                exp r2.w, r2.w
                mul r1.xyz, r2.w, r2
                dp3 r0.y, r1, c4
                add r0.x, r0.y, r0.x
                mad r3.w, r3.w, c5.x, c5.y
                exp r3.w, r3.w
                mul r1.xyz, r3.w, r3
                dp3 r0.y, r1, c4
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, c5.z
                log r0.y, r0.x
                frc r0.z, -r0.y
                add r0.y, r0.z, r0.y
                exp r0.z, r0.y
                add r0.y, r0.y, c5.w
                mul r1.w, r0.y, c4.w
                rcp r0.y, r0.z
                mul r1.x, r0.y, r0.x
                mov r1.yz, c6.x
                mov oC0, r1
            
            // approximately 38 instruction slots used (4 texture, 34 arithmetic)
            };
    }
}

technique DownScale2x2_Lum_RGB16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       4
            //   s0                s0       1
            //
            
                ps_2_0
                def c4, 100, 0.0720999986, 0.715399981, 0.212500006
                def c5, 0.00249999994, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                mul r0.xyz, r0, c4.x
                dp3 r1.w, r0, c4.wzyx
                mul r0.xyz, r1, c4.x
                dp3 r2.w, r0, c4.wzyx
                add r2.w, r1.w, r2.w
                mul r0.xyz, r2, c4.x
                dp3 r3.w, r0, c4.wzyx
                add r3.w, r2.w, r3.w
                mul r0.xyz, r3, c4.x
                dp3 r0.x, r0, c4.wzyx
                add r0.x, r0.x, r3.w
                mul r0.x, r0.x, c5.x
                mov r0.yzw, c5.y
                mov oC0, r0
            
            // approximately 22 instruction slots used (4 texture, 18 arithmetic)
            };
    }
}

technique DownScale3x3_BrightPass_FP16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //   s1                s1       1
            //
            
                ps_2_0
                def c9, 0.5, 0.111111112, -0.5, 0
                def c10, 0.00100000005, 0.720000029, 0.666666687, 1
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                add r0.xy, t0, c0
                add r1.xy, t0, c1
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                mov r9.xy, c9.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s1
                add r0.xyz, r0, r1
                add r0.xyz, r2, r0
                add r0.xyz, r3, r0
                add r0.xyz, r4, r0
                add r0.xyz, r5, r0
                add r0.xyz, r6, r0
                add r0.xyz, r7, r0
                add r0.xyz, r8, r0
                mad r0.xyz, r0, c9.y, c9.z
                max r1.xyz, r0, c9.w
                add r1.w, r9.x, c10.x
                rcp r1.w, r1.w
                mul r1.w, r1.w, c10.y
                mul r0.xyz, r1.w, r1
                mad r1.xyz, r0, c10.z, c10.w
                mul r2.xyz, r0, r1
                mad r0.xyz, r0, r1, c10.w
                rcp r1.x, r0.x
                rcp r1.y, r0.y
                rcp r1.z, r0.z
                mul r0.xyz, r1, r2
                mov r0.w, c10.w
                mov oC0, r0
            
            // approximately 43 instruction slots used (10 texture, 33 arithmetic)
            };
    }
}

technique DownScale3x3_BrightPass_RGBE8
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //   s1                s1       1
            //
            
                ps_2_0
                def c9, 0.5, 255, -128, -0.111111112
                def c10, 0, 0.00100000005, 0.720000029, 1
                def c11, 0.666666687, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                mov r9.xy, c9.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s1
                mad r0.w, r0.w, c9.y, c9.z
                exp r0.w, r0.w
                mul r0.xyz, r0.w, r0
                mad r0.w, r1.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r1, r0.w, r0
                mad r0.w, r2.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r2, r0.w, r0
                mad r0.w, r3.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r3, r0.w, r0
                mad r0.w, r4.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r4, r0.w, r0
                mad r0.w, r5.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r5, r0.w, r0
                mad r0.w, r6.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r6, r0.w, r0
                mad r0.w, r7.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r7, r0.w, r0
                mad r0.w, r8.w, c9.y, c9.z
                exp r0.w, r0.w
                mad r0.xyz, r8, r0.w, r0
                mad r0.xyz, r0, -c9.w, -c9.x
                max r1.xyz, r0, c10.x
                mad r1.w, r9.w, c9.y, c9.z
                exp r1.w, r1.w
                mad r1.w, r9.x, r1.w, c10.y
                rcp r1.w, r1.w
                mul r1.w, r1.w, c10.z
                mul r0.xyz, r1.w, r1
                mad r1.xyz, r0, c11.x, c11.y
                mul r2.xyz, r0, r1
                mad r0.xyz, r0, r1, c10.w
                rcp r1.x, r0.x
                rcp r1.y, r0.y
                rcp r1.z, r0.z
                mul r0.xyz, r1, r2
                mov r0.w, c10.w
                mov oC0, r0
            
            // approximately 64 instruction slots used (10 texture, 54 arithmetic)
            };
    }
}

technique DownScale3x3_BrightPass_RGB16
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float2 g_avSampleOffsets[16];
            //   sampler2D s0;
            //   sampler2D s1;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_avSampleOffsets c0       9
            //   s0                s0       1
            //   s1                s1       1
            //
            
                ps_2_0
                def c9, 0.5, 100, 0.111111112, -0.5
                def c10, 0, 100, 0.00100000005, 0.720000029
                def c11, 0.666666687, 1, 0, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                add r0.xy, t0, c1
                add r1.xy, t0, c0
                add r2.xy, t0, c2
                add r3.xy, t0, c3
                add r4.xy, t0, c4
                add r5.xy, t0, c5
                add r6.xy, t0, c6
                add r7.xy, t0, c7
                add r8.xy, t0, c8
                mov r9.xy, c9.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s1
                mul r0.xyz, r0, c9.y
                mad r0.xyz, r1, c9.y, r0
                mad r0.xyz, r2, c9.y, r0
                mad r0.xyz, r3, c9.y, r0
                mad r0.xyz, r4, c9.y, r0
                mad r0.xyz, r5, c9.y, r0
                mad r0.xyz, r6, c9.y, r0
                mad r0.xyz, r7, c9.y, r0
                mad r0.xyz, r8, c9.y, r0
                mad r0.xyz, r0, c9.z, c9.w
                max r1.xyz, r0, c10.x
                mad r1.w, r9.x, c10.y, c10.z
                rcp r1.w, r1.w
                mul r1.w, r1.w, c10.w
                mul r0.xyz, r1.w, r1
                mad r1.xyz, r0, c11.x, c11.y
                mul r2.xyz, r0, r1
                mad r0.xyz, r0, r1, c11.y
                rcp r1.x, r0.x
                rcp r1.y, r0.y
                rcp r1.z, r0.z
                mul r0.xyz, r1, r2
                mov r0.w, c11.y
                mov oC0, r0
            
            // approximately 44 instruction slots used (10 texture, 34 arithmetic)
            };
    }
}

