
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 Diffuse;
            //   float4x4 g_mProj;
            //   float4x4 g_mView;
            //   float4x4 g_mWorld;
            //   float3 g_vLight;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorld     c0       4
            //   g_mView      c4       4
            //   g_mProj      c8       4
            //   g_vLight     c12      1
            //   Diffuse      c13      1
            //
            
                vs_2_0
                def c14, 1, 0, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r1.x, r0, c4
                dp4 r1.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mad r0, r0.xyzx, c14.xxxy, c14.yyyx
                dp4 oPos.x, r1, c8
                dp4 oPos.y, r1, c9
                dp4 oPos.z, r1, c10
                dp4 oPos.w, r1, c11
                dp4 r1.x, r0, c4
                dp4 r1.y, r0, c5
                dp4 r1.z, r0, c6
                add r0.xyz, -r1, c12
                mov oT1.xyz, r1
                nrm r1.xyz, r0
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r2.x, r0, c4
                dp3 r2.y, r0, c5
                dp3 r2.z, r0, c6
                nrm r0.xyz, r2
                dp3 r0.w, r0, r1
                mov oT2.xyz, r0
                mul oD0, r0.w, c13
                mov oT0.xy, v2
            
            // approximately 34 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float Power;
            //   float4 Specular;
            //   sampler2D g_samScene;
            //   float3 g_vLight;
            //   float4 g_vLightColor;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   g_vLightColor c0       1
            //   g_vLight      c1       1
            //   Specular      c2       1
            //   Power         c3       1
            //   g_samScene    s0       1
            //
            
                ps_2_0
                def c4, 1, 0, 0, 0
                dcl v0.xyz
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                texld r0, t0, s0
                dp3 r0.w, -t1, -t1
                rsq r0.w, r0.w
                add r1.xyz, -t1, c1
                nrm r2.xyz, r1
                mad r1.xyz, -t1, r0.w, r2
                nrm r2.xyz, r1
                nrm r1.xyz, t2
                dp3_sat r0.w, r2, r1
                mul r1.xyz, r0.w, c2
                log r2.x, r1.x
                log r2.y, r1.y
                log r2.z, r1.z
                mul r1.xyz, r2, c3.x
                exp r2.x, r1.x
                exp r2.y, r1.y
                exp r2.z, r1.z
                mad r0.xyz, r0, v0, r2
                mul r0.xyz, r0, c0
                mov r0.w, c4.x
                mov oC0, r0
            
            // approximately 27 instruction slots used (1 texture, 26 arithmetic)
            };
    }
}

