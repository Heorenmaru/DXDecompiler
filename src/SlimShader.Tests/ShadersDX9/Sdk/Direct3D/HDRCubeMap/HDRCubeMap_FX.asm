
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1.xyz, r0
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                mov oT0.xy, v2
            
            // approximately 16 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //   float4 g_vLightIntensity;
            //   float4 g_vLightPosView[4];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightPosView   c0       4
            //   g_vLightIntensity c4       1
            //   g_samScene        s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                texld r0, t0, s0
                add r1.xyz, -t1, c1
                dp3 r1.w, r1, r1
                rsq r2.w, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r2.w
                nrm r2.xyz, t2
                dp3_sat r2.w, r1, r2
                mul r2.w, r1.w, r2.w
                add r1.xyz, -t1, c0
                dp3 r1.w, r1, r1
                rsq r3.w, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.w
                dp3_sat r1.x, r1, r2
                mad r2.w, r1.x, r1.w, r2.w
                add r1.xyz, -t1, c2
                dp3 r1.w, r1, r1
                rsq r3.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.x
                dp3_sat r1.x, r1, r2
                mad r2.w, r1.x, r1.w, r2.w
                add r1.xyz, -t1, c3
                dp3 r1.w, r1, r1
                rsq r3.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.x
                dp3_sat r1.x, r1, r2
                mad r1.x, r1.x, r1.w, r2.w
                mul r0, r0, r1.x
                mul r0, r0, c4
                mov oC0, r0
            
            // approximately 35 instruction slots used (1 texture, 34 arithmetic)
            };
    }
}

technique RenderSceneFirstHalf
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1.xyz, r0
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                mov oT0.xy, v2
            
            // approximately 16 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //   float4 g_vLightIntensity;
            //   float4 g_vLightPosView[4];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightPosView   c0       4
            //   g_vLightIntensity c4       1
            //   g_samScene        s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                texld r0, t0, s0
                add r1.xyz, -t1, c1
                dp3 r1.w, r1, r1
                rsq r2.w, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r2.w
                nrm r2.xyz, t2
                dp3_sat r2.w, r1, r2
                mul r2.w, r1.w, r2.w
                add r1.xyz, -t1, c0
                dp3 r1.w, r1, r1
                rsq r3.w, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.w
                dp3_sat r1.x, r1, r2
                mad r2.w, r1.x, r1.w, r2.w
                add r1.xyz, -t1, c2
                dp3 r1.w, r1, r1
                rsq r3.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.x
                dp3_sat r1.x, r1, r2
                mad r2.w, r1.x, r1.w, r2.w
                add r1.xyz, -t1, c3
                dp3 r1.w, r1, r1
                rsq r3.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r1, r3.x
                dp3_sat r1.x, r1, r2
                mad r1.x, r1.x, r1.w, r2.w
                mul r0, r0, r1.x
                mul r0, r0, c4
                mov oC0, r0
            
            // approximately 35 instruction slots used (1 texture, 34 arithmetic)
            };
    }
}

technique RenderSceneSecondHalf
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1.xyz, r0
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul oT2.xyz, r0.w, r0
                mov oT0.xy, v2
            
            // approximately 16 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //   float4 g_vLightIntensity;
            //   float4 g_vLightPosView[4];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightPosView   c0       4
            //   g_vLightIntensity c4       1
            //   g_samScene        s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                texld r0, t0, s0
                add r1.xyz, -t1, c1
                dp3 r1.w, r1, r1
                rsq r0.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r0.x, r1
                nrm r2.xyz, t2
                dp3_sat r2.w, r1, r2
                mul r2.w, r1.w, r2.w
                add r1.xyz, -t1, c0
                dp3 r1.w, r1, r1
                rsq r0.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r0.x, r1
                dp3_sat r0.x, r1, r2
                mad r2.w, r0.x, r1.w, r2.w
                add r1.xyz, -t1, c2
                dp3 r1.w, r1, r1
                rsq r0.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r0.x, r1
                dp3_sat r0.x, r1, r2
                mad r2.w, r0.x, r1.w, r2.w
                add r1.xyz, -t1, c3
                dp3 r1.w, r1, r1
                rsq r0.x, r1.w
                rcp_sat r1.w, r1.w
                mul r1.xyz, r0.x, r1
                dp3_sat r0.x, r1, r2
                mad r0.x, r0.x, r1.w, r2.w
                mul r1.x, r0.x, r0.z
                mul r1.y, r0.x, r0.w
                mul r0.x, r1.x, c4.z
                mul r0.y, r1.y, c4.w
                mov r0.yzw, r0.y
                mov oC0, r0
            
            // approximately 38 instruction slots used (1 texture, 37 arithmetic)
            };
    }
}

technique RenderLight
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightIntensity;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightIntensity c0       1
            //
            
                preshader
                mov c8, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1, c8
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl t1
                mov oC0, t1
            
            // approximately 1 instruction slot used
            };
    }
}

technique RenderLightFirstHalf
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightIntensity;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightIntensity c0       1
            //
            
                preshader
                mov c8, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1, c8
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl t1
                mov r0.xyw, t1
                mov r0.z, t1.w
                mov oC0, r0
            
            // approximately 3 instruction slots used
            };
    }
}

technique RenderLightSecondHalf
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightIntensity;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_vLightIntensity c0       1
            //
            
                preshader
                mov c8, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT1, c8
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl t1
                mov r0.yzw, t1.w
                mov r0.x, t1.z
                mov oC0, r0
            
            // approximately 3 instruction slots used
            };
    }
}

technique RenderHDREnvMap
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                nrm r1.xyz, r0
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r1.w, r0, r0
                rsq r1.w, r1.w
                mul r2.xyz, r0, r1.w
                dp3 r1.w, -r2, r1
                add r1.w, r1.w, r1.w
                mad oT0.xyz, r1.w, r1, r2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
            
            // approximately 20 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fReflectivity;
            //   samplerCUBE g_samCubeMap;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_fReflectivity c0       1
            //   g_samCubeMap    s0       1
            //
            
                ps_2_0
                dcl t0.xyz
                dcl_cube s0
                texld r0, t0, s0
                mul r0, r0, c0.x
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique RenderHDREnvMap2Tex
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                nrm r1.xyz, r0
                dp4 r0.w, v0, c3
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r1.w, r0, r0
                rsq r1.w, r1.w
                mul r2.xyz, r0, r1.w
                dp3 r1.w, -r2, r1
                add r1.w, r1.w, r1.w
                mad oT0.xyz, r1.w, r1, r2
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
            
            // approximately 20 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fReflectivity;
            //   samplerCUBE g_samCubeMap;
            //   samplerCUBE g_samCubeMap2;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_fReflectivity c0       1
            //   g_samCubeMap    s0       1
            //   g_samCubeMap2   s1       1
            //
            
                ps_2_0
                dcl t0.xyz
                dcl_cube s0
                dcl_cube s1
                texld r0, t0, s0
                texld r1, t0, s1
                mov r0.z, r1.x
                mov r0.w, r1.y
                mul r0, r0, c0.x
                mov oC0, r0
            
            // approximately 6 instruction slots used (2 texture, 4 arithmetic)
            };
    }
}

