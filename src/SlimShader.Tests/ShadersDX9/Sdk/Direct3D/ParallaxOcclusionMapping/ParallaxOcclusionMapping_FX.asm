
//listing of all techniques and passes with embedded asm listings 

technique RenderSceneWithPOM
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 g_LightDir;
            //   float g_fBaseTextureRepeat;
            //   float g_fHeightMapScale;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_LightDir             c7       1
            //   g_vEye                 c8       1
            //   g_fBaseTextureRepeat   c9       1
            //   g_fHeightMapScale      c10      1
            //
            
                vs_3_0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_binormal v3
                dcl_tangent v4
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2.xyz
                dcl_texcoord2 o3.xyz
                dcl_texcoord3 o4.xy
                dcl_texcoord4 o5.xyz
                dcl_texcoord5 o6.xyz
                dp4 o0.x, v0, c0
                dp4 o0.y, v0, c1
                dp4 o0.z, v0, c2
                dp4 o0.w, v0, c3
                mul o1.xy, c9.x, v1
                dp3 r0.x, v3, c4
                dp3 r0.y, v3, c5
                dp3 r0.z, v3, c6
                nrm r1.xyz, r0
                mul r0.xyz, r1, c7.y
                dp3 r2.x, v4, c4
                dp3 r2.y, v4, c5
                dp3 r2.z, v4, c6
                nrm r3.xyz, r2
                mad r0.xyz, c7.x, r3, r0
                dp3 r2.x, v2, c4
                dp3 r2.y, v2, c5
                dp3 r2.z, v2, c6
                nrm r4.xyz, r2
                mov o5.xyz, r2
                mad o2.xyz, c7.z, r4, r0
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r0.xyz, -r0, c8
                dp3 r2.x, r3, r0
                dp3 r2.y, r1, r0
                dp3 r2.z, r4, r0
                mov o6.xyz, r0
                dp3 r0.x, r2, r2
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.yzw, r2.xxyz, r2.xxyz
                mad r0.x, r0.x, r0.x, -r0.w
                add r0.y, r0.z, r0.y
                rsq r0.y, r0.y
                mul r0.yz, r0.y, r2.xxyw
                mov o3.xyz, r2
                rcp r0.w, r2.z
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.x, r0.w, r0.x
                mul r0.xy, r0.x, r0.yzzw
                mul o4.xy, r0, c10.x
            
            // approximately 50 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   int g_nMaxSamples;
            //   int g_nMinSamples;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   g_nMinSamples c0       1
            //   g_nMaxSamples c1       1
            //
            
                preshader
                neg r0.x, c1.x
                add c12.x, r0.x, c0.x
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bAddSpecular;
            //   bool g_bVisualizeLOD;
            //   bool g_bVisualizeMipLevel;
            //   float g_fHeightMapScale;
            //   float g_fShadowSoftening;
            //   float g_fSpecularExponent;
            //   float4 g_materialAmbientColor;
            //   float4 g_materialDiffuseColor;
            //   float4 g_materialSpecularColor;
            //   int g_nLODThreshold;
            //   int g_nMaxSamples;
            //   float2 g_vTextureDims;
            //   sampler2D tBase;
            //   sampler2D tNormalHeightMap;
            //
            //
            // Registers:
            //
            //   Name                    Reg   Size
            //   ----------------------- ----- ----
            //   g_materialAmbientColor  c0       1
            //   g_materialDiffuseColor  c1       1
            //   g_materialSpecularColor c2       1
            //   g_fSpecularExponent     c3       1
            //   g_bAddSpecular          c4       1
            //   g_fHeightMapScale       c5       1
            //   g_bVisualizeLOD         c6       1
            //   g_bVisualizeMipLevel    c7       1
            //   g_vTextureDims          c8       1
            //   g_nLODThreshold         c9       1
            //   g_fShadowSoftening      c10      1
            //   g_nMaxSamples           c11      1
            //   tBase                   s0       1
            //   tNormalHeightMap        s1       1
            //
            
                ps_3_0
                def c13, 2, -1, 0, 0
                def c14, 0.879999995, 0.769999981, -0.879999995, -0.769999981
                def c15, 0.660000026, 0.550000012, -0.660000026, 4
                def c16, 6, 0.439999998, 0.330000013, -0.439999998
                def c17, 8, 10, 0.219999999, -0.219999999
                def c18, 12, 0.600000024, 0.400000006, 3
                def c19, 0.5, 0, 1, 0
                defi i0, 255, 0, 0, 0
                dcl_texcoord v0.xy
                dcl_texcoord1 v1.xyz
                dcl_texcoord2 v2.xyz
                dcl_texcoord3 v3.xy
                dcl_texcoord4 v4.xyz
                dcl_texcoord5 v5.xyz
                dcl_2d s0
                dcl_2d s1
                nrm r0.xyz, v2
                nrm r1.xyz, v1
                mul r2.xy, c8, v0
                dsx r2.zw, r2.xyxy
                dsy r2.xy, r2
                mul r2.xy, r2, r2
                mad r2.xy, r2.zwzw, r2.zwzw, r2
                max r0.w, r2.x, r2.y
                log r0.w, r0.w
                mul r0.w, r0.w, c19.x
                max r2.x, r0.w, c19.y
                add r0.w, -r2.x, c9.x
                if_ge c9.x, r2.x
                  dsx r2.yz, v0.xxyw
                  dsy r3.xy, v0
                  nrm r4.xyz, v5
                  nrm r5.xyz, v4
                  dp3 r2.w, r4, r5
                  mul r3.z, r2.w, c12.x
                  mov r4.x, c12.x
                  mad r2.w, r2.w, r4.x, c11.x
                  frc r3.z, r3.z
                  add r3.w, r2.w, -r3.z
                  cmp r3.z, -r3.z, c19.y, c19.z
                  cmp r2.w, r2.w, c19.y, r3.z
                  add r2.w, r2.w, r3.w
                  rcp r3.z, r2.w
                  add r3.w, r2.w, c19.z
                  mov r4.xy, v0
                  mov r4.z, c19.y
                  mov r5.zw, c19.z
                  mov r6, c19.y
                  rep i0
                    mov r4.w, r2.w
                    break_ge r4.z, r4.w
                    mad r4.xy, r3.z, -v3, r4
                    texldd r7, r4, s1, r2.yzzw, r3
                    add r5.x, -r3.z, r5.z
                    add r4.w, -r7.w, r5.x
                    add r7.x, r4.z, c19.z
                    cmp r4.z, r4.w, r7.x, r3.w
                    mov r5.y, r7.w
                    cmp r6, r4.w, r6, r5
                    mov r5.w, r7.w
                    mov r5.z, r5.x
                  endrep
                  add r2.w, -r6.w, r6.z
                  add r3.z, -r6.y, r6.x
                  add r3.w, r2.w, -r3.z
                  mul r3.z, r3.z, r6.z
                  mad r2.w, r6.x, r2.w, -r3.z
                  rcp r3.z, r3.w
                  mad r2.w, r2.w, -r3.z, c19.z
                  cmp r2.w, -r3_abs.w, c19.z, r2.w
                  mov r4.xy, v0
                  mad r3.zw, v3.xyxy, -r2.w, r4.xyxy
                  add r0.w, r0.w, -c19.z
                  frc r2.w, r2.x
                  add r2.w, r2.x, -r2.w
                  add r2.w, -r2.w, r2.x
                  add r4.x, r2.w, r2.w
                  max r5.x, c19.z, r4.x
                  mov r4.yz, c19
                  cmp r4.x, -c6.x, r4.z, r5.x
                  lrp r4.zw, r2.w, v0.xyxy, r3
                  cmp r5.x, r0.w, c19.z, r4.x
                  cmp r4.xz, r0.w, r3.zyww, r4.zyww
                  if b0
                    mov r0.w, c19.z
                  else
                    mul r5.zw, r1.xyxy, c5.x
                    texldd r6, r3.zwzw, s1, r2.yzzw, r3
                    mad r7, r5.zwzw, c14.xxyy, r3.zwzw
                    texldd r8, r7, s1, r2.yzzw, r3
                    add r2.w, -r6.w, r8.w
                    add r2.w, r2.w, c14.z
                    texldd r7, r7.zwzw, s1, r2.yzzw, r3
                    add r4.w, -r6.w, r7.w
                    add r4.w, r4.w, c14.w
                    dp2add r4.y, r4.w, c10.x, r4.y
                    mad r7, r5.zwzw, c15.xxyy, r3.zwzw
                    texldd r8, r7, s1, r2.yzzw, r3
                    add r4.w, -r6.w, r8.w
                    add r4.w, r4.w, c15.z
                    mul r4.w, r4.w, c10.x
                    mul r4.w, r4.w, c15.w
                    texldd r7, r7.zwzw, s1, r2.yzzw, r3
                    add r6.x, -r6.w, r7.w
                    add r6.x, r6.x, -c15.y
                    mul r6.x, r6.x, c10.x
                    mul r6.x, r6.x, c16.x
                    mad r7, r5.zwzw, c16.yyzz, r3.zwzw
                    texldd r8, r7, s1, r2.yzzw, r3
                    add r6.y, -r6.w, r8.w
                    add r6.y, r6.y, c16.w
                    mul r6.y, r6.y, c10.x
                    texldd r7, r7.zwzw, s1, r2.yzzw, r3
                    add r6.z, -r6.w, r7.w
                    add r6.z, r6.z, -c16.z
                    mul r6.z, r6.z, c10.x
                    mul r6.yz, r6, c17.xxyw
                    mad r3.zw, r5, c17.z, r3
                    texldd r3, r3.zwzw, s1, r2.yzzw, r3
                    add r2.y, -r6.w, r3.w
                    add r2.y, r2.y, c17.w
                    mul r2.yw, r2, c10.x
                    mul r2.y, r2.y, c18.x
                    max r3.x, r2.w, r4.y
                    max r2.z, r3.x, r4.w
                    max r3.x, r2.z, r6.x
                    max r2.z, r3.x, r6.y
                    max r3.x, r2.z, r6.z
                    max r4.y, r3.x, r2.y
                    add r2.y, -r4.y, c19.z
                    mad r0.w, r2.y, c18.y, c18.z
                  endif
                else
                  mov r5.x, c18.w
                  mov r4.xz, v0.xyyw
                  mov r0.w, c19.z
                endif
                texld r3, r4.xzzw, s1
                mad r3, r3, c13.x, c13.y
                dp4 r2.y, r3, r3
                rsq r2.y, r2.y
                mul r2.yzw, r2.y, r3.xxyz
                texld r3, r4.xzzw, s0
                mov r1.w, -r1.y
                dp3_sat r1.y, r2.ywzw, r1.xzww
                dp3 r4.x, r0, r2.yzww
                add r4.x, r4.x, r4.x
                mad r0.xyz, r4.x, r2.yzww, -r0
                nrm r4.xyz, r0
                dp3_sat r0.x, r4.xzyw, r1.xzww
                pow_sat r1.x, r0.x, c3.x
                mul r4, r1.x, c2
                mov r0.y, c19.y
                cmp r4, -c4.x, r0.y, r4
                mov r6, c1
                mad r1, r1.y, r6, c0
                mad r1, r1, r3, r4
                mul r0, r0.w, r1
                mov r5.y, c19.z
                mul r1, r0, r5.yyxy
                cmp r0, -c6.x, r0, r1
                cmp oC0, -c7.x, r0, r2.x
            
            // approximately 190 instruction slots used (11 texture, 179 arithmetic)
            };
    }
}

technique RenderSceneWithBumpMap
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 g_LightDir;
            //   float g_fBaseTextureRepeat;
            //   float g_fHeightMapScale;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_LightDir             c7       1
            //   g_vEye                 c8       1
            //   g_fBaseTextureRepeat   c9       1
            //   g_fHeightMapScale      c10      1
            //
            
                vs_2_0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_binormal v3
                dcl_tangent v4
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                mul oT0.xy, v1, c9.x
                dp3 r0.x, v3, c4
                dp3 r0.y, v3, c5
                dp3 r0.z, v3, c6
                nrm r1.xyz, r0
                mul r0.xyz, r1, c7.y
                dp3 r2.x, v4, c4
                dp3 r2.y, v4, c5
                dp3 r2.z, v4, c6
                nrm r3.xyz, r2
                mad r0.xyz, c7.x, r3, r0
                dp3 r2.x, v2, c4
                dp3 r2.y, v2, c5
                dp3 r2.z, v2, c6
                nrm r4.xyz, r2
                mov oT4.xyz, r2
                mad oT1.xyz, c7.z, r4, r0
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r0.xyz, -r0, c8
                dp3 r2.x, r3, r0
                dp3 r2.y, r1, r0
                dp3 r2.z, r4, r0
                mov oT5.xyz, r0
                dp3 r0.x, r2, r2
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.yzw, r2.xxyz, r2.xxyz
                mad r0.x, r0.x, r0.x, -r0.w
                add r0.y, r0.z, r0.y
                rsq r0.y, r0.y
                mul r0.yz, r0.y, r2.xxyw
                mov oT2.xyz, r2
                rcp r0.w, r2.z
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.x, r0.w, r0.x
                mul r0.xy, r0.x, r0.yzzw
                mul oT3.xy, r0, c10.x
            
            // approximately 50 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bAddSpecular;
            //   float g_fSpecularExponent;
            //   float4 g_materialAmbientColor;
            //   float4 g_materialDiffuseColor;
            //   float4 g_materialSpecularColor;
            //   sampler2D tBase;
            //   sampler2D tNormalHeightMap;
            //
            //
            // Registers:
            //
            //   Name                    Reg   Size
            //   ----------------------- ----- ----
            //   g_materialAmbientColor  c0       1
            //   g_materialDiffuseColor  c1       1
            //   g_materialSpecularColor c2       1
            //   g_fSpecularExponent     c3       1
            //   g_bAddSpecular          c4       1
            //   tBase                   s0       1
            //   tNormalHeightMap        s1       1
            //
            
                ps_2_0
                def c5, 0, 0, 0, 0
                def c6, 2, -1, 1, -1
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                texld r1, t0, s0
                mad r0, r0, c6.x, c6.y
                dp4 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0
                nrm r2.xyz, t2
                dp3 r0.w, r2, r0
                add r0.w, r0.w, r0.w
                mad r2.xyz, r0.w, r0, -r2
                nrm r3.xyz, r2
                nrm r2.xyz, t1
                mul r2.xyz, r2, -c6.wzyx
                dp3_sat r0.w, r3, r2
                dp3_sat r0.x, r0, r2
                mov r2, c1
                mad r2, r0.x, r2, c0
                pow_sat r3.x, r0.w, c3.x
                mul r0, r3.x, c2
                mov r3.x, c4.x
                cmp r0, -r3.x, c5.x, r0
                mad r0, r2, r1, r0
                mov oC0, r0
            
            // approximately 31 instruction slots used (2 texture, 29 arithmetic)
            };
    }
}

technique RenderSceneWithPM
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 g_LightDir;
            //   float g_fBaseTextureRepeat;
            //   float g_fHeightMapScale;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c4       3
            //   g_LightDir             c7       1
            //   g_vEye                 c8       1
            //   g_fBaseTextureRepeat   c9       1
            //   g_fHeightMapScale      c10      1
            //
            
                vs_2_0
                dcl_position v0
                dcl_texcoord v1
                dcl_normal v2
                dcl_binormal v3
                dcl_tangent v4
                dp4 oPos.x, v0, c0
                dp4 oPos.y, v0, c1
                dp4 oPos.z, v0, c2
                dp4 oPos.w, v0, c3
                mul oT0.xy, v1, c9.x
                dp3 r0.x, v3, c4
                dp3 r0.y, v3, c5
                dp3 r0.z, v3, c6
                nrm r1.xyz, r0
                mul r0.xyz, r1, c7.y
                dp3 r2.x, v4, c4
                dp3 r2.y, v4, c5
                dp3 r2.z, v4, c6
                nrm r3.xyz, r2
                mad r0.xyz, c7.x, r3, r0
                dp3 r2.x, v2, c4
                dp3 r2.y, v2, c5
                dp3 r2.z, v2, c6
                nrm r4.xyz, r2
                mov oT4.xyz, r2
                mad oT1.xyz, c7.z, r4, r0
                dp4 r0.x, v0, c4
                dp4 r0.y, v0, c5
                dp4 r0.z, v0, c6
                add r0.xyz, -r0, c8
                dp3 r2.x, r3, r0
                dp3 r2.y, r1, r0
                dp3 r2.z, r4, r0
                mov oT5.xyz, r0
                dp3 r0.x, r2, r2
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.yzw, r2.xxyz, r2.xxyz
                mad r0.x, r0.x, r0.x, -r0.w
                add r0.y, r0.z, r0.y
                rsq r0.y, r0.y
                mul r0.yz, r0.y, r2.xxyw
                mov oT2.xyz, r2
                rcp r0.w, r2.z
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.x, r0.w, r0.x
                mul r0.xy, r0.x, r0.yzzw
                mul oT3.xy, r0, c10.x
            
            // approximately 50 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   bool g_bAddSpecular;
            //   float g_fHeightMapScale;
            //   float g_fSpecularExponent;
            //   float4 g_materialAmbientColor;
            //   float4 g_materialDiffuseColor;
            //   float4 g_materialSpecularColor;
            //   sampler2D tBase;
            //   sampler2D tNormalHeightMap;
            //
            //
            // Registers:
            //
            //   Name                    Reg   Size
            //   ----------------------- ----- ----
            //   g_materialAmbientColor  c0       1
            //   g_materialDiffuseColor  c1       1
            //   g_materialSpecularColor c2       1
            //   g_fSpecularExponent     c3       1
            //   g_bAddSpecular          c4       1
            //   g_fHeightMapScale       c5       1
            //   tBase                   s0       1
            //   tNormalHeightMap        s1       1
            //
            
                ps_2_0
                def c6, 0.00999999978, 2, -1, 0
                def c7, 1, -1, 1, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                mov r1.xw, c6
                mad r0.x, r0.w, c5.x, r1.x
                nrm r1.xyz, t2
                rcp r0.y, r1.z
                mul r0.x, r0.y, r0.x
                mad r0.xy, r1, r0.x, t0
                texld r2, r0, s1
                texld r0, r0, s0
                mad r2, r2, c6.y, c6.z
                dp4 r2.w, r2, r2
                rsq r2.w, r2.w
                mul r2.xyz, r2.w, r2
                dp3 r2.w, r1, r2
                add r2.w, r2.w, r2.w
                mad r1.xyz, r2.w, r2, -r1
                nrm r3.xyz, r1
                nrm r1.xyz, t1
                mul r1.xyz, r1, c7
                dp3_sat r2.w, r3, r1
                dp3_sat r1.x, r2, r1
                mov r3, c1
                mad r3, r1.x, r3, c0
                pow_sat r1.x, r2.w, c3.x
                mul r2, r1.x, c2
                cmp r1, -c4.x, r1.w, r2
                mad r0, r3, r0, r1
                mov oC0, r0
            
            // approximately 36 instruction slots used (3 texture, 33 arithmetic)
            };
    }
}

