
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mViewToLightProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_mWorldView       c0       4
            //   g_mProj            c4       4
            //   g_mViewToLightProj c8       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                dp3 oT2.x, v1, c0
                dp3 oT2.y, v1, c1
                dp3 oT2.z, v1, c2
                dp4 oT3.x, r0, c8
                dp4 oT3.y, r0, c9
                dp4 oT3.z, r0, c10
                dp4 oT3.w, r0, c11
                mov oT1, r0
                mov oT0.xy, v2
            
            // approximately 17 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_vLightAmbient;
            //   float4 g_vMaterial;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_vMaterial     c0       1
            //   g_vLightAmbient c1       1
            //
            
                preshader
                neg r0, c1
                add c0, (1, 1, 1, 1), r0
                mul c1, c0, c1
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float g_fCosTheta;
            //   sampler2D g_samScene;
            //   sampler2D g_samShadow;
            //   float4 g_vLightAmbient;
            //   float3 g_vLightDir;
            //   float3 g_vLightPos;
            //   float4 g_vMaterial;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_vMaterial     c2       1
            //   g_vLightPos     c3       1
            //   g_vLightDir     c4       1
            //   g_vLightAmbient c5       1
            //   g_fCosTheta     c6       1
            //   g_samScene      s0       1
            //   g_samShadow     s1       1
            //
            
                ps_2_0
                def c7, 512, 4.99999987e-005, -0.5, 0
                def c8, 0.501953125, 1, 1.00195313, 0.5
                def c9, 0.5, 1, -1, -0
                def c10, 0.501953125, 1.00195313, 0, 0
                dcl t0.xy
                dcl t1.xyz
                dcl t2.xyz
                dcl t3
                dcl_2d s0
                dcl_2d s1
                mul r0.xy, t3, c9.x
                rcp r0.z, t3.w
                mul r1.xy, r0.z, r0
                mad r0.xy, r0, r0.z, c9.x
                mad r0.xy, r0, c9.yzxw, -c9.wzyx
                mov r2.yz, c9
                mad r1.xy, r1, r2.yzxw, c7.wzyx
                add r2.xy, r1, c10
                add r3.xy, r1, c8.wzyx
                add r1.xy, r1, c8
                texld r2, r2, s1
                texld r1, r1, s1
                texld r3, r3, s1
                texld r4, r0, s1
                texld r5, t0, s0
                mad r0.w, t3.z, -r0.z, r2.x
                add r0.w, r0.w, c7.y
                cmp r0.w, r0.w, -c9.z, -c9.w
                mad r1.x, t3.z, -r0.z, r1.x
                add r1.x, r1.x, c7.y
                mad r1.y, t3.z, -r0.z, r3.x
                add r1.y, r1.y, c7.y
                cmp r1.z, r1.y, c9.z, c9.w
                cmp r1.xy, r1, -c9.z, -c9.w
                add r0.w, r0.w, r1.z
                mul r0.xy, r0, c7.x
                add r1.z, r4.x, c7.y
                mad r0.z, t3.z, -r0.z, r1.z
                frc r0.xy, r0
                mad r0.w, r0.x, r0.w, r1.y
                cmp r1.y, r0.z, c9.z, c9.w
                cmp r0.z, r0.z, -c9.z, -c9.w
                add r1.x, r1.y, r1.x
                mad r0.x, r0.x, r1.x, r0.z
                lrp r1.x, r0.y, r0.w, r0.x
                nrm r0.xyz, t2
                add r2.xyz, t1, -c3
                nrm r3.xyz, r2
                dp3_sat r3.w, -r3, r0
                dp3 r0.x, r3, c4
                add r0.x, -r0.x, c6.x
                mul r0.y, r1.x, r3.w
                mov r1, c0
                mad r1, r0.y, r1, c5
                mul r1, r1, c2
                cmp r0, r0.x, c1, r1
                mul r0, r0, r5
                mov oC0, r0
            
            // approximately 52 instruction slots used (5 texture, 47 arithmetic)
            };
    }
}

technique RenderLight
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dcl_texcoord v1
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 oPos.z, r0, c6
                dp4 oPos.w, r0, c7
                mov oT0.xy, v1
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D g_samScene;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_samScene   s0       1
            //
            
                ps_2_0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov oC0, r0
            
            // approximately 2 instruction slots used (1 texture, 1 arithmetic)
            };
    }
}

technique RenderShadow
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4x4 g_mProj;
            //   float4x4 g_mWorldView;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_mWorldView c0       4
            //   g_mProj      c4       4
            //
            
                vs_2_0
                dcl_position v0
                dp4 r0.x, v0, c0
                dp4 r0.y, v0, c1
                dp4 r0.z, v0, c2
                dp4 r0.w, v0, c3
                dp4 oPos.x, r0, c4
                dp4 oPos.y, r0, c5
                dp4 r1.z, r0, c6
                dp4 r1.w, r0, c7
                mov oPos.zw, r1
                mov oT0.xy, r1.zwzw
            
            // approximately 10 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                ps_2_0
                dcl t0.xy
                rcp r0.w, t0.y
                mul r0, r0.w, t0.x
                mov oC0, r0
            
            // approximately 3 instruction slots used
            };
    }
}

