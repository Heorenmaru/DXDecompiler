
//listing of all techniques and passes with embedded asm listings 

technique RenderScene
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float4 g_LightAmbient;
            //   float4 g_LightDiffuse;
            //   float4 g_MaterialAmbientColor;
            //   float4 g_MaterialDiffuseColor;
            //   float g_fTime;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_MaterialAmbientColor c0       1
            //   g_MaterialDiffuseColor c1       1
            //   g_LightAmbient         c2       1
            //   g_LightDiffuse         c3       1
            //   g_fTime                c4       1
            //
            
                preshader
                mul r0.x, c4.x, (0.159154943)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                cos r1.x, r0.x
                sin r1.y, r0.x
                mul r0.xy, (0.100000001, 0.100000001), r1.xy
                add c5.x, r0.y, (1)
                add c4.x, r0.x, (1)
                mul c6.xyz, c1.xyz, c3.xyz
                mul c7.xyz, c0.xyz, c2.xyz
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   float3 g_LightDir;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_mWorld               c8       3
            //   g_LightDir             c11      1
            //
            
                vs_2_0
                def c12, 0, 1, 0, 0
                dcl_position v0
                dcl_normal v1
                dcl_texcoord v2
                mul r0.y, v0.y, c5.x
                mul r0.xz, v0, c4.x
                mov r0.w, v0.w
                dp4 oPos.x, r0, c0
                dp4 oPos.y, r0, c1
                dp4 oPos.z, r0, c2
                dp4 oPos.w, r0, c3
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0
                dp3 r0.x, r1, c11
                max r0.x, r0.x, c12.x
                mov r1.xyz, c6
                mad oD0.xyz, r1, r0.x, c7
                mov oD0.w, c12.y
                mov oT0.xy, v2
            
            // approximately 19 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

