//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cbOnRender
{
    float3  g_LightDir;                 // Offset:    0, size:   12
    float3  g_LightDirTex;              // Offset:   16, size:   12
    float4  g_LightDiffuse;             // Offset:   32, size:   16
    float4x4 g_mWorldViewProjection;    // Offset:   48, size:   64
    float4x4 g_mWorld;                  // Offset:  112, size:   64
    float3  g_vTextureEyePt;            // Offset:  176, size:   12
    float4x4 g_mWorldToTerrain;         // Offset:  192, size:   64
    float4x4 g_mTexToViewProj;          // Offset:  256, size:   64
    float4x4 g_mLightViewProj;          // Offset:  320, size:   64
    float4x4 g_mTexToLightViewProj;     // Offset:  384, size:   64
}

cbuffer cbConstant
{
    float   g_InvMapSize = 0.0009765625;// Offset:    0, size:    4
    float   g_MapSize = 1024;           // Offset:    4, size:    4
    float   g_InvDetailMapSize = 0.00390625;// Offset:    8, size:    4
    float   g_DetailMapSize = 256;      // Offset:   12, size:    4
    float   g_HeightRatio = 0.100000001;// Offset:   16, size:    4
}

cbuffer cbUI
{
    float   g_DetailRepeat = 16;        // Offset:    0, size:    4
    float   g_InvDetailRepeat = 0.0625; // Offset:    4, size:    4
    float   g_DetailHeight = 0.100000001;// Offset:    8, size:    4
    float   g_ShadowBias = 0.00999999978;// Offset:   12, size:    4
    float   g_DetailDistanceSq = 1;     // Offset:   16, size:    4
}

//
// 19 local object(s)
//
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
DepthStencilState DepthRead
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState DisableBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    BlendEnable[1] = bool(FALSE /* 0 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
RasterizerState Wireframe
{
    CullMode = uint(BACK /* 3 */);
    FillMode = uint(WIREFRAME /* 2 */);
};
RasterizerState Solid
{
    CullMode = uint(BACK /* 3 */);
    FillMode = uint(SOLID /* 3 */);
};
Texture2D g_txDiffuse;
Texture2D g_txDetailDiffuse[4];
Texture2D g_txDetailGrad_RedGreen;
Texture2D g_txDetailGrad_BlueAlpha;
Texture2D g_txHeight;
Texture2D g_txMask;
Texture2D g_txDetailHeight;
Texture2D g_txDepthMap;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samLinearPoint
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samWrap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerComparisonState g_samComparison
{
    Filter   = uint(COMPARISON_MIN_MAG_MIP_LINEAR /* 149 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 18 technique(s)
//
technique10 RenderTerrain_Inside
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 8
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.xyz, r0.xyzx, r0.wwww
            mad r1.x, -r0.z, r0.z, l(1.000000)
            sqrt r1.x, r1.x
            sample_l r2.xyzw, cb0[11].xzxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, cb0[11].xzyx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r1.yzw, l(0,0,0,0)
            mov r3.w, l(0)
            loop 
              ge r6.x, r5.z, r3.z
              mov r3.w, l(0)
              breakc_nz r6.x
              mul r6.x, r5.w, r5.w
              div r6.x, r1.x, r6.x
              add r6.x, -r0.z, r6.x
              div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.x
              add r6.y, r3.z, -r5.z
              mul r6.x, r6.x, r6.y
              max r6.x, r6.x, cb1[0].x
              add r1.y, r1.y, r6.x
              mad r6.yzw, r0.xxyz, r6.xxxx, r3.xxyz
              lt r7.x, r0.w, r1.y
              if_nz r7.x
                mov r3.xyz, r6.yzwy
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r1.z, r6.x
                mov r3.w, l(-1)
                break 
              endif 
              ilt r7.y, l(512), r1.w
              if_nz r7.y
                mov r3.xyz, r6.yzwy
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r1.z, r6.x
                mov r3.w, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r6.yzyy, t0.zwxy, s0, l(0.000000)
              iadd r1.w, r1.w, l(1)
              or r3.w, r7.x, r7.y
              mov r3.xyz, r6.yzwy
              mov r1.z, r6.x
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r3.w
              mul r1.xyw, r0.xyxz, r1.zzzz
              mad r0.xyz, -r1.zzzz, r0.xyzx, r3.xyzx
              mov r4.xyz, r3.xyzx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.z, l(0)
              loop 
                ige r2.w, r1.z, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r1.xywx, r0.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xyzx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.z, r1.z, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            not r0.y, r0.x
            discard_nz r0.y
            add r0.yz, r2.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
            add r1.xz, r0.yyzy, r0.yyzy
            mad r0.y, -r2.x, r2.x, l(1.000000)
            mad r0.y, -r2.y, r2.y, r0.y
            sqrt r0.y, r0.y
            mul r1.y, r0.y, l(0.500000)
            dp3 r0.y, r1.xyzx, r1.xyzx
            rsq r0.y, r0.y
            mul r0.yzw, r0.yyyy, r1.xxyz
            dp3_sat r0.y, cb0[0].xyzx, r0.yzwy
            max r0.y, r0.y, l(0.100000)
            and o0.xyzw, r0.yyyy, r0.xxxx
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xzyw, cb0[18].xyzw
            dp4 r0.y, r4.xzyw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 92 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Outside
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 9
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
            div r2.xyz, -cb0[11].xzyx, r0.xyzx
            max r0.w, r2.x, l(-1.000000)
            movc r0.w, r1.x, r0.w, l(-1.000000)
            lt r3.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r4.xyz, -cb0[11].xzyx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r4.xyz, r4.xyzx, r0.xyzx
            max r1.x, r0.w, r4.x
            movc r0.w, r3.x, r1.x, r0.w
            max r1.x, r0.w, r2.y
            movc r0.w, r1.y, r1.x, r0.w
            max r1.x, r0.w, r4.y
            movc r0.w, r3.y, r1.x, r0.w
            max r1.x, r0.w, r2.z
            movc r0.w, r1.z, r1.x, r0.w
            max r1.x, r0.w, r4.z
            movc r0.w, r3.z, r1.x, r0.w
            mad r0.xyz, r0.xyzx, r0.wwww, cb0[11].xzyx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r6.xyz, l(0,0,0,0)
            loop 
              ge r6.w, r5.z, r3.z
              mov r6.z, l(0)
              breakc_nz r6.w
              mul r6.w, r5.w, r5.w
              div r6.w, r1.w, r6.w
              add r6.w, -r1.z, r6.w
              div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
              add r7.x, r3.z, -r5.z
              mul r6.w, r6.w, r7.x
              max r6.w, r6.w, cb1[0].x
              add r3.w, r3.w, r6.w
              mad r7.xyz, r1.xyzx, r6.wwww, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r6.y
              if_nz r8.x
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t0.zwxy, s0, l(0.000000)
              iadd r6.y, r6.y, l(1)
              or r6.z, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r6.xyz, r6.wyzw
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r6.z
              mul r0.xyz, r1.xyzx, r6.xxxx
              mad r1.xyz, -r6.xxxx, r1.xyzx, r3.xyzx
              mov r4.xyz, r3.xyzx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.w, l(0)
              loop 
                ige r2.w, r1.w, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xyzx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.w, r1.w, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            not r0.y, r0.x
            discard_nz r0.y
            add r0.yz, r2.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
            add r1.xz, r0.yyzy, r0.yyzy
            mad r0.y, -r2.x, r2.x, l(1.000000)
            mad r0.y, -r2.y, r2.y, r0.y
            sqrt r0.y, r0.y
            mul r1.y, r0.y, l(0.500000)
            dp3 r0.y, r1.xyzx, r1.xyzx
            rsq r0.y, r0.y
            mul r0.yzw, r0.yyyy, r1.xxyz
            dp3_sat r0.y, cb0[0].xyzx, r0.yzwy
            max r0.y, r0.y, l(0.100000)
            and o0.xyzw, r0.yyyy, r0.xxxx
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xzyw, cb0[18].xyzw
            dp4 r0.y, r4.xzyw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 111 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Ortho
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 9
            mad r0.xyz, cb0[1].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v0.xyzx
            add r1.xyz, -r0.xyzx, v0.xyzx
            lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzx
            div r3.xyz, -r0.xyzx, r1.xyzx
            max r0.w, r3.x, l(-1.000000)
            movc r0.w, r2.x, r0.w, l(-1.000000)
            lt r4.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r5.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r5.xyz, r5.xyzx, r1.xyzx
            max r1.w, r0.w, r5.x
            movc r0.w, r4.x, r1.w, r0.w
            max r1.w, r0.w, r3.y
            movc r0.w, r2.y, r1.w, r0.w
            max r1.w, r0.w, r5.y
            movc r0.w, r4.y, r1.w, r0.w
            max r1.w, r0.w, r3.z
            movc r0.w, r2.z, r1.w, r0.w
            max r1.w, r0.w, r5.z
            movc r0.w, r4.z, r1.w, r0.w
            mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r6.xyz, l(0,0,0,0)
            loop 
              ge r6.w, r5.z, r3.z
              mov r6.z, l(0)
              breakc_nz r6.w
              mul r6.w, r5.w, r5.w
              div r6.w, r1.w, r6.w
              add r6.w, -r1.z, r6.w
              div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
              add r7.x, r3.z, -r5.z
              mul r6.w, r6.w, r7.x
              max r6.w, r6.w, cb1[0].x
              add r3.w, r3.w, r6.w
              mad r7.xyz, r1.xyzx, r6.wwww, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r6.y
              if_nz r8.x
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t0.zwxy, s0, l(0.000000)
              iadd r6.y, r6.y, l(1)
              or r6.z, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r6.xyz, r6.wyzw
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r6.z
              mul r0.xyz, r1.xyzx, r6.xxxx
              mad r1.xyz, -r6.xxxx, r1.xyzx, r3.xyzx
              mov r4.xyz, r3.xyzx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.w, l(0)
              loop 
                ige r2.w, r1.w, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xyzx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.w, r1.w, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            not r0.y, r0.x
            discard_nz r0.y
            add r0.yz, r2.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
            add r1.xz, r0.yyzy, r0.yyzy
            mad r0.y, -r2.x, r2.x, l(1.000000)
            mad r0.y, -r2.y, r2.y, r0.y
            sqrt r0.y, r0.y
            mul r1.y, r0.y, l(0.500000)
            dp3 r0.y, r1.xyzx, r1.xyzx
            rsq r0.y, r0.y
            mul r0.yzw, r0.yyyy, r1.xxyz
            dp3_sat r0.y, cb0[0].xyzx, r0.yzwy
            max r0.y, r0.y, l(0.100000)
            and o0.xyzw, r0.yyyy, r0.xxxx
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xzyw, cb0[18].xyzw
            dp4 r0.y, r4.xzyw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 112 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Inside_Detail
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.xyz, r0.xyzx, r0.wwww
            mad r1.x, -r0.z, r0.z, l(1.000000)
            sqrt r1.x, r1.x
            sample_l r2.xyzw, cb0[11].xzxx, t6.xyzw, s0, l(0.000000)
            mov r4.xy, l(0,0,0,0)
            mov r3.xyz, cb0[11].xzyx
            mov r6.x, l(0)
            mov r5.xyzw, r2.zwxy
            mov r1.yzw, l(0,0,0,0)
            mov r3.w, l(0)
            loop 
              ge r4.w, r5.z, r3.z
              mov r3.w, l(0)
              breakc_nz r4.w
              mul r4.w, r5.w, r5.w
              div r4.w, r1.x, r4.w
              add r4.w, -r0.z, r4.w
              div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
              add r7.x, r3.z, -r5.z
              mul r4.w, r4.w, r7.x
              max r4.w, r4.w, cb1[0].x
              add r1.y, r1.y, r4.w
              mad r7.xyz, r0.xyzx, r4.wwww, r3.xyzx
              lt r7.w, r0.w, r1.y
              if_nz r7.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r7.xyzx
                mov r6.x, l(-1.000000)
                mov r1.z, r4.w
                mov r3.w, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r1.w
              if_nz r8.x
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r7.xyzx
                mov r6.x, l(-1.000000)
                mov r1.z, r4.w
                mov r3.w, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r1.w, r1.w, l(1)
              or r3.w, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r1.z, r4.w
              mov r4.xy, l(0,0,0,0)
              mov r6.x, l(0)
            endloop 
            if_z r3.w
              add r2.xyz, r3.xyzx, -cb0[11].xzyx
              mul r2.w, r2.z, cb1[1].x
              dp3 r0.w, r2.xywx, r2.xywx
              lt r0.w, r0.w, cb2[1].x
              if_nz r0.w
                mad r1.xyw, -r1.zzzz, r0.xyxz, r3.xyxz
                add r2.xyz, -r1.xywx, v0.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                sqrt r2.w, r2.w
                div r2.xyz, r2.xyzx, r2.wwww
                sample_l r7.xyzw, r1.xyxx, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r1.xyxx, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r1.xyxx, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r3.w, r9.xyzw, r8.xyzw
                add r3.w, -r3.w, l(1.000000)
                mad r3.w, -r3.w, cb2[0].z, r7.x
                mul r4.w, cb1[0].z, cb2[0].y
                mul r5.w, r4.w, l(4.000000)
                mul r9.xyz, r2.xyzx, r5.wwww
                mov r10.xyzw, r8.xyzw
                mov r6.xyz, l(0,0,0,0)
                mov r7.xy, r5.xyxx
                mov r12.xy, r7.zwzz
                mov r11.xyz, r1.xywx
                mov r9.w, r3.w
                mov r11.w, l(0)
                mov r13.xy, l(0,0,0,0)
                loop 
                  ge r13.z, r9.w, r11.z
                  mov r13.y, l(0)
                  breakc_nz r13.z
                  mad r11.w, r4.w, l(4.000000), r11.w
                  mad r14.xyz, r2.xyzx, r5.wwww, r11.xyzx
                  lt r13.z, r2.w, r11.w
                  ilt r13.w, l(128), r13.x
                  or r13.z, r13.w, r13.z
                  if_nz r13.z
                    mov r6.xyz, r14.zxyz
                    mov r7.xy, r12.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r13.y, l(-1)
                    break 
                  endif 
                  sample_l r12.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r9.w, -r12.w, cb2[0].z, r12.z
                  iadd r13.x, r13.x, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r13.xy, r13.xzxx
                  mov r6.xyz, l(0,0,0,0)
                endloop 
                mov r5.xy, r7.xyxx
                if_z r13.y
                  mad r1.xyw, -r2.xyxz, r5.wwww, r11.xyxz
                  mov r2.xyzw, r10.xyzw
                  mov r6.xyz, r11.zxyz
                  mov r5.xy, r12.xyxx
                  mov r5.z, l(0.500000)
                  mov r3.w, l(0.250000)
                  mov r4.w, l(0)
                  loop 
                    ige r5.w, r4.w, l(8)
                    breakc_nz r5.w
                    mad r7.xyz, r5.zzzz, r9.xyzx, r1.xywx
                    sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                    sample_l r13.xyzw, r7.xyxx, t7.xyzw, s0, l(0.000000)
                    mul r12.zw, r7.xxxy, cb2[0].xxxx
                    sample_l r14.xyzw, r12.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r13.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r7.z
                    mad r8.z, -r3.w, l(2.000000), r5.z
                    movc r2.xyzw, r5.wwww, r13.xyzw, r2.xyzw
                    movc r6.xyz, r5.wwww, r7.zxyz, r6.xyzx
                    movc r5.xyz, r5.wwww, r8.xyzx, r5.xyzx
                    add r5.z, r3.w, r5.z
                    mul r3.w, r3.w, l(0.500000)
                    iadd r4.w, r4.w, l(1)
                  endloop 
                  mov r10.xyzw, r2.xyzw
                  mov r4.xy, r6.yzyy
                else 
                  mov r4.xy, r6.yzyy
                endif 
              else 
                sample_l r10.xyzw, r3.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.w
                mul r1.xyw, r0.xyxz, r1.zzzz
                mad r0.xyz, -r1.zzzz, r0.xyzx, r3.xyzx
                mov r6.xyz, r3.zxyz
                mov r2.xy, r5.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.z, l(0)
                loop 
                  ige r2.w, r1.z, l(8)
                  breakc_nz r2.w
                  mad r7.xyz, r2.zzzz, r1.xywx, r0.xyzx
                  sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r7.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r6.xyz, r2.wwww, r7.zxyz, r6.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.z, r1.z, l(1)
                endloop 
                mov r5.xy, r2.xyxx
                mov r4.xy, r6.yzyy
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r5.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r5.x, r5.x, l(1.000000)
              mad r0.w, -r5.y, r5.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r4.z, -r4.y, l(1.000000)
              mul r1.xyzw, r4.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r6.yz, r4.xxyx
            mov r6.w, l(1.000000)
            dp4 r0.x, r6.yxzw, cb0[18].xyzw
            dp4 r0.y, r6.yxzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 228 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Outside_Detail
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
            div r2.xyz, -cb0[11].xzyx, r0.xyzx
            max r0.w, r2.x, l(-1.000000)
            movc r0.w, r1.x, r0.w, l(-1.000000)
            lt r3.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r4.xyz, -cb0[11].xzyx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r4.xyz, r4.xyzx, r0.xyzx
            max r1.x, r0.w, r4.x
            movc r0.w, r3.x, r1.x, r0.w
            max r1.x, r0.w, r2.y
            movc r0.w, r1.y, r1.x, r0.w
            max r1.x, r0.w, r4.y
            movc r0.w, r3.y, r1.x, r0.w
            max r1.x, r0.w, r2.z
            movc r0.w, r1.z, r1.x, r0.w
            max r1.x, r0.w, r4.z
            movc r0.w, r3.z, r1.x, r0.w
            mad r0.xyz, r0.xyzx, r0.wwww, cb0[11].xzyx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t6.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r6.x, l(0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r4.xyw, l(0,0,0,0)
            mov r7.xy, l(0,0,0,0)
            loop 
              ge r7.z, r5.z, r3.z
              mov r7.y, l(0)
              breakc_nz r7.z
              mul r7.z, r5.w, r5.w
              div r7.z, r1.w, r7.z
              add r7.z, -r1.z, r7.z
              div r7.z, l(1.000000, 1.000000, 1.000000, 1.000000), r7.z
              add r7.w, r3.z, -r5.z
              mul r7.z, r7.z, r7.w
              max r7.z, r7.z, cb1[0].x
              add r3.w, r3.w, r7.z
              mad r8.xyz, r1.xyzx, r7.zzzz, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.x, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              ilt r8.w, l(512), r7.x
              if_nz r8.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.x, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r8.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r7.x, r7.x, l(1)
              or r7.y, r7.w, r8.w
              mov r3.xyz, r8.xyzx
              mov r4.w, r7.z
              mov r4.xy, l(0,0,0,0)
              mov r6.x, l(0)
            endloop 
            if_z r7.y
              add r0.xyz, r3.xyzx, -cb0[11].xzyx
              mul r0.w, r0.z, cb1[1].x
              dp3 r0.x, r0.xywx, r0.xywx
              lt r0.x, r0.x, cb2[1].x
              if_nz r0.x
                mad r0.yzw, -r4.wwww, r1.xxyz, r3.xxyz
                add r2.xyz, -r0.yzwy, v0.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                div r2.xyz, r2.xyzx, r1.wwww
                sample_l r7.xyzw, r0.yzyy, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r0.yzyy, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r0.yzyy, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r2.w, r9.xyzw, r8.xyzw
                add r2.w, -r2.w, l(1.000000)
                mad r2.w, -r2.w, cb2[0].z, r7.x
                mul r3.w, cb1[0].z, cb2[0].y
                mul r5.w, r3.w, l(4.000000)
                mul r9.xyz, r2.xyzx, r5.wwww
                mov r10.xyzw, r8.xyzw
                mov r6.xyz, l(0,0,0,0)
                mov r7.xy, r5.xyxx
                mov r12.xy, r7.zwzz
                mov r11.xyz, r0.yzwy
                mov r9.w, r2.w
                mov r11.w, l(0)
                mov r13.xy, l(0,0,0,0)
                loop 
                  ge r13.z, r9.w, r11.z
                  mov r13.y, l(0)
                  breakc_nz r13.z
                  mad r11.w, r3.w, l(4.000000), r11.w
                  mad r14.xyz, r2.xyzx, r5.wwww, r11.xyzx
                  lt r13.z, r1.w, r11.w
                  ilt r13.w, l(128), r13.x
                  or r13.z, r13.w, r13.z
                  if_nz r13.z
                    mov r6.xyz, r14.zxyz
                    mov r7.xy, r12.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r13.y, l(-1)
                    break 
                  endif 
                  sample_l r12.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r9.w, -r12.w, cb2[0].z, r12.z
                  iadd r13.x, r13.x, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r13.xy, r13.xzxx
                  mov r6.xyz, l(0,0,0,0)
                endloop 
                mov r5.xy, r7.xyxx
                if_z r13.y
                  mad r0.yzw, -r2.xxyz, r5.wwww, r11.xxyz
                  mov r2.xyzw, r10.xyzw
                  mov r6.xyz, r11.zxyz
                  mov r5.xy, r12.xyxx
                  mov r5.z, l(0.500000)
                  mov r1.w, l(0.250000)
                  mov r3.w, l(0)
                  loop 
                    ige r5.w, r3.w, l(8)
                    breakc_nz r5.w
                    mad r7.xyz, r5.zzzz, r9.xyzx, r0.yzwy
                    sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                    sample_l r13.xyzw, r7.xyxx, t7.xyzw, s0, l(0.000000)
                    mul r12.zw, r7.xxxy, cb2[0].xxxx
                    sample_l r14.xyzw, r12.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r13.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r7.z
                    mad r8.z, -r1.w, l(2.000000), r5.z
                    movc r2.xyzw, r5.wwww, r13.xyzw, r2.xyzw
                    movc r6.xyz, r5.wwww, r7.zxyz, r6.xyzx
                    movc r5.xyz, r5.wwww, r8.xyzx, r5.xyzx
                    add r5.z, r1.w, r5.z
                    mul r1.w, r1.w, l(0.500000)
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r10.xyzw, r2.xyzw
                  mov r4.xy, r6.yzyy
                else 
                  mov r4.xy, r6.yzyy
                endif 
              else 
                sample_l r10.xyzw, r3.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.x
                mul r0.xyz, r1.xyzx, r4.wwww
                mad r1.xyz, -r4.wwww, r1.xyzx, r3.xyzx
                mov r6.xyz, r3.zxyz
                mov r2.xy, r5.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.w, l(0)
                loop 
                  ige r2.w, r1.w, l(8)
                  breakc_nz r2.w
                  mad r7.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                  sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r7.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r6.xyz, r2.wwww, r7.zxyz, r6.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.w, r1.w, l(1)
                endloop 
                mov r5.xy, r2.xyxx
                mov r4.xy, r6.yzyy
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r5.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r5.x, r5.x, l(1.000000)
              mad r0.w, -r5.y, r5.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r4.z, -r4.y, l(1.000000)
              mul r1.xyzw, r4.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r6.yz, r4.xxyx
            mov r6.w, l(1.000000)
            dp4 r0.x, r6.yxzw, cb0[18].xyzw
            dp4 r0.y, r6.yxzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 247 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Ortho_Detail
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            mad r0.xyz, cb0[1].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v0.xyzx
            add r1.xyz, -r0.xyzx, v0.xyzx
            lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzx
            div r3.xyz, -r0.xyzx, r1.xyzx
            max r0.w, r3.x, l(-1.000000)
            movc r0.w, r2.x, r0.w, l(-1.000000)
            lt r4.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r5.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r5.xyz, r5.xyzx, r1.xyzx
            max r1.w, r0.w, r5.x
            movc r0.w, r4.x, r1.w, r0.w
            max r1.w, r0.w, r3.y
            movc r0.w, r2.y, r1.w, r0.w
            max r1.w, r0.w, r5.y
            movc r0.w, r4.y, r1.w, r0.w
            max r1.w, r0.w, r3.z
            movc r0.w, r2.z, r1.w, r0.w
            max r1.w, r0.w, r5.z
            movc r0.w, r4.z, r1.w, r0.w
            mad r1.xyz, r1.xyzx, r0.wwww, r0.xyzx
            add r2.xyz, -r1.xyzx, v0.xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            sqrt r0.w, r0.w
            div r2.xyz, r2.xyzx, r0.wwww
            mad r1.w, -r2.z, r2.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r3.xyzw, r1.xyxx, t6.xyzw, s0, l(0.000000)
            mov r4.xyz, r1.xyzx
            mov r7.x, l(0)
            mov r6.xyzw, r3.zwxy
            mov r2.w, l(0)
            mov r4.w, l(0)
            mov r5.xyw, l(0,0,0,0)
            mov r8.x, l(0)
            loop 
              ge r8.y, r6.z, r4.z
              mov r8.x, l(0)
              breakc_nz r8.y
              mul r8.y, r6.w, r6.w
              div r8.y, r1.w, r8.y
              add r8.y, -r2.z, r8.y
              div r8.y, l(1.000000, 1.000000, 1.000000, 1.000000), r8.y
              add r8.z, r4.z, -r6.z
              mul r8.y, r8.y, r8.z
              max r8.y, r8.y, cb1[0].x
              add r2.w, r2.w, r8.y
              mad r9.xyz, r2.xyzx, r8.yyyy, r4.xyzx
              lt r8.z, r0.w, r2.w
              if_nz r8.z
                mov r5.xy, l(-1.000000,-1.000000,0,0)
                mov r4.xyz, r9.xyzx
                mov r7.x, l(-1.000000)
                mov r4.w, r8.y
                mov r8.x, l(-1)
                break 
              endif 
              ilt r8.w, l(512), r5.w
              if_nz r8.w
                mov r5.xy, l(-1.000000,-1.000000,0,0)
                mov r4.xyz, r9.xyzx
                mov r7.x, l(-1.000000)
                mov r4.w, r8.y
                mov r8.x, l(-1)
                break 
              endif 
              sample_l r6.xyzw, r9.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r5.w, r5.w, l(1)
              or r8.x, r8.z, r8.w
              mov r4.xyz, r9.xyzx
              mov r4.w, r8.y
              mov r5.xy, l(0,0,0,0)
              mov r7.x, l(0)
            endloop 
            if_z r8.x
              add r0.xyz, -r0.xyzx, r4.xyzx
              mul r0.w, r0.z, cb1[1].x
              dp3 r0.x, r0.xywx, r0.xywx
              lt r0.x, r0.x, cb2[1].x
              if_nz r0.x
                mad r0.yzw, -r4.wwww, r2.xxyz, r4.xxyz
                add r1.xyz, -r0.yzwy, v0.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                sqrt r1.w, r1.w
                div r1.xyz, r1.xyzx, r1.wwww
                sample_l r3.xyzw, r0.yzyy, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r0.yzyy, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r0.yzyy, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r2.w, r9.xyzw, r8.xyzw
                add r2.w, -r2.w, l(1.000000)
                mad r2.w, -r2.w, cb2[0].z, r3.x
                mul r3.x, cb1[0].z, cb2[0].y
                mul r3.y, r3.x, l(4.000000)
                mul r9.xyz, r1.xyzx, r3.yyyy
                mov r10.xyzw, r8.xyzw
                mov r7.xyz, l(0,0,0,0)
                mov r12.xy, r6.xyxx
                mov r13.xy, r3.zwzz
                mov r11.xyz, r0.yzwy
                mov r5.w, r2.w
                mov r6.w, l(0)
                mov r9.w, l(0)
                mov r11.w, l(0)
                loop 
                  ge r12.z, r5.w, r11.z
                  mov r11.w, l(0)
                  breakc_nz r12.z
                  mad r6.w, r3.x, l(4.000000), r6.w
                  mad r14.xyz, r1.xyzx, r3.yyyy, r11.xyzx
                  lt r12.z, r1.w, r6.w
                  ilt r12.w, l(128), r9.w
                  or r12.z, r12.w, r12.z
                  if_nz r12.z
                    mov r7.xyz, r14.zxyz
                    mov r12.xy, r13.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r11.w, l(-1)
                    break 
                  endif 
                  sample_l r13.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r5.w, -r12.w, cb2[0].z, r13.z
                  iadd r9.w, r9.w, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r11.w, r12.z
                  mov r7.xyz, l(0,0,0,0)
                endloop 
                mov r6.xy, r12.xyxx
                if_z r11.w
                  mad r0.yzw, -r1.xxyz, r3.yyyy, r11.xxyz
                  mov r1.xyzw, r10.xyzw
                  mov r7.xyz, r11.zxyz
                  mov r6.xy, r13.xyxx
                  mov r6.z, l(0.500000)
                  mov r2.w, l(0.250000)
                  mov r3.x, l(0)
                  loop 
                    ige r3.y, r3.x, l(8)
                    breakc_nz r3.y
                    mad r3.yzw, r6.zzzz, r9.xxyz, r0.yyzw
                    sample_l r8.xyzw, r3.yzyy, t6.zwxy, s0, l(0.000000)
                    sample_l r12.xyzw, r3.yzyy, t7.xyzw, s0, l(0.000000)
                    mul r13.zw, r3.yyyz, cb2[0].xxxx
                    sample_l r14.xyzw, r13.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r12.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r3.w
                    mad r8.z, -r2.w, l(2.000000), r6.z
                    movc r1.xyzw, r5.wwww, r12.xyzw, r1.xyzw
                    movc r7.xyz, r5.wwww, r3.wyzw, r7.xyzx
                    movc r6.xyz, r5.wwww, r8.xyzx, r6.xyzx
                    add r6.z, r2.w, r6.z
                    mul r2.w, r2.w, l(0.500000)
                    iadd r3.x, r3.x, l(1)
                  endloop 
                  mov r10.xyzw, r1.xyzw
                  mov r5.xy, r7.yzyy
                else 
                  mov r5.xy, r7.yzyy
                endif 
              else 
                sample_l r10.xyzw, r4.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.x
                mul r0.xyz, r2.xyzx, r4.wwww
                mad r1.xyz, -r4.wwww, r2.xyzx, r4.xyzx
                mov r7.xyz, r4.zxyz
                mov r2.xy, r6.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.w, l(0)
                loop 
                  ige r2.w, r1.w, l(8)
                  breakc_nz r2.w
                  mad r3.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                  sample_l r8.xyzw, r3.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r3.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r7.xyz, r2.wwww, r3.zxyz, r7.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.w, r1.w, l(1)
                endloop 
                mov r6.xy, r2.xyxx
                mov r5.xy, r7.yzyy
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r6.xy, l(0,0,0,0)
            endif 
            ge r0.x, r5.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r6.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r6.x, r6.x, l(1.000000)
              mad r0.w, -r6.y, r6.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r5.z, -r5.y, l(1.000000)
              mul r1.xyzw, r5.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r7.yz, r5.xxyx
            mov r7.w, l(1.000000)
            dp4 r0.x, r7.yxzw, cb0[18].xyzw
            dp4 r0.y, r7.yxzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 250 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Inside_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4 [unused]
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4 [unused]
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4 [unused]
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samComparison                 sampler_c      NA          NA             s1      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // g_txDepthMap                      texture  float4          2d             t1      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 8
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.xyz, r0.xyzx, r0.wwww
            mad r1.x, -r0.z, r0.z, l(1.000000)
            sqrt r1.x, r1.x
            sample_l r2.xyzw, cb0[11].xzxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, cb0[11].xzyx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r1.yzw, l(0,0,0,0)
            mov r3.w, l(0)
            loop 
              ge r6.x, r5.z, r3.z
              mov r3.w, l(0)
              breakc_nz r6.x
              mul r6.x, r5.w, r5.w
              div r6.x, r1.x, r6.x
              add r6.x, -r0.z, r6.x
              div r6.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.x
              add r6.y, r3.z, -r5.z
              mul r6.x, r6.x, r6.y
              max r6.x, r6.x, cb1[0].x
              add r1.y, r1.y, r6.x
              mad r6.yzw, r0.xxyz, r6.xxxx, r3.xxyz
              lt r7.x, r0.w, r1.y
              if_nz r7.x
                mov r3.xyz, r6.yzwy
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r1.z, r6.x
                mov r3.w, l(-1)
                break 
              endif 
              ilt r7.y, l(512), r1.w
              if_nz r7.y
                mov r3.xyz, r6.yzwy
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r1.z, r6.x
                mov r3.w, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r6.yzyy, t0.zwxy, s0, l(0.000000)
              iadd r1.w, r1.w, l(1)
              or r3.w, r7.x, r7.y
              mov r3.xyz, r6.yzwy
              mov r1.z, r6.x
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r3.w
              mul r1.xyw, r0.xyxz, r1.zzzz
              mad r0.xyz, -r1.zzzz, r0.xyzx, r3.xyzx
              mov r4.xyz, r3.xzyx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.z, l(0)
              loop 
                ige r2.w, r1.z, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r1.xywx, r0.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xzyx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.z, r1.z, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r2.x, r2.x, l(1.000000)
              mad r0.w, -r2.y, r2.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              mov r4.w, l(1.000000)
              dp4 r1.x, r4.xyzw, cb0[24].xyzw
              dp4 r1.y, r4.xyzw, cb0[25].xyzw
              dp4 r0.y, r4.xyzw, cb0[26].xyzw
              dp4 r0.z, r4.xyzw, cb0[27].xyzw
              div r1.xy, r1.xyxx, r0.zzzz
              mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r1.z, -r1.y, l(1.000000)
              sample_c_lz r0.y, r1.xzxx, t1.xxxx, s1, r0.y
              mul r0.x, r0.y, r0.x
              max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xyzw, cb0[18].xyzw
            dp4 r0.y, r4.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 106 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Outside_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4 [unused]
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4 [unused]
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4 [unused]
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samComparison                 sampler_c      NA          NA             s1      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // g_txDepthMap                      texture  float4          2d             t1      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 9
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
            div r2.xyz, -cb0[11].xzyx, r0.xyzx
            max r0.w, r2.x, l(-1.000000)
            movc r0.w, r1.x, r0.w, l(-1.000000)
            lt r3.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r4.xyz, -cb0[11].xzyx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r4.xyz, r4.xyzx, r0.xyzx
            max r1.x, r0.w, r4.x
            movc r0.w, r3.x, r1.x, r0.w
            max r1.x, r0.w, r2.y
            movc r0.w, r1.y, r1.x, r0.w
            max r1.x, r0.w, r4.y
            movc r0.w, r3.y, r1.x, r0.w
            max r1.x, r0.w, r2.z
            movc r0.w, r1.z, r1.x, r0.w
            max r1.x, r0.w, r4.z
            movc r0.w, r3.z, r1.x, r0.w
            mad r0.xyz, r0.xyzx, r0.wwww, cb0[11].xzyx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r6.xyz, l(0,0,0,0)
            loop 
              ge r6.w, r5.z, r3.z
              mov r6.z, l(0)
              breakc_nz r6.w
              mul r6.w, r5.w, r5.w
              div r6.w, r1.w, r6.w
              add r6.w, -r1.z, r6.w
              div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
              add r7.x, r3.z, -r5.z
              mul r6.w, r6.w, r7.x
              max r6.w, r6.w, cb1[0].x
              add r3.w, r3.w, r6.w
              mad r7.xyz, r1.xyzx, r6.wwww, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r6.y
              if_nz r8.x
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t0.zwxy, s0, l(0.000000)
              iadd r6.y, r6.y, l(1)
              or r6.z, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r6.xyz, r6.wyzw
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r6.z
              mul r0.xyz, r1.xyzx, r6.xxxx
              mad r1.xyz, -r6.xxxx, r1.xyzx, r3.xyzx
              mov r4.xyz, r3.xzyx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.w, l(0)
              loop 
                ige r2.w, r1.w, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xzyx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.w, r1.w, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r2.x, r2.x, l(1.000000)
              mad r0.w, -r2.y, r2.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              mov r4.w, l(1.000000)
              dp4 r1.x, r4.xyzw, cb0[24].xyzw
              dp4 r1.y, r4.xyzw, cb0[25].xyzw
              dp4 r0.y, r4.xyzw, cb0[26].xyzw
              dp4 r0.z, r4.xyzw, cb0[27].xyzw
              div r1.xy, r1.xyxx, r0.zzzz
              mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r1.z, -r1.y, l(1.000000)
              sample_c_lz r0.y, r1.xzxx, t1.xxxx, s1, r0.y
              mul r0.x, r0.y, r0.x
              max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xyzw, cb0[18].xyzw
            dp4 r0.y, r4.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 125 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Ortho_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4 [unused]
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4 [unused]
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4 [unused]
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4 [unused]
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4 [unused]
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4 [unused]
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samComparison                 sampler_c      NA          NA             s1      1 
            // g_txHeight                        texture  float4          2d             t0      1 
            // g_txDepthMap                      texture  float4          2d             t1      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 9
            mad r0.xyz, cb0[1].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), v0.xyzx
            add r1.xyz, -r0.xyzx, v0.xyzx
            lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzx
            div r3.xyz, -r0.xyzx, r1.xyzx
            max r0.w, r3.x, l(-1.000000)
            movc r0.w, r2.x, r0.w, l(-1.000000)
            lt r4.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r5.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r5.xyz, r5.xyzx, r1.xyzx
            max r1.w, r0.w, r5.x
            movc r0.w, r4.x, r1.w, r0.w
            max r1.w, r0.w, r3.y
            movc r0.w, r2.y, r1.w, r0.w
            max r1.w, r0.w, r5.y
            movc r0.w, r4.y, r1.w, r0.w
            max r1.w, r0.w, r3.z
            movc r0.w, r2.z, r1.w, r0.w
            max r1.w, r0.w, r5.z
            movc r0.w, r4.z, r1.w, r0.w
            mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r4.xyz, l(0,0,0,0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r6.xyz, l(0,0,0,0)
            loop 
              ge r6.w, r5.z, r3.z
              mov r6.z, l(0)
              breakc_nz r6.w
              mul r6.w, r5.w, r5.w
              div r6.w, r1.w, r6.w
              add r6.w, -r1.z, r6.w
              div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
              add r7.x, r3.z, -r5.z
              mul r6.w, r6.w, r7.x
              max r6.w, r6.w, cb1[0].x
              add r3.w, r3.w, r6.w
              mad r7.xyz, r1.xyzx, r6.wwww, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r6.y
              if_nz r8.x
                mov r3.xyz, r7.xyzx
                mov r4.xyz, l(-1.000000,-1.000000,-1.000000,0)
                mov r6.x, r6.w
                mov r6.z, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t0.zwxy, s0, l(0.000000)
              iadd r6.y, r6.y, l(1)
              or r6.z, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r6.xyz, r6.wyzw
              mov r4.xyz, l(0,0,0,0)
            endloop 
            if_z r6.z
              mul r0.xyz, r1.xyzx, r6.xxxx
              mad r1.xyz, -r6.xxxx, r1.xyzx, r3.xyzx
              mov r4.xyz, r3.xzyx
              mov r2.xy, r5.xyxx
              mov r2.z, l(0.500000)
              mov r0.w, l(0.250000)
              mov r1.w, l(0)
              loop 
                ige r2.w, r1.w, l(8)
                breakc_nz r2.w
                mad r6.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                sample_l r7.xyzw, r6.xyxx, t0.zwxy, s0, l(0.000000)
                ge r2.w, r7.z, r6.z
                mad r7.z, -r0.w, l(2.000000), r2.z
                movc r4.xyz, r2.wwww, r6.xzyx, r4.xyzx
                movc r2.xyz, r2.wwww, r7.xyzx, r2.xyzx
                add r2.z, r0.w, r2.z
                mul r0.w, r0.w, l(0.500000)
                iadd r1.w, r1.w, l(1)
              endloop 
            else 
              mov r2.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r2.x, r2.x, l(1.000000)
              mad r0.w, -r2.y, r2.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              mov r4.w, l(1.000000)
              dp4 r1.x, r4.xyzw, cb0[24].xyzw
              dp4 r1.y, r4.xyzw, cb0[25].xyzw
              dp4 r0.y, r4.xyzw, cb0[26].xyzw
              dp4 r0.z, r4.xyzw, cb0[27].xyzw
              div r1.xy, r1.xyxx, r0.zzzz
              mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r1.z, -r1.y, l(1.000000)
              sample_c_lz r0.y, r1.xzxx, t1.xxxx, s1, r0.y
              mul r0.x, r0.y, r0.x
              max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r4.w, l(1.000000)
            dp4 r0.x, r4.xyzw, cb0[18].xyzw
            dp4 r0.y, r4.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 126 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Inside_Detail_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_samComparison                 sampler_c      NA          NA             s2      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // g_txDepthMap                      texture  float4          2d             t9      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_sampler s2, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_resource_texture2d (float,float,float,float) t9
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.xyz, r0.xyzx, r0.wwww
            mad r1.x, -r0.z, r0.z, l(1.000000)
            sqrt r1.x, r1.x
            sample_l r2.xyzw, cb0[11].xzxx, t6.xyzw, s0, l(0.000000)
            mov r4.xy, l(0,0,0,0)
            mov r3.xyz, cb0[11].xzyx
            mov r6.y, l(0)
            mov r5.xyzw, r2.zwxy
            mov r1.yzw, l(0,0,0,0)
            mov r3.w, l(0)
            loop 
              ge r4.w, r5.z, r3.z
              mov r3.w, l(0)
              breakc_nz r4.w
              mul r4.w, r5.w, r5.w
              div r4.w, r1.x, r4.w
              add r4.w, -r0.z, r4.w
              div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
              add r7.x, r3.z, -r5.z
              mul r4.w, r4.w, r7.x
              max r4.w, r4.w, cb1[0].x
              add r1.y, r1.y, r4.w
              mad r7.xyz, r0.xyzx, r4.wwww, r3.xyzx
              lt r7.w, r0.w, r1.y
              if_nz r7.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r7.xyzx
                mov r6.y, l(-1.000000)
                mov r1.z, r4.w
                mov r3.w, l(-1)
                break 
              endif 
              ilt r8.x, l(512), r1.w
              if_nz r8.x
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r7.xyzx
                mov r6.y, l(-1.000000)
                mov r1.z, r4.w
                mov r3.w, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r1.w, r1.w, l(1)
              or r3.w, r7.w, r8.x
              mov r3.xyz, r7.xyzx
              mov r1.z, r4.w
              mov r4.xy, l(0,0,0,0)
              mov r6.y, l(0)
            endloop 
            if_z r3.w
              add r2.xyz, r3.xyzx, -cb0[11].xzyx
              mul r2.w, r2.z, cb1[1].x
              dp3 r0.w, r2.xywx, r2.xywx
              lt r0.w, r0.w, cb2[1].x
              if_nz r0.w
                mad r1.xyw, -r1.zzzz, r0.xyxz, r3.xyxz
                add r2.xyz, -r1.xywx, v0.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                sqrt r2.w, r2.w
                div r2.xyz, r2.xyzx, r2.wwww
                sample_l r7.xyzw, r1.xyxx, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r1.xyxx, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r1.xyxx, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r3.w, r9.xyzw, r8.xyzw
                add r3.w, -r3.w, l(1.000000)
                mad r3.w, -r3.w, cb2[0].z, r7.x
                mul r4.w, cb1[0].z, cb2[0].y
                mul r5.w, r4.w, l(4.000000)
                mul r9.xyz, r2.xyzx, r5.wwww
                mov r10.xyzw, r8.xyzw
                mov r6.xyz, l(0,0,0,0)
                mov r7.xy, r5.xyxx
                mov r12.xy, r7.zwzz
                mov r11.xyz, r1.xywx
                mov r9.w, r3.w
                mov r11.w, l(0)
                mov r13.xy, l(0,0,0,0)
                loop 
                  ge r13.z, r9.w, r11.z
                  mov r13.y, l(0)
                  breakc_nz r13.z
                  mad r11.w, r4.w, l(4.000000), r11.w
                  mad r14.xyz, r2.xyzx, r5.wwww, r11.xyzx
                  lt r13.z, r2.w, r11.w
                  ilt r13.w, l(128), r13.x
                  or r13.z, r13.w, r13.z
                  if_nz r13.z
                    mov r6.xyz, r14.xzyx
                    mov r7.xy, r12.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r13.y, l(-1)
                    break 
                  endif 
                  sample_l r12.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r9.w, -r12.w, cb2[0].z, r12.z
                  iadd r13.x, r13.x, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r13.xy, r13.xzxx
                  mov r6.xyz, l(0,0,0,0)
                endloop 
                mov r5.xy, r7.xyxx
                if_z r13.y
                  mad r1.xyw, -r2.xyxz, r5.wwww, r11.xyxz
                  mov r2.xyzw, r10.xyzw
                  mov r6.xyz, r11.xzyx
                  mov r5.xy, r12.xyxx
                  mov r5.z, l(0.500000)
                  mov r3.w, l(0.250000)
                  mov r4.w, l(0)
                  loop 
                    ige r5.w, r4.w, l(8)
                    breakc_nz r5.w
                    mad r7.xyz, r5.zzzz, r9.xyzx, r1.xywx
                    sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                    sample_l r13.xyzw, r7.xyxx, t7.xyzw, s0, l(0.000000)
                    mul r12.zw, r7.xxxy, cb2[0].xxxx
                    sample_l r14.xyzw, r12.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r13.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r7.z
                    mad r8.z, -r3.w, l(2.000000), r5.z
                    movc r2.xyzw, r5.wwww, r13.xyzw, r2.xyzw
                    movc r6.xyz, r5.wwww, r7.xzyx, r6.xyzx
                    movc r5.xyz, r5.wwww, r8.xyzx, r5.xyzx
                    add r5.z, r3.w, r5.z
                    mul r3.w, r3.w, l(0.500000)
                    iadd r4.w, r4.w, l(1)
                  endloop 
                  mov r10.xyzw, r2.xyzw
                  mov r4.xy, r6.xzxx
                else 
                  mov r4.xy, r6.xzxx
                endif 
              else 
                sample_l r10.xyzw, r3.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.w
                mul r1.xyw, r0.xyxz, r1.zzzz
                mad r0.xyz, -r1.zzzz, r0.xyzx, r3.xyzx
                mov r6.xyz, r3.xzyx
                mov r2.xy, r5.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.z, l(0)
                loop 
                  ige r2.w, r1.z, l(8)
                  breakc_nz r2.w
                  mad r7.xyz, r2.zzzz, r1.xywx, r0.xyzx
                  sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r7.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r6.xyz, r2.wwww, r7.xzyx, r6.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.z, r1.z, l(1)
                endloop 
                mov r5.xy, r2.xyxx
                mov r4.xy, r6.xzxx
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r5.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r5.x, r5.x, l(1.000000)
              mad r0.w, -r5.y, r5.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r4.z, -r4.y, l(1.000000)
              mul r1.xyzw, r4.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              mov r6.xz, r4.xxyx
              mov r6.w, l(1.000000)
              dp4 r2.x, r6.xyzw, cb0[24].xyzw
              dp4 r2.y, r6.xyzw, cb0[25].xyzw
              dp4 r0.y, r6.xyzw, cb0[26].xyzw
              dp4 r0.z, r6.xyzw, cb0[27].xyzw
              div r2.xy, r2.xyxx, r0.zzzz
              mad r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r2.z, -r2.y, l(1.000000)
              sample_c_lz r0.y, r2.xzxx, t9.xxxx, s2, r0.y
              mul r0.x, r0.y, r0.x
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r6.xz, r4.xxyx
            mov r6.w, l(1.000000)
            dp4 r0.x, r6.xyzw, cb0[18].xyzw
            dp4 r0.y, r6.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 241 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Outside_Detail_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_samComparison                 sampler_c      NA          NA             s2      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // g_txDepthMap                      texture  float4          2d             t9      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_sampler s2, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_resource_texture2d (float,float,float,float) t9
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
            div r2.xyz, -cb0[11].xzyx, r0.xyzx
            max r0.w, r2.x, l(-1.000000)
            movc r0.w, r1.x, r0.w, l(-1.000000)
            lt r3.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r4.xyz, -cb0[11].xzyx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r4.xyz, r4.xyzx, r0.xyzx
            max r1.x, r0.w, r4.x
            movc r0.w, r3.x, r1.x, r0.w
            max r1.x, r0.w, r2.y
            movc r0.w, r1.y, r1.x, r0.w
            max r1.x, r0.w, r4.y
            movc r0.w, r3.y, r1.x, r0.w
            max r1.x, r0.w, r2.z
            movc r0.w, r1.z, r1.x, r0.w
            max r1.x, r0.w, r4.z
            movc r0.w, r3.z, r1.x, r0.w
            mad r0.xyz, r0.xyzx, r0.wwww, cb0[11].xzyx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t6.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r6.y, l(0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r4.xyw, l(0,0,0,0)
            mov r7.xy, l(0,0,0,0)
            loop 
              ge r7.z, r5.z, r3.z
              mov r7.y, l(0)
              breakc_nz r7.z
              mul r7.z, r5.w, r5.w
              div r7.z, r1.w, r7.z
              add r7.z, -r1.z, r7.z
              div r7.z, l(1.000000, 1.000000, 1.000000, 1.000000), r7.z
              add r7.w, r3.z, -r5.z
              mul r7.z, r7.z, r7.w
              max r7.z, r7.z, cb1[0].x
              add r3.w, r3.w, r7.z
              mad r8.xyz, r1.xyzx, r7.zzzz, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.y, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              ilt r8.w, l(512), r7.x
              if_nz r8.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.y, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r8.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r7.x, r7.x, l(1)
              or r7.y, r7.w, r8.w
              mov r3.xyz, r8.xyzx
              mov r4.w, r7.z
              mov r4.xy, l(0,0,0,0)
              mov r6.y, l(0)
            endloop 
            if_z r7.y
              add r0.xyz, r3.xyzx, -cb0[11].xzyx
              mul r0.w, r0.z, cb1[1].x
              dp3 r0.x, r0.xywx, r0.xywx
              lt r0.x, r0.x, cb2[1].x
              if_nz r0.x
                mad r0.yzw, -r4.wwww, r1.xxyz, r3.xxyz
                add r2.xyz, -r0.yzwy, v0.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                div r2.xyz, r2.xyzx, r1.wwww
                sample_l r7.xyzw, r0.yzyy, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r0.yzyy, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r0.yzyy, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r2.w, r9.xyzw, r8.xyzw
                add r2.w, -r2.w, l(1.000000)
                mad r2.w, -r2.w, cb2[0].z, r7.x
                mul r3.w, cb1[0].z, cb2[0].y
                mul r5.w, r3.w, l(4.000000)
                mul r9.xyz, r2.xyzx, r5.wwww
                mov r10.xyzw, r8.xyzw
                mov r6.xyz, l(0,0,0,0)
                mov r7.xy, r5.xyxx
                mov r12.xy, r7.zwzz
                mov r11.xyz, r0.yzwy
                mov r9.w, r2.w
                mov r11.w, l(0)
                mov r13.xy, l(0,0,0,0)
                loop 
                  ge r13.z, r9.w, r11.z
                  mov r13.y, l(0)
                  breakc_nz r13.z
                  mad r11.w, r3.w, l(4.000000), r11.w
                  mad r14.xyz, r2.xyzx, r5.wwww, r11.xyzx
                  lt r13.z, r1.w, r11.w
                  ilt r13.w, l(128), r13.x
                  or r13.z, r13.w, r13.z
                  if_nz r13.z
                    mov r6.xyz, r14.xzyx
                    mov r7.xy, r12.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r13.y, l(-1)
                    break 
                  endif 
                  sample_l r12.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r9.w, -r12.w, cb2[0].z, r12.z
                  iadd r13.x, r13.x, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r13.xy, r13.xzxx
                  mov r6.xyz, l(0,0,0,0)
                endloop 
                mov r5.xy, r7.xyxx
                if_z r13.y
                  mad r0.yzw, -r2.xxyz, r5.wwww, r11.xxyz
                  mov r2.xyzw, r10.xyzw
                  mov r6.xyz, r11.xzyx
                  mov r5.xy, r12.xyxx
                  mov r5.z, l(0.500000)
                  mov r1.w, l(0.250000)
                  mov r3.w, l(0)
                  loop 
                    ige r5.w, r3.w, l(8)
                    breakc_nz r5.w
                    mad r7.xyz, r5.zzzz, r9.xyzx, r0.yzwy
                    sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                    sample_l r13.xyzw, r7.xyxx, t7.xyzw, s0, l(0.000000)
                    mul r12.zw, r7.xxxy, cb2[0].xxxx
                    sample_l r14.xyzw, r12.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r13.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r7.z
                    mad r8.z, -r1.w, l(2.000000), r5.z
                    movc r2.xyzw, r5.wwww, r13.xyzw, r2.xyzw
                    movc r6.xyz, r5.wwww, r7.xzyx, r6.xyzx
                    movc r5.xyz, r5.wwww, r8.xyzx, r5.xyzx
                    add r5.z, r1.w, r5.z
                    mul r1.w, r1.w, l(0.500000)
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r10.xyzw, r2.xyzw
                  mov r4.xy, r6.xzxx
                else 
                  mov r4.xy, r6.xzxx
                endif 
              else 
                sample_l r10.xyzw, r3.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.x
                mul r0.xyz, r1.xyzx, r4.wwww
                mad r1.xyz, -r4.wwww, r1.xyzx, r3.xyzx
                mov r6.xyz, r3.xzyx
                mov r2.xy, r5.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.w, l(0)
                loop 
                  ige r2.w, r1.w, l(8)
                  breakc_nz r2.w
                  mad r7.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                  sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r7.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r6.xyz, r2.wwww, r7.xzyx, r6.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.w, r1.w, l(1)
                endloop 
                mov r5.xy, r2.xyxx
                mov r4.xy, r6.xzxx
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r5.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r5.x, r5.x, l(1.000000)
              mad r0.w, -r5.y, r5.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r4.z, -r4.y, l(1.000000)
              mul r1.xyzw, r4.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              mov r6.xz, r4.xxyx
              mov r6.w, l(1.000000)
              dp4 r2.x, r6.xyzw, cb0[24].xyzw
              dp4 r2.y, r6.xyzw, cb0[25].xyzw
              dp4 r0.y, r6.xyzw, cb0[26].xyzw
              dp4 r0.z, r6.xyzw, cb0[27].xyzw
              div r2.xy, r2.xyxx, r0.zzzz
              mad r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r2.z, -r2.y, l(1.000000)
              sample_c_lz r0.y, r2.xzxx, t9.xxxx, s2, r0.y
              mul r0.x, r0.y, r0.x
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r6.xz, r4.xxyx
            mov r6.w, l(1.000000)
            dp4 r0.x, r6.xyzw, cb0[18].xyzw
            dp4 r0.y, r6.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 260 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Ortho_Detail_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64
            //
            // }
            //
            // cbuffer cbConstant
            // {
            //
            //   float g_InvMapSize;                // Offset:    0 Size:     4
            //      = 0x3a800000 
            //   float g_MapSize;                   // Offset:    4 Size:     4 [unused]
            //      = 0x44800000 
            //   float g_InvDetailMapSize;          // Offset:    8 Size:     4
            //      = 0x3b800000 
            //   float g_DetailMapSize;             // Offset:   12 Size:     4
            //      = 0x43800000 
            //   float g_HeightRatio;               // Offset:   16 Size:     4
            //      = 0x3dcccccd 
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearPoint                  sampler      NA          NA             s0      1 
            // g_samWrap                         sampler      NA          NA             s1      1 
            // g_samComparison                 sampler_c      NA          NA             s2      1 
            // g_txDetailDiffuse                 texture  float4          2d             t0      4 
            // g_txDetailGrad_RedGreen           texture  float4          2d             t4      1 
            // g_txDetailGrad_BlueAlpha          texture  float4          2d             t5      1 
            // g_txHeight                        texture  float4          2d             t6      1 
            // g_txMask                          texture  float4          2d             t7      1 
            // g_txDetailHeight                  texture  float4          2d             t8      1 
            // g_txDepthMap                      texture  float4          2d             t9      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbConstant                        cbuffer      NA          NA            cb1      1 
            // cbUI                              cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_DEPTH                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[28], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_sampler s2, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_resource_texture2d (float,float,float,float) t2
            dcl_resource_texture2d (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texture2d (float,float,float,float) t6
            dcl_resource_texture2d (float,float,float,float) t7
            dcl_resource_texture2d (float,float,float,float) t8
            dcl_resource_texture2d (float,float,float,float) t9
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 16
            add r0.xyz, v0.xyzx, -cb0[11].xzyx
            lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
            div r2.xyz, -cb0[11].xzyx, r0.xyzx
            max r0.w, r2.x, l(-1.000000)
            movc r0.w, r1.x, r0.w, l(-1.000000)
            lt r3.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
            add r4.xyz, -cb0[11].xzyx, l(1.000000, 1.000000, 1.000000, 0.000000)
            div r4.xyz, r4.xyzx, r0.xyzx
            max r1.x, r0.w, r4.x
            movc r0.w, r3.x, r1.x, r0.w
            max r1.x, r0.w, r2.y
            movc r0.w, r1.y, r1.x, r0.w
            max r1.x, r0.w, r4.y
            movc r0.w, r3.y, r1.x, r0.w
            max r1.x, r0.w, r2.z
            movc r0.w, r1.z, r1.x, r0.w
            max r1.x, r0.w, r4.z
            movc r0.w, r3.z, r1.x, r0.w
            mad r0.xyz, r0.xyzx, r0.wwww, cb0[11].xzyx
            add r1.xyz, -r0.xyzx, v0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r1.xyz, r1.xyzx, r0.wwww
            mad r1.w, -r1.z, r1.z, l(1.000000)
            sqrt r1.w, r1.w
            sample_l r2.xyzw, r0.xyxx, t6.xyzw, s0, l(0.000000)
            mov r3.xyz, r0.xyzx
            mov r6.y, l(0)
            mov r5.xyzw, r2.zwxy
            mov r3.w, l(0)
            mov r4.xyw, l(0,0,0,0)
            mov r7.xy, l(0,0,0,0)
            loop 
              ge r7.z, r5.z, r3.z
              mov r7.y, l(0)
              breakc_nz r7.z
              mul r7.z, r5.w, r5.w
              div r7.z, r1.w, r7.z
              add r7.z, -r1.z, r7.z
              div r7.z, l(1.000000, 1.000000, 1.000000, 1.000000), r7.z
              add r7.w, r3.z, -r5.z
              mul r7.z, r7.z, r7.w
              max r7.z, r7.z, cb1[0].x
              add r3.w, r3.w, r7.z
              mad r8.xyz, r1.xyzx, r7.zzzz, r3.xyzx
              lt r7.w, r0.w, r3.w
              if_nz r7.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.y, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              ilt r8.w, l(512), r7.x
              if_nz r8.w
                mov r4.xy, l(-1.000000,-1.000000,0,0)
                mov r3.xyz, r8.xyzx
                mov r6.y, l(-1.000000)
                mov r4.w, r7.z
                mov r7.y, l(-1)
                break 
              endif 
              sample_l r5.xyzw, r8.xyxx, t6.zwxy, s0, l(0.000000)
              iadd r7.x, r7.x, l(1)
              or r7.y, r7.w, r8.w
              mov r3.xyz, r8.xyzx
              mov r4.w, r7.z
              mov r4.xy, l(0,0,0,0)
              mov r6.y, l(0)
            endloop 
            if_z r7.y
              add r0.xyz, r3.xyzx, -cb0[11].xzyx
              mul r0.w, r0.z, cb1[1].x
              dp3 r0.x, r0.xywx, r0.xywx
              lt r0.x, r0.x, cb2[1].x
              if_nz r0.x
                mad r0.yzw, -r4.wwww, r1.xxyz, r3.xxyz
                add r2.xyz, -r0.yzwy, v0.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w
                div r2.xyz, r2.xyzx, r1.wwww
                sample_l r7.xyzw, r0.yzyy, t6.xyzw, s0, l(0.000000)
                sample_l r8.xyzw, r0.yzyy, t7.xyzw, s0, l(0.000000)
                mul r9.xy, r0.yzyy, cb2[0].xxxx
                sample_l r9.xyzw, r9.xyxx, t8.xyzw, s1, l(0.000000)
                dp4 r2.w, r9.xyzw, r8.xyzw
                add r2.w, -r2.w, l(1.000000)
                mad r2.w, -r2.w, cb2[0].z, r7.x
                mul r3.w, cb1[0].z, cb2[0].y
                mul r5.w, r3.w, l(4.000000)
                mul r9.xyz, r2.xyzx, r5.wwww
                mov r10.xyzw, r8.xyzw
                mov r6.xyz, l(0,0,0,0)
                mov r7.xy, r5.xyxx
                mov r12.xy, r7.zwzz
                mov r11.xyz, r0.yzwy
                mov r9.w, r2.w
                mov r11.w, l(0)
                mov r13.xy, l(0,0,0,0)
                loop 
                  ge r13.z, r9.w, r11.z
                  mov r13.y, l(0)
                  breakc_nz r13.z
                  mad r11.w, r3.w, l(4.000000), r11.w
                  mad r14.xyz, r2.xyzx, r5.wwww, r11.xyzx
                  lt r13.z, r1.w, r11.w
                  ilt r13.w, l(128), r13.x
                  or r13.z, r13.w, r13.z
                  if_nz r13.z
                    mov r6.xyz, r14.xzyx
                    mov r7.xy, r12.xyxx
                    mov r11.xyz, r14.xyzx
                    mov r13.y, l(-1)
                    break 
                  endif 
                  sample_l r12.xyzw, r14.xyxx, t6.zwxy, s0, l(0.000000)
                  sample_l r10.xyzw, r14.xyxx, t7.xyzw, s0, l(0.000000)
                  mul r15.xy, r14.xyxx, cb2[0].xxxx
                  sample_l r15.xyzw, r15.xyxx, t8.xyzw, s1, l(0.000000)
                  dp4 r12.w, r15.xyzw, r10.xyzw
                  add r12.w, -r12.w, l(1.000000)
                  mad r9.w, -r12.w, cb2[0].z, r12.z
                  iadd r13.x, r13.x, l(1)
                  mov r11.xyz, r14.xyzx
                  mov r13.xy, r13.xzxx
                  mov r6.xyz, l(0,0,0,0)
                endloop 
                mov r5.xy, r7.xyxx
                if_z r13.y
                  mad r0.yzw, -r2.xxyz, r5.wwww, r11.xxyz
                  mov r2.xyzw, r10.xyzw
                  mov r6.xyz, r11.xzyx
                  mov r5.xy, r12.xyxx
                  mov r5.z, l(0.500000)
                  mov r1.w, l(0.250000)
                  mov r3.w, l(0)
                  loop 
                    ige r5.w, r3.w, l(8)
                    breakc_nz r5.w
                    mad r7.xyz, r5.zzzz, r9.xyzx, r0.yzwy
                    sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                    sample_l r13.xyzw, r7.xyxx, t7.xyzw, s0, l(0.000000)
                    mul r12.zw, r7.xxxy, cb2[0].xxxx
                    sample_l r14.xyzw, r12.zwzz, t8.xyzw, s1, l(0.000000)
                    dp4 r5.w, r14.xyzw, r13.xyzw
                    add r5.w, -r5.w, l(1.000000)
                    mad r5.w, -r5.w, cb2[0].z, r8.z
                    ge r5.w, r5.w, r7.z
                    mad r8.z, -r1.w, l(2.000000), r5.z
                    movc r2.xyzw, r5.wwww, r13.xyzw, r2.xyzw
                    movc r6.xyz, r5.wwww, r7.xzyx, r6.xyzx
                    movc r5.xyz, r5.wwww, r8.xyzx, r5.xyzx
                    add r5.z, r1.w, r5.z
                    mul r1.w, r1.w, l(0.500000)
                    iadd r3.w, r3.w, l(1)
                  endloop 
                  mov r10.xyzw, r2.xyzw
                  mov r4.xy, r6.xzxx
                else 
                  mov r4.xy, r6.xzxx
                endif 
              else 
                sample_l r10.xyzw, r3.xyxx, t7.xyzw, s0, l(0.000000)
              endif 
              if_z r0.x
                mul r0.xyz, r1.xyzx, r4.wwww
                mad r1.xyz, -r4.wwww, r1.xyzx, r3.xyzx
                mov r6.xyz, r3.xzyx
                mov r2.xy, r5.xyxx
                mov r2.z, l(0.500000)
                mov r0.w, l(0.250000)
                mov r1.w, l(0)
                loop 
                  ige r2.w, r1.w, l(8)
                  breakc_nz r2.w
                  mad r7.xyz, r2.zzzz, r0.xyzx, r1.xyzx
                  sample_l r8.xyzw, r7.xyxx, t6.zwxy, s0, l(0.000000)
                  ge r2.w, r8.z, r7.z
                  mad r8.z, -r0.w, l(2.000000), r2.z
                  movc r6.xyz, r2.wwww, r7.xzyx, r6.xyzx
                  movc r2.xyz, r2.wwww, r8.xyzx, r2.xyzx
                  add r2.z, r0.w, r2.z
                  mul r0.w, r0.w, l(0.500000)
                  iadd r1.w, r1.w, l(1)
                endloop 
                mov r5.xy, r2.xyxx
                mov r4.xy, r6.xzxx
              endif 
            else 
              mov r10.xyzw, l(1.000000,1.000000,1.000000,1.000000)
              mov r5.xy, l(0,0,0,0)
            endif 
            ge r0.x, r4.x, l(0.000000)
            if_nz r0.x
              add r0.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              add r0.xz, r0.xxyx, r0.xxyx
              mad r0.w, -r5.x, r5.x, l(1.000000)
              mad r0.w, -r5.y, r5.y, r0.w
              sqrt r0.w, r0.w
              mul r0.y, r0.w, l(0.500000)
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              add r4.z, -r4.y, l(1.000000)
              mul r1.xyzw, r4.xzxy, cb2[0].xxxx
              sample_l r2.xyzw, r1.xyxx, t4.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.xyxx, t5.xyzw, s1, l(0.000000)
              mul r1.xy, r10.yyyy, r2.zwzz
              mad r1.xy, r2.xyxx, r10.xxxx, r1.xyxx
              mad r1.xy, r3.xyxx, r10.zzzz, r1.xyxx
              mad r1.xy, r3.zwzz, r10.wwww, r1.xyxx
              add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r1.xy, r1.xyxx, cb1[0].wwww
              mul r1.xy, r1.xyxx, cb2[0].xxxx
              mul r2.xy, r1.xyxx, cb2[0].zzzz
              mov r2.z, -r2.x
              add r2.w, -cb2[0].z, l(1.000000)
              mul r3.xyz, r2.xwyx, l(-1.000000, 1.000000, 1.000000, 0.000000)
              dp3 r1.x, r2.zwyz, r3.xyzx
              rsq r1.x, r1.x
              mul r2.xyz, r1.xxxx, r3.xyzx
              mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              dp3_sat r0.x, cb0[0].xyzx, r0.xyzx
              sample_l r2.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)
              sample_l r3.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
              mul r3.xyzw, r10.yyyy, r3.xyzw
              mad r2.xyzw, r2.xyzw, r10.xxxx, r3.xyzw
              sample_l r3.xyzw, r1.zwzz, t2.xyzw, s1, l(0.000000)
              mad r2.xyzw, r3.xyzw, r10.zzzz, r2.xyzw
              sample_l r1.xyzw, r1.zwzz, t3.xyzw, s1, l(0.000000)
              mad r1.xyzw, r1.xyzw, r10.wwww, r2.xyzw
              mov r6.xz, r4.xxyx
              mov r6.w, l(1.000000)
              dp4 r2.x, r6.xyzw, cb0[24].xyzw
              dp4 r2.y, r6.xyzw, cb0[25].xyzw
              dp4 r0.y, r6.xyzw, cb0[26].xyzw
              dp4 r0.z, r6.xyzw, cb0[27].xyzw
              div r2.xy, r2.xyxx, r0.zzzz
              mad r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              div r0.y, r0.y, r0.z
              add r0.y, r0.y, -cb2[0].w
              add r2.z, -r2.y, l(1.000000)
              sample_c_lz r0.y, r2.xzxx, t9.xxxx, s2, r0.y
              mul r0.x, r0.y, r0.x
              max r0.x, r0.x, l(0.100000)
              mul o0.xyzw, r0.xxxx, r1.xyzw
            else 
              discard_nz l(-1)
              mov o0.xyzw, l(0,0,0,0)
            endif 
            mov r6.xz, r4.xxyx
            mov r6.w, l(1.000000)
            dp4 r0.x, r6.xyzw, cb0[18].xyzw
            dp4 r0.y, r6.xyzw, cb0[19].xyzw
            div oDepth, r0.x, r0.y
            ret 
            // Approximately 260 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderGeometryTerrain
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_POSITION              0   xyzw        3      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output_siv o3.xyzw, position
            dcl_temps 1
            dp3 o0.x, v1.xyzx, cb0[7].xyzx
            dp3 o0.y, v1.xyzx, cb0[8].xyzx
            dp3 o0.z, v1.xyzx, cb0[9].xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o2.x, r0.xyzw, cb0[7].xyzw
            dp4 o2.y, r0.xyzw, cb0[8].xyzw
            dp4 o2.z, r0.xyzw, cb0[9].xyzw
            dp4 o3.x, r0.xyzw, cb0[3].xyzw
            dp4 o3.y, r0.xyzw, cb0[4].xyzw
            dp4 o3.z, r0.xyzw, cb0[5].xyzw
            dp4 o3.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 14 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float       
            // TEXCOORD                 1   xyz         2     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            dp3 r0.x, v0.xyzx, v0.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, v0.xyzx
            dp3 r0.x, r0.xyzx, cb0[0].xyzx
            max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            ret 
            // Approximately 6 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderGeometryTerrain_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_POSITION              0   xyzw        3      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output_siv o3.xyzw, position
            dcl_temps 1
            dp3 o0.x, v1.xyzx, cb0[7].xyzx
            dp3 o0.y, v1.xyzx, cb0[8].xyzx
            dp3 o0.z, v1.xyzx, cb0[9].xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o2.x, r0.xyzw, cb0[7].xyzw
            dp4 o2.y, r0.xyzw, cb0[8].xyzw
            dp4 o2.z, r0.xyzw, cb0[9].xyzw
            dp4 o3.x, r0.xyzw, cb0[3].xyzw
            dp4 o3.y, r0.xyzw, cb0[4].xyzw
            dp4 o3.z, r0.xyzw, cb0[5].xyzw
            dp4 o3.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 14 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4 [unused]
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4 [unused]
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4 [unused]
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samComparison                 sampler_c      NA          NA             s0      1 
            // g_txDepthMap                      texture  float4          2d             t0      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbUI                              cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float       
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[24], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 2
            mov r0.xyz, v2.xyzx
            mov r0.w, l(1.000000)
            dp4 r1.x, r0.xyzw, cb0[20].xyzw
            dp4 r1.y, r0.xyzw, cb0[21].xyzw
            dp4 r1.z, r0.xyzw, cb0[23].xyzw
            dp4 r0.x, r0.xyzw, cb0[22].xyzw
            div r0.x, r0.x, r1.z
            div r0.yz, r1.xxyx, r1.zzzz
            mad r1.xy, r0.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r0.x, r0.x, -cb1[0].w
            add r1.z, -r1.y, l(1.000000)
            sample_c_lz r0.x, r1.xzxx, t0.xxxx, s0, r0.x
            dp3 r0.y, v0.xyzx, v0.xyzx
            rsq r0.y, r0.y
            mul r0.yzw, r0.yyyy, v0.xxyz
            dp3 r0.y, r0.yzwy, cb0[0].xyzx
            mul r0.x, r0.x, r0.y
            max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            ret 
            // Approximately 19 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderGeometryTerrain_Wire
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_POSITION              0   xyzw        3      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output_siv o3.xyzw, position
            dcl_temps 1
            dp3 o0.x, v1.xyzx, cb0[7].xyzx
            dp3 o0.y, v1.xyzx, cb0[8].xyzx
            dp3 o0.z, v1.xyzx, cb0[9].xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o2.x, r0.xyzw, cb0[7].xyzw
            dp4 o2.y, r0.xyzw, cb0[8].xyzw
            dp4 o2.z, r0.xyzw, cb0[9].xyzw
            dp4 o3.x, r0.xyzw, cb0[3].xyzw
            dp4 o3.y, r0.xyzw, cb0[4].xyzw
            dp4 o3.z, r0.xyzw, cb0[5].xyzw
            dp4 o3.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 14 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float       
            // TEXCOORD                 1   xyz         2     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            dp3 r0.x, v0.xyzx, v0.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, v0.xyzx
            dp3 r0.x, r0.xyzx, cb0[0].xyzx
            max o0.xyzw, r0.xxxx, l(0.100000, 0.100000, 0.100000, 0.100000)
            ret 
            // Approximately 6 instruction slots used
                    
        };
        RasterizerState = Wireframe;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderMesh
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_POSITION              0   xyzw        3      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output_siv o3.xyzw, position
            dcl_temps 1
            dp3 o0.x, v1.xyzx, cb0[7].xyzx
            dp3 o0.y, v1.xyzx, cb0[8].xyzx
            dp3 o0.z, v1.xyzx, cb0[9].xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o2.x, r0.xyzw, cb0[7].xyzw
            dp4 o2.y, r0.xyzw, cb0[8].xyzw
            dp4 o2.z, r0.xyzw, cb0[9].xyzw
            dp4 o3.x, r0.xyzw, cb0[3].xyzw
            dp4 o3.y, r0.xyzw, cb0[4].xyzw
            dp4 o3.z, r0.xyzw, cb0[5].xyzw
            dp4 o3.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 14 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xyz
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 2
            dp3 r0.x, v0.xyzx, v0.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, v0.xyzx
            dp3 r0.x, r0.xyzx, cb0[0].xyzx
            max r0.x, r0.x, l(0.100000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xxxx, r1.xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderMesh_Shadow
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_POSITION              0   xyzw        3      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output_siv o3.xyzw, position
            dcl_temps 1
            dp3 o0.x, v1.xyzx, cb0[7].xyzx
            dp3 o0.y, v1.xyzx, cb0[8].xyzx
            dp3 o0.z, v1.xyzx, cb0[9].xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o2.x, r0.xyzw, cb0[7].xyzw
            dp4 o2.y, r0.xyzw, cb0[8].xyzw
            dp4 o2.z, r0.xyzw, cb0[9].xyzw
            dp4 o3.x, r0.xyzw, cb0[3].xyzw
            dp4 o3.y, r0.xyzw, cb0[4].xyzw
            dp4 o3.z, r0.xyzw, cb0[5].xyzw
            dp4 o3.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 14 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbUI
            // {
            //
            //   float g_DetailRepeat;              // Offset:    0 Size:     4 [unused]
            //      = 0x41800000 
            //   float g_InvDetailRepeat;           // Offset:    4 Size:     4 [unused]
            //      = 0x3d800000 
            //   float g_DetailHeight;              // Offset:    8 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_ShadowBias;                // Offset:   12 Size:     4
            //      = 0x3c23d70a 
            //   float g_DetailDistanceSq;          // Offset:   16 Size:     4 [unused]
            //      = 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_samComparison                 sampler_c      NA          NA             s1      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            // g_txDepthMap                      texture  float4          2d             t1      1 
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            // cbUI                              cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[24], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_comparison
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v0.xyz
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 2
            mov r0.xyz, v2.xyzx
            mov r0.w, l(1.000000)
            dp4 r1.x, r0.xyzw, cb0[20].xyzw
            dp4 r1.y, r0.xyzw, cb0[21].xyzw
            dp4 r1.z, r0.xyzw, cb0[23].xyzw
            dp4 r0.x, r0.xyzw, cb0[22].xyzw
            div r0.x, r0.x, r1.z
            div r0.yz, r1.xxyx, r1.zzzz
            mad r1.xy, r0.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r0.x, r0.x, -cb1[0].w
            add r1.z, -r1.y, l(1.000000)
            sample_c_lz r0.x, r1.xzxx, t1.xxxx, s1, r0.x
            dp3 r0.y, v0.xyzx, v0.xyzx
            rsq r0.y, r0.y
            mul r0.yzw, r0.yyyy, v0.xxyz
            dp3 r0.y, r0.yzwy, cb0[0].xyzx
            mul r0.x, r0.x, r0.y
            max r0.x, r0.x, l(0.100000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xxxx, r1.xyzw
            ret 
            // Approximately 21 instruction slots used
                    
        };
        RasterizerState = Solid;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderTerrain_Wire
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnRender
            // {
            //
            //   float3 g_LightDir;                 // Offset:    0 Size:    12 [unused]
            //   float3 g_LightDirTex;              // Offset:   16 Size:    12 [unused]
            //   float4 g_LightDiffuse;             // Offset:   32 Size:    16 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   48 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  112 Size:    64 [unused]
            //   float3 g_vTextureEyePt;            // Offset:  176 Size:    12 [unused]
            //   float4x4 g_mWorldToTerrain;        // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mTexToViewProj;         // Offset:  256 Size:    64 [unused]
            //   float4x4 g_mLightViewProj;         // Offset:  320 Size:    64 [unused]
            //   float4x4 g_mTexToLightViewProj;    // Offset:  384 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbOnRender                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            // SV_POSITION              0   xyzw        1      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_output o0.xyz
            dcl_output_siv o1.xyzw, position
            dcl_temps 1
            mov o0.xyz, v0.xzyx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o1.x, r0.xyzw, cb0[3].xyzw
            dp4 o1.y, r0.xyzw, cb0[4].xyzw
            dp4 o1.z, r0.xyzw, cb0[5].xyzw
            dp4 o1.w, r0.xyzw, cb0[6].xyzw
            ret 
            // Approximately 8 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // RAYEND                   0   xyz         0     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_input_ps linear v0.xyz
            dcl_output o0.xyzw
            mov o0.xyz, v0.xyzx
            mov o0.w, l(1.000000)
            ret 
            // Approximately 3 instruction slots used
                    
        };
        RasterizerState = Wireframe;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

