//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 6 local buffer(s)
//
cbuffer crarely
{
    float4x4 g_mTreeMatrices[50];       // Offset:    0, size: 3200
    uint    g_iNumTrees;                // Offset: 3200, size:    4
}

cbuffer ceveryframe
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mWorldView;              // Offset:   64, size:   64
}

cbuffer cmultipleperframe
{
    float   g_GrassWidth;               // Offset:    0, size:    4
    float   g_GrassHeight;              // Offset:    4, size:    4
    uint    g_iGrassCoverage;           // Offset:    8, size:    4
}

cbuffer cusercontrolled
{
    float   g_GrassMessiness;           // Offset:    0, size:    4
}

cbuffer cimmutable
{
    light_struct g_lights[4] = { 0x3f1eca58, 0x3f2f0447, 0x3ec4e209, 0x3f800000, 0x3f400000, 0x3f195810, 0x3ecf5c29, 0x3f800000, 0x3d819d24, 0xbf7cc921, 0x3e143569, 0x3f800000, 0x3e449ba6, 0x3e8bc6a8, 0x3e8ccccd, 0x3f800000, 0x3e6b9778, 0x3f491bb5, 0xbf130d52, 0x3f800000, 0x3e99999a, 0x3e958106, 0x3e645a1d, 0x3f800000, 0xbf1eca58, 0xbf2f0447, 0xbec4e209, 0x3f800000, 0x00000000, 0x00000000, 0x3dcccccd, 0x3f800000 };// Offset:    0, size:  128
    float4  g_ambient = { 0.494500011, 0.465000004, 0.5, 1 };// Offset:  128, size:   16
    float   g_occDimHeight = 2400;      // Offset:  144, size:    4
}

cbuffer cgrassblade
{
    float3  g_positions[6] = { -1, 0, 0, -1, 2, 0, 1, 0, 0, 1, 2, 0, -1, 0, 0, -1, 2, 0 };// Offset:    0, size:   92
    float2  g_texcoords[6] = { 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0 };// Offset:   96, size:   88
}

//
// 10 local object(s)
//
Texture2D g_txDiffuse;
Texture2DArray g_tx2dArray;
SamplerState g_samLinear
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture1D g_txRandom;
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
BlendState QuadAlphaBlendState
{
    AlphaToCoverageEnable = bool(TRUE /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
RasterizerState EnableMSAA
{
    CullMode = uint(BACK /* 3 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
DepthStencilState DisableDepthTestWrite
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState EnableDepthTestWrite
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};

//
// 4 technique(s)
//
technique10 RenderInstancedVertLighting
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer ceveryframe
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //
            // }
            //
            // cbuffer cimmutable
            // {
            //
            //   struct
            //   {
            //       
            //       float4 direction;              // Offset:    0
            //       float4 color;                  // Offset:   16
            //
            //   } g_lights[4];                     // Offset:    0 Size:   128
            //      = 0x3f1eca58 0x3f2f0447 0x3ec4e209 0x3f800000 
            //        0x3f400000 0x3f195810 0x3ecf5c29 0x3f800000 
            //        0x3d819d24 0xbf7cc921 0x3e143569 0x3f800000 
            //        0x3e449ba6 0x3e8bc6a8 0x3e8ccccd 0x3f800000 
            //        0x3e6b9778 0x3f491bb5 0xbf130d52 0x3f800000 
            //        0x3e99999a 0x3e958106 0x3e645a1d 0x3f800000 
            //        0xbf1eca58 0xbf2f0447 0xbec4e209 0x3f800000 
            //        0x00000000 0x00000000 0x3dcccccd 0x3f800000 
            //   float4 g_ambient;                  // Offset:  128 Size:    16
            //      = 0x3efd2f1b 0x3eee147b 0x3f000000 0x3f800000 
            //   float g_occDimHeight;              // Offset:  144 Size:     4
            //      = 0x45160000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // ceveryframe                       cbuffer      NA          NA            cb0      1 
            // cimmutable                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            // mTransform               0   xyzw        3     NONE   float   xyzw
            // mTransform               1   xyzw        4     NONE   float   xyzw
            // mTransform               2   xyzw        5     NONE   float   xyzw
            // mTransform               3   xyzw        6     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_constantbuffer CB1[10], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyzw
            dcl_input v4.xyzw
            dcl_input v5.xyzw
            dcl_input v6.xyzw
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o2.xyzw
            dcl_temps 3
            mul r0.xyzw, v0.yyyy, v4.xyzw
            mad r0.xyzw, v0.xxxx, v3.xyzw, r0.xyzw
            mad r0.xyzw, v0.zzzz, v5.xyzw, r0.xyzw
            add r0.xyzw, r0.xyzw, v6.xyzw
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp4 r0.x, r0.xyzw, cb0[6].xyzw
            mov o1.xy, v2.xyxx
            mul r0.yzw, v1.yyyy, v4.xxyz
            mad r0.yzw, v1.xxxx, v3.xxyz, r0.yyzw
            mad r0.yzw, v1.zzzz, v5.xxyz, r0.yyzw
            dp3_sat r1.x, cb1[2].xyzx, r0.yzwy
            mul r1.xyzw, r1.xxxx, cb1[3].xyzw
            dp3_sat r2.x, cb1[0].xyzx, r0.yzwy
            mad r1.xyzw, r2.xxxx, cb1[1].xyzw, r1.xyzw
            dp3_sat r2.x, cb1[4].xyzx, r0.yzwy
            dp3_sat r0.y, cb1[6].xyzx, r0.yzwy
            mad r1.xyzw, r2.xxxx, cb1[5].xyzw, r1.xyzw
            mad r1.xyzw, r0.yyyy, cb1[7].xyzw, r1.xyzw
            add r1.xyzw, r1.xyzw, cb1[8].xyzw
            mad r0.y, -r0.x, l(0.000023), l(1.000000)
            mul r2.xyzw, r0.xxxx, l(0.000015, 0.000020, 0.000030, 0.000000)
            mad r0.xyzw, r0.yyyy, r1.xyzw, r2.xyzw
            div_sat r1.x, v0.y, cb1[9].x
            add r1.x, -r1.x, l(1.000000)
            mul o2.xyzw, r0.xyzw, r1.xxxx
            ret 
            // Approximately 29 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v2.xyzw
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xyzw, v2.xyzw
            ret 
            // Approximately 3 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepthTestWrite;
        RasterizerState = EnableMSAA;
    }

}

technique10 RenderSkybox
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer ceveryframe
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // ceveryframe                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXTURE                  0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[4], immediateIndexed
            dcl_input v0.xyz
            dcl_input v2.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o2.xyzw
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            mov o1.xy, v2.xyxx
            mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
            ret 
            // Approximately 9 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v2.xyzw
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xyzw, v2.xyzw
            ret 
            // Approximately 3 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthTestWrite;
        RasterizerState = EnableMSAA;
    }

}

technique10 RenderQuad
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer crarely
            // {
            //
            //   float4x4 g_mTreeMatrices[50];      // Offset:    0 Size:  3200
            //   uint g_iNumTrees;                  // Offset: 3200 Size:     4
            //
            // }
            //
            // cbuffer ceveryframe
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // crarely                           cbuffer      NA          NA            cb0      1 
            // ceveryframe                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // mTransform               0   xyzw        2     NONE   float   xyzw
            // mTransform               1   xyzw        3     NONE   float   xyzw
            // mTransform               2   xyzw        4     NONE   float   xyzw
            // mTransform               3   xyzw        5     NONE   float   xyzw
            // fOcc                     0   x           6     NONE   float   x   
            // SV_InstanceID            0   x           7   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[201], dynamicIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xy
            dcl_input v2.xyzw
            dcl_input v3.xyzw
            dcl_input v4.xyzw
            dcl_input v5.xyzw
            dcl_input v6.x
            dcl_input_sgv v7.x, instance_id
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyzw
            dcl_temps 3
            mul r0.xyzw, v0.yyyy, v3.xyzw
            mad r0.xyzw, v0.xxxx, v2.xyzw, r0.xyzw
            mad r0.xyzw, v0.zzzz, v4.xyzw, r0.xyzw
            add r0.xyzw, r0.xyzw, v5.xyzw
            udiv r1.x, null, v7.x, cb0[200].x
            imad r1.y, -r1.x, cb0[200].x, v7.x
            udiv null, r1.x, r1.x, l(3)
            utof o1.z, r1.x
            ishl r1.x, r1.y, l(2)
            dp4 r2.x, r0.xyzw, cb0[r1.x + 0].xyzw
            dp4 r2.y, r0.xyzw, cb0[r1.x + 1].xyzw
            dp4 r2.z, r0.xyzw, cb0[r1.x + 2].xyzw
            dp4 r2.w, r0.xyzw, cb0[r1.x + 3].xyzw
            dp4 o0.x, r2.xyzw, cb1[0].xyzw
            dp4 o0.y, r2.xyzw, cb1[1].xyzw
            dp4 o0.z, r2.xyzw, cb1[2].xyzw
            dp4 o0.w, r2.xyzw, cb1[3].xyzw
            dp4 o2.w, r2.xyzw, cb1[6].xyzw
            mov o1.xy, v1.xyxx
            mov o2.xyz, v6.xxxx
            ret 
            // Approximately 21 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cimmutable
            // {
            //
            //   struct
            //   {
            //       
            //       float4 direction;              // Offset:    0
            //       float4 color;                  // Offset:   16
            //
            //   } g_lights[4];                     // Offset:    0 Size:   128
            //      = 0x3f1eca58 0x3f2f0447 0x3ec4e209 0x3f800000 
            //        0x3f400000 0x3f195810 0x3ecf5c29 0x3f800000 
            //        0x3d819d24 0xbf7cc921 0x3e143569 0x3f800000 
            //        0x3e449ba6 0x3e8bc6a8 0x3e8ccccd 0x3f800000 
            //        0x3e6b9778 0x3f491bb5 0xbf130d52 0x3f800000 
            //        0x3e99999a 0x3e958106 0x3e645a1d 0x3f800000 
            //        0xbf1eca58 0xbf2f0447 0xbec4e209 0x3f800000 
            //        0x00000000 0x00000000 0x3dcccccd 0x3f800000 
            //   float4 g_ambient;                  // Offset:  128 Size:    16
            //      = 0x3efd2f1b 0x3eee147b 0x3f000000 0x3f800000 
            //   float g_occDimHeight;              // Offset:  144 Size:     4 [unused]
            //      = 0x45160000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cimmutable                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[9], immediateIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyz
            dcl_input v[3][2].xyzw
            dcl_temps 3
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyzw
            dcl_maxout 3
            add r0.xyz, -v[0][0].zxyz, v[1][0].zxyz
            add r1.xyz, -v[0][0].yzxy, v[2][0].yzxy
            mul r2.xyz, r0.xyzx, r1.xyzx
            mad r0.xyz, r0.zxyz, r1.yzxy, -r2.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            dp3_sat r0.w, cb0[0].xyzx, r0.xyzx
            dp3_sat r1.x, cb0[2].xyzx, r0.xyzx
            mul r1.xyz, r1.xxxx, cb0[3].xyzx
            mad r1.xyz, r0.wwww, cb0[1].xyzx, r1.xyzx
            dp3_sat r0.w, cb0[4].xyzx, r0.xyzx
            mad r1.xyz, r0.wwww, cb0[5].xyzx, r1.xyzx
            dp3_sat r0.x, cb0[6].xyzx, r0.xyzx
            mad r0.xyz, r0.xxxx, cb0[7].xyzx, r1.xyzx
            mul r1.xyz, l(0.000015, 0.000020, 0.000030, 0.000000), v[0][2].wwww
            mad r0.w, -v[0][2].w, l(0.000023), l(1.000000)
            add r0.xyz, r0.xyzx, cb0[8].xyzx
            mad r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
            mul r0.xyz, r0.xyzx, v[0][2].xyzx
            mov r0.w, l(0)
            loop 
              ige r1.x, r0.w, l(3)
              breakc_nz r1.x
              mov o0.xyzw, v[r0.w + 0][0].xyzw
              mov o1.xyz, v[r0.w + 0][1].xyzx
              mov o2.xyz, r0.xyzx
              mov o2.w, l(1.000000)
              emit 
              iadd r0.w, r0.w, l(1)
            endloop 
            cut 
            ret 
            // Approximately 33 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_tx2dArray                       texture  float4     2darray             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, v2.xyzx
            mov o0.w, r0.w
            ret 
            // Approximately 4 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = QuadAlphaBlendState;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepthTestWrite;
        RasterizerState = EnableMSAA;
    }

}

technique10 RenderGrass
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            // mTransform               0   xyzw        3     NONE   float   xyz 
            // mTransform               1   xyzw        4     NONE   float   xyz 
            // mTransform               2   xyzw        5     NONE   float   xyz 
            // mTransform               3   xyzw        6     NONE   float   xyz 
            // SV_VertexID              0   x           7   VERTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            // VERTID                   0   x           3     NONE    uint   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyz
            dcl_input v4.xyz
            dcl_input v5.xyz
            dcl_input v6.xyz
            dcl_input_sgv v7.x, vertex_id
            dcl_output o0.xyz
            dcl_output o1.xyz
            dcl_output o2.xy
            dcl_output o3.x
            dcl_temps 1
            mul r0.xyz, v0.yyyy, v4.xyzx
            mad r0.xyz, v0.xxxx, v3.xyzx, r0.xyzx
            mad r0.xyz, v0.zzzz, v5.xyzx, r0.xyzx
            add o0.xyz, r0.xyzx, v6.xyzx
            mul r0.xyz, v1.yyyy, v4.xyzx
            mad r0.xyz, v1.xxxx, v3.xyzx, r0.xyzx
            mad o1.xyz, v1.zzzz, v5.xyzx, r0.xyzx
            mov o2.xy, v2.xyxx
            mov o3.x, v7.x
            ret 
            // Approximately 10 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer ceveryframe
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //
            // }
            //
            // cbuffer cmultipleperframe
            // {
            //
            //   float g_GrassWidth;                // Offset:    0 Size:     4
            //   float g_GrassHeight;               // Offset:    4 Size:     4
            //   uint g_iGrassCoverage;             // Offset:    8 Size:     4
            //
            // }
            //
            // cbuffer cusercontrolled
            // {
            //
            //   float g_GrassMessiness;            // Offset:    0 Size:     4
            //
            // }
            //
            // cbuffer cimmutable
            // {
            //
            //   struct
            //   {
            //       
            //       float4 direction;              // Offset:    0
            //       float4 color;                  // Offset:   16
            //
            //   } g_lights[4];                     // Offset:    0 Size:   128
            //      = 0x3f1eca58 0x3f2f0447 0x3ec4e209 0x3f800000 
            //        0x3f400000 0x3f195810 0x3ecf5c29 0x3f800000 
            //        0x3d819d24 0xbf7cc921 0x3e143569 0x3f800000 
            //        0x3e449ba6 0x3e8bc6a8 0x3e8ccccd 0x3f800000 
            //        0x3e6b9778 0x3f491bb5 0xbf130d52 0x3f800000 
            //        0x3e99999a 0x3e958106 0x3e645a1d 0x3f800000 
            //        0xbf1eca58 0xbf2f0447 0xbec4e209 0x3f800000 
            //        0x00000000 0x00000000 0x3dcccccd 0x3f800000 
            //   float4 g_ambient;                  // Offset:  128 Size:    16
            //      = 0x3efd2f1b 0x3eee147b 0x3f000000 0x3f800000 
            //   float g_occDimHeight;              // Offset:  144 Size:     4 [unused]
            //      = 0x45160000 
            //
            // }
            //
            // cbuffer cgrassblade
            // {
            //
            //   float3 g_positions[6];             // Offset:    0 Size:    92
            //      = 0xbf800000 0x00000000 0x00000000 0x00000000 
            //        0xbf800000 0x40000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x40000000 0x00000000 0x00000000 
            //        0xbf800000 0x00000000 0x00000000 0x00000000 
            //        0xbf800000 0x40000000 0x00000000 
            //   float2 g_texcoords[6];             // Offset:   96 Size:    88
            //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_tx2dArray                       texture  float4     2darray             t0      1 
            // g_txRandom                        texture  float4          1d             t1      1 
            // ceveryframe                       cbuffer      NA          NA            cb0      1 
            // cmultipleperframe                 cbuffer      NA          NA            cb1      1 
            // cusercontrolled                   cbuffer      NA          NA            cb2      1 
            // cimmutable                        cbuffer      NA          NA            cb3      1 
            // cgrassblade                       cbuffer      NA          NA            cb4      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            // VERTID                   0   x           3     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[1], immediateIndexed
            dcl_constantbuffer CB3[9], immediateIndexed
            dcl_constantbuffer CB4[12], dynamicIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_resource_texture1d (float,float,float,float) t1
            dcl_input v[3][0].xyz
            dcl_input v[3][1].xyz
            dcl_input v[3][2].xy
            dcl_input v[3][3].x
            dcl_temps 14
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyzw
            dcl_maxout 90
            add r0.xyz, v[1][0].xyzx, v[0][0].xyzx
            add r0.xyz, r0.xyzx, v[2][0].xyzx
            mul r1.xyz, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
            add r2.xyz, v[1][1].yzxy, v[0][1].yzxy
            add r2.xyz, r2.xyzx, v[2][1].yzxy
            mul r2.xyz, r2.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
            add r0.yw, v[1][2].xxxy, v[0][2].xxxy
            add r0.yw, r0.yyyw, v[2][2].xxxy
            mul r3.xy, r0.ywyy, l(0.333333, 0.333333, 0.000000, 0.000000)
            iadd r0.y, v[1][3].x, v[0][3].x
            iadd r0.y, r0.y, v[2][3].x
            mov r3.z, l(4.000000)
            sample_l r3.xyzw, r3.xyzx, t0.xyzw, s0, l(0.000000)
            utof r0.w, cb1[0].z
            mul r3.xyzw, r3.xyzw, r0.wwww
            utof r0.y, r0.y
            dp3_sat r0.w, cb3[0].yzxy, r2.xyzx
            dp3_sat r1.w, cb3[2].yzxy, r2.xyzx
            mul r4.xyzw, r1.wwww, cb3[3].xyzw
            mad r4.xyzw, r0.wwww, cb3[1].xyzw, r4.xyzw
            dp3_sat r0.w, cb3[4].yzxy, r2.xyzx
            mad r4.xyzw, r0.wwww, cb3[5].xyzw, r4.xyzw
            dp3_sat r0.w, cb3[6].yzxy, r2.xyzx
            mad r4.xyzw, r0.wwww, cb3[7].xyzw, r4.xyzw
            add r4.xyzw, r4.xyzw, cb3[8].xyzw
            mov r5.w, l(1.000000)
            mov r6.y, r2.z
            mov r7.y, r2.x
            mov r8.y, r2.y
            mov r9.w, l(1.000000)
            mov r0.w, l(0)
            loop 
              ge r1.w, r0.w, r3.x
              breakc_nz r1.w
              add r0.w, r0.w, l(1.000000)
              mad r10.xy, r0.xzxx, l(0.333333, 0.333333, 0.000000, 0.000000), r0.wwww
              mul r10.xy, r10.xyxx, l(0.003333, 0.003333, 0.000000, 0.000000)
              sample_l r11.xyzw, r10.x, t1.xyzw, s0, l(0.000000)
              sample_l r10.xyzw, r10.y, t1.xyzw, s0, l(0.000000)
              dp3 r1.w, r10.xyzx, r10.xyzx
              rsq r1.w, r1.w
              mul r1.w, r1.w, r10.x
              mul r1.w, r1.w, cb2[0].x
              mul r10.xyz, r2.xyzx, r11.zxyz
              mad r10.xyz, r11.yzxy, r2.yzxy, -r10.xyzx
              dp3 r2.w, r10.xyzx, r10.xyzx
              rsq r2.w, r2.w
              mul r10.xyz, r2.wwww, r10.xyzx
              add r2.w, r0.w, r0.y
              ftou r2.w, r2.w
              mad r10.xyz, r1.wwww, r10.xyzx, r1.xyzx
              utof r1.w, r2.w
              mul r1.w, r1.w, l(0.003333)
              sample_l r11.xyzw, r1.w, t1.xyzw, s0, l(0.000000)
              mul r12.xyz, r2.zxyz, r11.yzxy
              mad r11.xyz, r11.xyzx, r2.xyzx, -r12.xyzx
              dp3 r1.w, r11.xyzx, r11.xyzx
              rsq r1.w, r1.w
              mul r11.xyz, r1.wwww, r11.xyzx
              mul r12.xyz, r2.xyzx, r11.xyzx
              mad r12.xyz, r11.zxyz, r2.yzxy, -r12.xyzx
              dp3 r1.w, r12.xyzx, r12.xyzx
              rsq r1.w, r1.w
              mul r12.xyz, r1.wwww, r12.xyzx
              dp3 r1.w, r10.xyzx, cb0[6].xyzx
              mad r2.w, -r1.w, l(0.000023), l(1.000000)
              mul r13.xyzw, r1.wwww, l(0.000015, 0.000020, 0.000030, 0.000000)
              mad r13.xyzw, r2.wwww, r4.xyzw, r13.xyzw
              mov r6.x, r12.x
              mov r6.z, r11.y
              mov r6.w, r10.x
              mov r7.x, r12.y
              mov r7.z, r11.z
              mov r7.w, r10.y
              mov r8.x, r12.z
              mov r8.z, r11.x
              mov r8.w, r10.z
              mov r1.w, l(0)
              loop 
                ige r2.w, r1.w, l(6)
                breakc_nz r2.w
                mul r5.xy, cb1[0].xyxx, cb4[r1.w + 0].xyxx
                mov r5.z, cb4[r1.w + 0].z
                dp4 r9.x, r5.xyzw, r6.xyzw
                dp4 r9.y, r5.xyzw, r7.xyzw
                dp4 r9.z, r5.xyzw, r8.xyzw
                dp4 r2.w, r9.xyzw, cb0[0].xyzw
                dp4 r5.x, r9.xyzw, cb0[1].xyzw
                dp4 r5.y, r9.xyzw, cb0[2].xyzw
                dp4 r5.z, r9.xyzw, cb0[3].xyzw
                mov o0.x, r2.w
                mov o0.y, r5.x
                mov o0.z, r5.y
                mov o0.w, r5.z
                mov o1.xy, cb4[r1.w + 6].xyxx
                mov o1.z, l(0)
                mov o2.xyzw, r13.xyzw
                emit 
                iadd r1.w, r1.w, l(1)
              endloop 
              cut 
            endloop 
            mov r5.w, l(1.000000)
            mov r6.y, r2.z
            mov r7.y, r2.x
            mov r9.w, l(1.000000)
            mov r10.x, l(0)
            loop 
              ge r0.w, r10.x, r3.y
              breakc_nz r0.w
              add r10.xy, r10.xxxx, l(1.000000, 6.000000, 0.000000, 0.000000)
              mad r10.zw, r0.xxxz, l(0.000000, 0.000000, 0.333333, 0.333333), r10.yyyy
              mul r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.003333, 0.003333)
              sample_l r11.xyzw, r10.z, t1.xyzw, s0, l(0.000000)
              sample_l r12.xyzw, r10.w, t1.xyzw, s0, l(0.000000)
              dp3 r0.w, r12.xyzx, r12.xyzx
              rsq r0.w, r0.w
              mul r0.w, r0.w, r12.x
              mul r0.w, r0.w, cb2[0].x
              mul r12.xyz, r2.xyzx, r11.zxyz
              mad r11.xyz, r11.yzxy, r2.yzxy, -r12.xyzx
              dp3 r1.w, r11.xyzx, r11.xyzx
              rsq r1.w, r1.w
              mul r11.xyz, r1.wwww, r11.xyzx
              add r1.w, r0.y, r10.y
              ftou r1.w, r1.w
              mad r10.yzw, r0.wwww, r11.xxyz, r1.xxyz
              utof r0.w, r1.w
              mul r0.w, r0.w, l(0.003333)
              sample_l r11.xyzw, r0.w, t1.xyzw, s0, l(0.000000)
              mul r12.xyz, r2.zxyz, r11.yzxy
              mad r11.xyz, r11.xyzx, r2.xyzx, -r12.xyzx
              dp3 r0.w, r11.xyzx, r11.xyzx
              rsq r0.w, r0.w
              mul r11.xyz, r0.wwww, r11.xyzx
              mul r12.xyz, r2.xyzx, r11.xyzx
              mad r12.xyz, r11.zxyz, r2.yzxy, -r12.xyzx
              dp3 r0.w, r12.xyzx, r12.xyzx
              rsq r0.w, r0.w
              mul r12.xyz, r0.wwww, r12.xyzx
              dp3 r0.w, r10.yzwy, cb0[6].xyzx
              mad r1.w, -r0.w, l(0.000023), l(1.000000)
              mul r13.xyzw, r0.wwww, l(0.000015, 0.000020, 0.000030, 0.000000)
              mad r13.xyzw, r1.wwww, r4.xyzw, r13.xyzw
              mov r6.x, r12.x
              mov r6.z, r11.y
              mov r6.w, r10.y
              mov r7.x, r12.y
              mov r7.z, r11.z
              mov r7.w, r10.z
              mov r8.x, r12.z
              mov r8.z, r11.x
              mov r8.w, r10.w
              mov r0.w, l(0)
              loop 
                ige r1.w, r0.w, l(6)
                breakc_nz r1.w
                mul r5.xy, cb1[0].xyxx, cb4[r0.w + 0].xyxx
                mov r5.z, cb4[r0.w + 0].z
                dp4 r9.x, r5.xyzw, r6.xyzw
                dp4 r9.y, r5.xyzw, r7.xyzw
                dp4 r9.z, r5.xyzw, r8.xyzw
                dp4 r1.w, r9.xyzw, cb0[0].xyzw
                dp4 r2.w, r9.xyzw, cb0[1].xyzw
                dp4 r3.x, r9.xyzw, cb0[2].xyzw
                dp4 r5.x, r9.xyzw, cb0[3].xyzw
                mov o0.x, r1.w
                mov o0.y, r2.w
                mov o0.z, r3.x
                mov o0.w, r5.x
                mov o1.xy, cb4[r0.w + 6].xyxx
                mov o1.z, l(1.000000)
                mov o2.xyzw, r13.xyzw
                emit 
                iadd r0.w, r0.w, l(1)
              endloop 
              cut 
            endloop 
            mov r5.w, l(1.000000)
            mov r6.y, r2.z
            mov r7.y, r2.x
            mov r9.w, l(1.000000)
            mov r3.x, l(0)
            loop 
              ge r0.w, r3.x, r3.z
              breakc_nz r0.w
              add r3.xy, r3.xxxx, l(1.000000, 11.000000, 0.000000, 0.000000)
              mad r10.xy, r0.xzxx, l(0.333333, 0.333333, 0.000000, 0.000000), r3.yyyy
              mul r10.xy, r10.xyxx, l(0.003333, 0.003333, 0.000000, 0.000000)
              sample_l r11.xyzw, r10.x, t1.xyzw, s0, l(0.000000)
              sample_l r10.xyzw, r10.y, t1.xyzw, s0, l(0.000000)
              dp3 r0.w, r10.xyzx, r10.xyzx
              rsq r0.w, r0.w
              mul r0.w, r0.w, r10.x
              mul r0.w, r0.w, cb2[0].x
              mul r10.xyz, r2.xyzx, r11.zxyz
              mad r10.xyz, r11.yzxy, r2.yzxy, -r10.xyzx
              dp3 r1.w, r10.xyzx, r10.xyzx
              rsq r1.w, r1.w
              mul r10.xyz, r1.wwww, r10.xyzx
              add r1.w, r0.y, r3.y
              ftou r1.w, r1.w
              mad r10.xyz, r0.wwww, r10.xyzx, r1.xyzx
              utof r0.w, r1.w
              mul r0.w, r0.w, l(0.003333)
              sample_l r11.xyzw, r0.w, t1.xyzw, s0, l(0.000000)
              mul r12.xyz, r2.zxyz, r11.yzxy
              mad r11.xyz, r11.xyzx, r2.xyzx, -r12.xyzx
              dp3 r0.w, r11.xyzx, r11.xyzx
              rsq r0.w, r0.w
              mul r11.xyz, r0.wwww, r11.xyzx
              mul r12.xyz, r2.xyzx, r11.xyzx
              mad r12.xyz, r11.zxyz, r2.yzxy, -r12.xyzx
              dp3 r0.w, r12.xyzx, r12.xyzx
              rsq r0.w, r0.w
              mul r12.xyz, r0.wwww, r12.xyzx
              dp3 r0.w, r10.xyzx, cb0[6].xyzx
              mad r1.w, -r0.w, l(0.000023), l(1.000000)
              mul r13.xyzw, r0.wwww, l(0.000015, 0.000020, 0.000030, 0.000000)
              mad r13.xyzw, r1.wwww, r4.xyzw, r13.xyzw
              mov r6.x, r12.x
              mov r6.z, r11.y
              mov r6.w, r10.x
              mov r7.x, r12.y
              mov r7.z, r11.z
              mov r7.w, r10.y
              mov r8.x, r12.z
              mov r8.z, r11.x
              mov r8.w, r10.z
              mov r0.w, l(0)
              loop 
                ige r1.w, r0.w, l(6)
                breakc_nz r1.w
                mul r5.xy, cb1[0].xyxx, cb4[r0.w + 0].xyxx
                mov r5.z, cb4[r0.w + 0].z
                dp4 r9.x, r5.xyzw, r6.xyzw
                dp4 r9.y, r5.xyzw, r7.xyzw
                dp4 r9.z, r5.xyzw, r8.xyzw
                dp4 r1.w, r9.xyzw, cb0[0].xyzw
                dp4 r2.w, r9.xyzw, cb0[1].xyzw
                dp4 r3.y, r9.xyzw, cb0[2].xyzw
                dp4 r5.x, r9.xyzw, cb0[3].xyzw
                mov o0.x, r1.w
                mov o0.y, r2.w
                mov o0.z, r3.y
                mov o0.w, r5.x
                mov o1.xy, cb4[r0.w + 6].xyxx
                mov o1.z, l(2.000000)
                mov o2.xyzw, r13.xyzw
                emit 
                iadd r0.w, r0.w, l(1)
              endloop 
              cut 
            endloop 
            mov r5.w, l(1.000000)
            mov r6.y, r2.z
            mov r7.y, r2.x
            mov r9.w, l(1.000000)
            mov r3.x, l(0)
            loop 
              ge r0.w, r3.x, r3.w
              breakc_nz r0.w
              add r3.xy, r3.xxxx, l(1.000000, 16.000000, 0.000000, 0.000000)
              mad r10.xy, r0.xzxx, l(0.333333, 0.333333, 0.000000, 0.000000), r3.yyyy
              mul r10.xy, r10.xyxx, l(0.003333, 0.003333, 0.000000, 0.000000)
              sample_l r11.xyzw, r10.x, t1.xyzw, s0, l(0.000000)
              sample_l r10.xyzw, r10.y, t1.xyzw, s0, l(0.000000)
              dp3 r0.w, r10.xyzx, r10.xyzx
              rsq r0.w, r0.w
              mul r0.w, r0.w, r10.x
              mul r0.w, r0.w, cb2[0].x
              mul r10.xyz, r2.xyzx, r11.zxyz
              mad r10.xyz, r11.yzxy, r2.yzxy, -r10.xyzx
              dp3 r1.w, r10.xyzx, r10.xyzx
              rsq r1.w, r1.w
              mul r10.xyz, r1.wwww, r10.xyzx
              add r1.w, r0.y, r3.y
              ftou r1.w, r1.w
              mad r10.xyz, r0.wwww, r10.xyzx, r1.xyzx
              utof r0.w, r1.w
              mul r0.w, r0.w, l(0.003333)
              sample_l r11.xyzw, r0.w, t1.xyzw, s0, l(0.000000)
              mul r12.xyz, r2.zxyz, r11.yzxy
              mad r11.xyz, r11.xyzx, r2.xyzx, -r12.xyzx
              dp3 r0.w, r11.xyzx, r11.xyzx
              rsq r0.w, r0.w
              mul r11.xyz, r0.wwww, r11.xyzx
              mul r12.xyz, r2.xyzx, r11.xyzx
              mad r12.xyz, r11.zxyz, r2.yzxy, -r12.xyzx
              dp3 r0.w, r12.xyzx, r12.xyzx
              rsq r0.w, r0.w
              mul r12.xyz, r0.wwww, r12.xyzx
              dp3 r0.w, r10.xyzx, cb0[6].xyzx
              mad r1.w, -r0.w, l(0.000023), l(1.000000)
              mul r13.xyzw, r0.wwww, l(0.000015, 0.000020, 0.000030, 0.000000)
              mad r13.xyzw, r1.wwww, r4.xyzw, r13.xyzw
              mov r6.x, r12.x
              mov r6.z, r11.y
              mov r6.w, r10.x
              mov r7.x, r12.y
              mov r7.z, r11.z
              mov r7.w, r10.y
              mov r8.x, r12.z
              mov r8.z, r11.x
              mov r8.w, r10.z
              mov r0.w, l(0)
              loop 
                ige r1.w, r0.w, l(6)
                breakc_nz r1.w
                mul r5.xy, cb1[0].xyxx, cb4[r0.w + 0].xyxx
                mov r5.z, cb4[r0.w + 0].z
                dp4 r9.x, r5.xyzw, r6.xyzw
                dp4 r9.y, r5.xyzw, r7.xyzw
                dp4 r9.z, r5.xyzw, r8.xyzw
                dp4 r1.w, r9.xyzw, cb0[0].xyzw
                dp4 r2.w, r9.xyzw, cb0[1].xyzw
                dp4 r3.y, r9.xyzw, cb0[2].xyzw
                dp4 r3.z, r9.xyzw, cb0[3].xyzw
                mov o0.x, r1.w
                mov o0.y, r2.w
                mov o0.z, r3.y
                mov o0.w, r3.z
                mov o1.xy, cb4[r0.w + 6].xyxx
                mov o1.z, l(3.000000)
                mov o2.xyzw, r13.xyzw
                emit 
                iadd r0.w, r0.w, l(1)
              endloop 
              cut 
            endloop 
            ret 
            // Approximately 331 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_tx2dArray                       texture  float4     2darray             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, v2.xyzx
            mov o0.w, r0.w
            ret 
            // Approximately 4 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = QuadAlphaBlendState;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepthTestWrite;
        RasterizerState = EnableMSAA;
    }

}

