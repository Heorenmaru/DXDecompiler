//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cb0
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mInvView;                // Offset:   64, size:   64
    float   g_fGlobalTime;              // Offset:  128, size:    4
    float   g_fElapsedTime;             // Offset:  132, size:    4
    uint    g_iTexSize;                 // Offset:  136, size:    4
}

cbuffer cb1
{
    float   g_fParticleRad = 0.5;       // Offset:    0, size:    4
    float   g_fParticleMass = 1;        // Offset:    4, size:    4
    float   g_fG = 6.67300035e-011;     // Offset:    8, size:    4
}

cbuffer cbImmutable
{
    float   step_size = 0.00999999978;  // Offset:    0, size:    4
    float   tex_size = 100;             // Offset:    4, size:    4
    float3  g_positions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:   16, size:   60
    float2  g_texcoords[4] = { 0, 0, 1, 0, 0, 1, 1, 1 };// Offset:   80, size:   56
    float3  v_positions[6] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, -1, -1, 0, 1, 1, 0, 1, -1, 0 };// Offset:  144, size:   92
    float2  v_texcoords[6] = { 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 };// Offset:  240, size:   88
}

//
// 10 local object(s)
//
Texture2D g_txDiffuse;
Texture2DArray g_txParticleData;
Texture2D g_txForce;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
BlendState ParticleBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState AdvanceBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    BlendEnable[1] = bool(FALSE /* 0 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};

//
// 3 technique(s)
//
technique10 RenderParticles
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4 [unused]
            //   uint g_iTexSize;                   // Offset:  136 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_txParticleData                  texture  float4     2darray             t0      1 
            // g_txForce                         texture  float4          2d             t1      1 
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // COLOR                    0   xyzw        0     NONE   float   xyzw
            // SV_VERTEXID              0   x           1   VERTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[9], immediateIndexed
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input v0.xyzw
            dcl_input_sgv v1.x, vertex_id
            dcl_output o0.xyz
            dcl_output o1.xyzw
            dcl_temps 2
            udiv r0.x, r1.x, v1.x, cb0[8].z
            mov r1.y, r0.x
            mov r1.zw, l(0,0,0,0)
            ld r0.xyzw, r1.xyww, t0.xyzw
            ld r1.xyzw, r1.xyzw, t1.xyzw
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            mul r0.w, r0.w, l(0.000000)
            mov o0.xyz, r0.xyzx
            add r1.xyzw, v0.xyzw, l(-1.000000, -0.100000, -0.100000, -1.000000)
            mad o1.xyzw, r0.wwww, r1.xyzw, l(1.000000, 0.100000, 0.100000, 1.000000)
            ret 
            // Approximately 12 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4 [unused]
            //   uint g_iTexSize;                   // Offset:  136 Size:     4 [unused]
            //
            // }
            //
            // cbuffer cb1
            // {
            //
            //   float g_fParticleRad;              // Offset:    0 Size:     4
            //      = 0x3f000000 
            //   float g_fParticleMass;             // Offset:    4 Size:     4 [unused]
            //      = 0x3f800000 
            //   float g_fG;                        // Offset:    8 Size:     4 [unused]
            //      = 0x2e92bda7 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float step_size;                   // Offset:    0 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float tex_size;                    // Offset:    4 Size:     4 [unused]
            //      = 0x42c80000 
            //   float3 g_positions[4];             // Offset:   16 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   80 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float3 v_positions[6];             // Offset:  144 Size:    92 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 v_texcoords[6];             // Offset:  240 Size:    88 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cb1                               cbuffer      NA          NA            cb1      1 
            // cbImmutable                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // TEXCOORD                 0   xy          0     NONE   float   xy  
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[9], dynamicIndexed
            dcl_input v[1][0].xyz
            dcl_input v[1][1].xyzw
            dcl_temps 3
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xy
            dcl_output o1.xyzw
            dcl_output_siv o2.xyzw, position
            dcl_maxout 4
            mov r0.w, l(1.000000)
            mov r1.x, l(0)
            loop 
              ige r1.y, r1.x, l(4)
              breakc_nz r1.y
              mul r1.yzw, cb1[0].xxxx, cb2[r1.x + 1].xxyz
              dp3 r2.x, r1.yzwy, cb0[4].xyzx
              dp3 r2.y, r1.yzwy, cb0[5].xyzx
              dp3 r2.z, r1.yzwy, cb0[6].xyzx
              add r0.xyz, r2.xyzx, v[0][0].xyzx
              dp4 r1.y, r0.xyzw, cb0[0].xyzw
              dp4 r1.z, r0.xyzw, cb0[1].xyzw
              dp4 r1.w, r0.xyzw, cb0[2].xyzw
              dp4 r0.x, r0.xyzw, cb0[3].xyzw
              mov o0.xy, cb2[r1.x + 5].xyxx
              mov o1.xyzw, v[0][1].xyzw
              mov o2.x, r1.y
              mov o2.y, r1.z
              mov o2.z, r1.w
              mov o2.w, r0.x
              emit 
              iadd r1.x, r1.x, l(1)
            endloop 
            cut 
            ret 
            // Approximately 25 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // TEXCOORD                 0   xy          0     NONE   float   xy  
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v0.xy
            dcl_input_ps linear v1.xyzw
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v0.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xyzw, v1.xyzw
            ret 
            // Approximately 3 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = ParticleBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 AccumulateForces
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4 [unused]
            //   uint g_iTexSize;                   // Offset:  136 Size:     4
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float step_size;                   // Offset:    0 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float tex_size;                    // Offset:    4 Size:     4 [unused]
            //      = 0x42c80000 
            //   float3 g_positions[4];             // Offset:   16 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   80 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float3 v_positions[6];             // Offset:  144 Size:    92
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 v_texcoords[6];             // Offset:  240 Size:    88
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_VERTEXID              0   x           0   VERTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POS                      0   xyz         0     NONE   float   xyz 
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[9], immediateIndexed
            dcl_constantbuffer CB1[21], dynamicIndexed
            dcl_input_sgv v0.x, vertex_id
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output_siv o2.xyzw, position
            dcl_temps 3
            mov o0.xz, l(0,0,0,0)
            utof r0.x, cb0[8].z
            udiv r1.x, r2.x, v0.x, l(6)
            utof r0.y, r1.x
            div o0.y, r0.y, r0.x
            mov o1.xy, cb1[r2.x + 15].xyxx
            mov o2.xyz, cb1[r2.x + 9].xyzx
            mov o2.w, l(1.000000)
            ret 
            // Approximately 9 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb1
            // {
            //
            //   float g_fParticleRad;              // Offset:    0 Size:     4
            //      = 0x3f000000 
            //   float g_fParticleMass;             // Offset:    4 Size:     4
            //      = 0x3f800000 
            //   float g_fG;                        // Offset:    8 Size:     4
            //      = 0x2e92bda7 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float step_size;                   // Offset:    0 Size:     4
            //      = 0x3c23d70a 
            //   float tex_size;                    // Offset:    4 Size:     4
            //      = 0x42c80000 
            //   float3 g_positions[4];             // Offset:   16 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   80 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float3 v_positions[6];             // Offset:  144 Size:    92 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 v_texcoords[6];             // Offset:  240 Size:    88 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_txParticleData                  texture  float4     2darray             t0      1 
            // cb1                               cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POS                      0   xyz         0     NONE   float    y  
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v0.y
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 5
            mov r0.xy, v1.xyxx
            mov r0.z, l(0)
            sample_l r0.xyzw, r0.xyzx, t0.xyzw, s0, l(0.000000)
            mul r0.w, cb0[0].x, l(0.100000)
            mul r1.x, cb0[0].y, cb0[0].y
            mov r2.y, v0.y
            mov r2.z, l(0)
            mov r1.yzw, l(0,0,0,0)
            mov r2.w, l(0)
            loop 
              utof r3.x, r2.w
              ge r3.y, r3.x, cb1[0].y
              breakc_nz r3.y
              mul r2.x, r3.x, cb1[0].x
              sample_l r3.xyzw, r2.xyzx, t0.xyzw, s0, l(0.000000)
              add r3.xyz, -r0.xyzx, r3.xyzx
              dp3 r2.x, r3.xyzx, r3.xyzx
              lt r3.w, l(0.000000), r2.x
              sqrt r4.x, r2.x
              max r4.x, r0.w, r4.x
              div r3.xyz, r3.xyzx, r4.xxxx
              mul r3.xyz, r3.xyzx, cb0[0].zzzz
              div r2.x, r1.x, r2.x
              mad r3.xyz, r3.xyzx, r2.xxxx, r1.yzwy
              movc r1.yzw, r3.wwww, r3.xxyz, r1.yyzw
              iadd r2.w, r2.w, l(1)
            endloop 
            mov o0.xyz, r1.yzwy
            mov o0.w, l(0)
            ret 
            // Approximately 30 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AdditiveBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 AdvanceParticles
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // COLOR                    0   xyzw        0     NONE   float       
            // SV_VERTEXID              0   x           1   VERTID    uint       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POS                      0   xyz         0     NONE   float   xyz 
            //
            vs_4_0
            dcl_output o0.xyz
            mov o0.xyz, l(0,0,0,0)
            ret 
            // Approximately 2 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbImmutable
            // {
            //
            //   float step_size;                   // Offset:    0 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float tex_size;                    // Offset:    4 Size:     4 [unused]
            //      = 0x42c80000 
            //   float3 g_positions[4];             // Offset:   16 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   80 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float3 v_positions[6];             // Offset:  144 Size:    92 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 v_texcoords[6];             // Offset:  240 Size:    88 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbImmutable                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POS                      0   xyz         0     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // TEXCOORD                 0   xy          0     NONE   float   xy  
            // RENDERTARGET             0   x           1     NONE    uint   x   
            // SV_RENDERTARGETARRAYINDEX     0    y          1  RTINDEX    uint    y  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[9], dynamicIndexed
            dcl_input v[1][0].xyz
            dcl_temps 1
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xy
            dcl_output o1.x
            dcl_output_siv o1.y, rendertarget_array_index
            dcl_output_siv o2.xyzw, position
            dcl_maxout 8
            mov r0.x, l(0)
            loop 
              ige r0.y, r0.x, l(4)
              breakc_nz r0.y
              mov o0.xy, cb0[r0.x + 5].xyxx
              mov o1.x, l(0)
              mov o2.xyz, cb0[r0.x + 1].xyzx
              mov o2.w, l(1.000000)
              mov o1.y, l(0)
              emit 
              iadd r0.x, r0.x, l(1)
            endloop 
            cut 
            mov r0.x, l(0)
            loop 
              ige r0.y, r0.x, l(4)
              breakc_nz r0.y
              mov o0.xy, cb0[r0.x + 5].xyxx
              mov o1.x, l(1)
              mov o2.xyz, cb0[r0.x + 1].xyzx
              mov o2.w, l(1.000000)
              mov o1.y, l(1)
              emit 
              iadd r0.x, r0.x, l(1)
            endloop 
            cut 
            ret 
            // Approximately 27 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4
            //   uint g_iTexSize;                   // Offset:  136 Size:     4 [unused]
            //
            // }
            //
            // cbuffer cb1
            // {
            //
            //   float g_fParticleRad;              // Offset:    0 Size:     4 [unused]
            //      = 0x3f000000 
            //   float g_fParticleMass;             // Offset:    4 Size:     4
            //      = 0x3f800000 
            //   float g_fG;                        // Offset:    8 Size:     4 [unused]
            //      = 0x2e92bda7 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_txParticleData                  texture  float4     2darray             t0      1 
            // g_txForce                         texture  float4          2d             t1      1 
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cb1                               cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // TEXCOORD                 0   xy          0     NONE   float   xy  
            // RENDERTARGET             0   x           1     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[9], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v0.xy
            dcl_input_ps constant v1.x
            dcl_output o0.xyzw
            dcl_temps 3
            mov r0.xy, v0.xyxx
            mov r0.z, l(0)
            sample_l r0.xyzw, r0.xyzx, t0.xyzw, s0, l(0.000000)
            mov r1.xy, v0.xyxx
            mov r1.z, l(1.000000)
            sample_l r1.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
            sample_l r2.xyzw, v0.xyxx, t1.xyzw, s0, l(0.000000)
            div r2.xyz, r2.xyzx, cb1[0].yyyy
            mad r1.xyz, r2.xyzx, cb0[8].yyyy, r1.xyzx
            mad r0.xyz, r1.xyzx, cb0[8].yyyy, r0.xyzx
            ult r0.w, l(0), v1.x
            movc o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
            mov o0.w, l(0)
            ret 
            // Approximately 14 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AdvanceBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

