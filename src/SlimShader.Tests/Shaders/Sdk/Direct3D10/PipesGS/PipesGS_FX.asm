//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cb0
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float   g_fGlobalTime;              // Offset:   64, size:    4
    float   g_fUndulate;                // Offset:   68, size:    4
    float4  vMaterialSpec;              // Offset:   80, size:   16
    float4  vMaterialDiff;              // Offset:   96, size:   16
}

cbuffer cbImmutable
{
    float3  g_positions[7] = { 1, 0, 0, 0.5, 0.865999997, 0, -0.5, 0.865999997, 0, -1, 0, 0, -0.5, -0.865999997, 0, 0.5, -0.865999997, 0, 1, 0, 0 };// Offset:    0, size:  108
    float3  g_leafpositions[4] = { -1.5, 2, 0, 1.5, 2, 0, -1.5, 0, 0, 1.5, 0, 0 };// Offset:  112, size:   60
    float2  g_leaftexcoords[4] = { 0, 0, 1, 0, 0, 1, 1, 1 };// Offset:  176, size:   56
    float3  g_vLightDir = { -0.300000012, 0.905600011, -0.300000012 };// Offset:  240, size:   12
}

cbuffer cbUIUpdates
{
    float   g_fLifeSpan;                // Offset:    0, size:    4
    float   g_fLifeSpanVar;             // Offset:    4, size:    4
    float   g_fRadiusMin;               // Offset:    8, size:    4
    float   g_fRadiusMax;               // Offset:   12, size:    4
    float   g_fGrowTime;                // Offset:   16, size:    4
    float   g_fStepSize;                // Offset:   20, size:    4
    float   g_fTurnRate;                // Offset:   24, size:    4
    float   g_fTurnSpeed;               // Offset:   28, size:    4
    float   g_fLeafRate;                // Offset:   32, size:    4
    float   g_fShrinkTime;              // Offset:   36, size:    4
    uint    g_uMaxFaces;                // Offset:   40, size:    4
}

//
// 15 local object(s)
//
Texture2DArray g_tx2dArray;
Texture2D g_txDiffuse;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState g_samClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
Texture1D g_txRandom;
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
};
Buffer  g_adjBuffer;
Buffer  g_triCenterBuffer;
RasterizerState DisableCulling
{
    CullMode = uint(NONE /* 1 */);
};
RasterizerState EnableCulling
{
    CullMode = uint(BACK /* 3 */);
};
DepthStencilState DisableDepthTestWrite
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState EnableDepthTestWrite
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cb0
        // {
        //
        //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
        //   float g_fGlobalTime;               // Offset:   64 Size:     4
        //   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
        //   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
        //   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
        //
        // }
        //
        // cbuffer cbUIUpdates
        // {
        //
        //   float g_fLifeSpan;                 // Offset:    0 Size:     4
        //   float g_fLifeSpanVar;              // Offset:    4 Size:     4 [unused]
        //   float g_fRadiusMin;                // Offset:    8 Size:     4 [unused]
        //   float g_fRadiusMax;                // Offset:   12 Size:     4 [unused]
        //   float g_fGrowTime;                 // Offset:   16 Size:     4 [unused]
        //   float g_fStepSize;                 // Offset:   20 Size:     4
        //   float g_fTurnRate;                 // Offset:   24 Size:     4
        //   float g_fTurnSpeed;                // Offset:   28 Size:     4
        //   float g_fLeafRate;                 // Offset:   32 Size:     4
        //   float g_fShrinkTime;               // Offset:   36 Size:     4 [unused]
        //   uint g_uMaxFaces;                  // Offset:   40 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samPoint                        sampler      NA          NA             s0      1 
        // g_txRandom                        texture  float4          1d             t0      1 
        // g_triCenterBuffer                 texture  float4         buf             t1      1 
        // cb0                               cbuffer      NA          NA            cb0      1 
        // cbUIUpdates                       cbuffer      NA          NA            cb1      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // DIRECTION                0   xyz         2     NONE   float   xyz 
        // TIMERNTYPE               0   xy          3     NONE   float   xy  
        // PIPELIFE                 0     z         3     NONE   float     z 
        // TARGETDIR                0   xyz         4     NONE   float   xyz 
        // CURRENTFACE              0   x           5     NONE    uint   x   
        // LEAVES                   0    y          5     NONE    uint    y  
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // DIRECTION                0   xyz         2     NONE   float   xyz 
        // TIMERNTYPE               0   xy          3     NONE   float   xy  
        // PIPELIFE                 0     z         3     NONE   float     z 
        // TARGETDIR                0   xyz         4     NONE   float   xyz 
        // CURRENTFACE              0   x           5     NONE    uint   x   
        // LEAVES                   0    y          5     NONE    uint    y  
        //
        gs_4_0
        dcl_constantbuffer CB0[5], immediateIndexed
        dcl_constantbuffer CB1[3], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_resource_buffer (float,float,float,float) t1
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xyz
        dcl_input v[1][3].xy
        dcl_input v[1][3].z
        dcl_input v[1][4].xyz
        dcl_input v[1][5].x
        dcl_input v[1][5].y
        dcl_temps 6
        dcl_inputprimitive point 
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xyz
        dcl_output o3.xy
        dcl_output o3.z
        dcl_output o4.xyz
        dcl_output o5.x
        dcl_output o5.y
        dcl_maxout 2
        eq r0.x, l(0.000000), v[0][3].y
        if_nz r0.x
          eq r0.x, l(0.000000), v[0][3].x
          if_nz r0.x
            ishl r0.x, v[0][5].x, l(1)
            ld r1.xyzw, r0.xxxx, t1.xyzw
            iadd r0.x, r0.x, l(1)
            ld r0.xyzw, r0.xxxx, t1.xyzw
            utof r0.w, v[0][5].x
            add r0.w, r0.w, cb0[4].x
            mul r0.w, r0.w, l(0.000977)
            sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, r2.xyzx
            mul r3.xyz, r0.zxyz, r2.xyzx
            mad r2.xyz, r2.zxyz, r0.xyzx, -r3.xyzx
            mul r3.xyz, r0.zxyz, r2.xyzx
            mad r2.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, r2.xyzx
            iadd r0.w, l(100), v[0][5].x
            utof r0.w, r0.w
            add r0.w, r0.w, cb0[4].x
            mul r0.w, r0.w, l(0.000977)
            sample_l r3.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
            dp3 r0.w, r3.xyzx, r3.xyzx
            rsq r0.w, r0.w
            mul r0.w, r0.w, r3.x
            mul r0.w, r0.w, l(10.000000)
            mov r3.z, -r0.w
            mov r4.xyz, r0.xyzx
            add r3.x, cb1[0].x, l(1.000000)
            mov r3.y, l(1.000000)
          else 
            mov r1.xyz, v[0][0].xyzx
            mov r2.xyz, v[0][1].xyzx
            mov r4.xyz, v[0][2].xyzx
            add r3.xz, l(-1.000000, 0.000000, 0.000000, 0.000000), v[0][3].xxzx
            mov r3.y, l(0)
            mov r0.xyz, v[0][4].xyzx
          endif 
          mov o0.xyz, r1.xyzx
          mov o1.xyz, r2.xyzx
          mov o2.xyz, r4.xyzx
          mov o3.xyz, r3.xyzx
          mov o4.xyz, r0.xyzx
          mov o5.xy, v[0][5].xyxx
          emit 
        else 
          eq r0.x, l(1.000000), v[0][3].y
          if_nz r0.x
            ne r0.xyz, v[0][2].xyzx, v[0][4].xyzx
            or r0.x, r0.y, r0.x
            or r0.x, r0.z, r0.x
            if_nz r0.x
              add r0.xyz, -v[0][2].xyzx, v[0][4].xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              sqrt r1.x, r0.w
              lt r1.x, r1.x, cb1[1].w
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              mad r0.xyz, cb1[1].wwww, r0.xyzx, v[0][2].xyzx
              movc r0.xyz, r1.xxxx, v[0][4].xyzx, r0.xyzx
              mov r1.xyz, v[0][4].xyzx
            else 
              utof r0.w, v[0][5].x
              add r0.w, r0.w, cb0[4].x
              mul r0.w, r0.w, l(0.000977)
              sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
              dp3 r0.w, r2.xyzx, r2.xyzx
              rsq r0.w, r0.w
              mul r0.w, r0.w, r2.x
              lt r0.w, |r0.w|, cb1[1].z
              if_nz r0.w
                mul r0.w, cb0[4].x, l(0.000977)
                sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r2.xyzx
              else 
                mov r1.xyz, v[0][4].xyzx
              endif 
              mov r0.xyz, v[0][2].xyzx
            endif 
            mad r2.xyz, r0.xyzx, cb1[1].yyyy, v[0][0].xyzx
            mul r3.xyz, r0.zxyz, v[0][1].xyzx
            mad r3.xyz, v[0][1].zxyz, r0.xyzx, -r3.xyzx
            mul r4.xyz, r0.zxyz, r3.xyzx
            mad r3.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
            dp3 r0.w, r3.xyzx, r3.xyzx
            rsq r0.w, r0.w
            mul r3.xyz, r0.wwww, r3.xyzx
            add r0.w, l(1.000000), v[0][3].z
            iadd r1.w, l(100), v[0][5].x
            utof r1.w, r1.w
            add r1.w, r1.w, cb0[4].x
            mul r1.w, r1.w, l(0.000977)
            sample_l r4.xyzw, r1.w, t0.xyzw, s0, l(0.000000)
            dp3 r1.w, r4.xyzx, r4.xyzx
            rsq r1.w, r1.w
            mul r4.xyz, r1.wwww, r4.xyzx
            lt r1.w, |r4.x|, cb1[2].x
            mul r2.w, |r4.y|, l(2000.000000)
            ftou r2.w, r2.w
            and r1.w, r1.w, r2.w
            lt r0.w, cb1[0].x, r0.w
            utof r2.w, cb1[2].z
            mul r2.w, r2.w, |r4.z|
            ftou r4.z, r2.w
            mov r4.xyw, l(0,0,0,0)
            mov r5.x, cb1[0].x
            mov r5.y, l(1.000000)
            mov r5.z, v[0][5].x
            add r5.w, l(1.000000), v[0][3].z
            movc r4.xyzw, r0.wwww, r4.xyzw, r5.xyzw
            mov o0.xyz, r2.xyzx
            mov o1.xyz, r3.xyzx
            mov o2.xyz, r0.xyzx
            mov o3.xyz, r4.xywx
            mov o4.xyz, r1.xyzx
            mov o5.x, r4.z
            mov o5.y, r1.w
            emit 
          endif 
          add r0.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), v[0][3].xzxx
          ne r0.z, r0.x, l(0.000000)
          lt r0.w, r0.y, cb1[0].x
          and r0.z, r0.w, r0.z
          if_nz r0.z
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xyz, v[0][2].xyzx
            mov o3.xz, r0.xxyx
            mov o3.y, l(3.000000)
            mov o4.xyz, v[0][4].xyzx
            mov o5.xy, v[0][5].xyxx
            emit 
          endif 
        endif 
        ret 
        // Approximately 142 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; NORMAL.xyz; DIRECTION.xyz; TIMERNTYPE.xy; TARGETDIR.xyz; CURRENTFACE.x; LEAVES.x; PIPELIFE.x" */;
GeometryShader gsStreamOutCrawl = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cb0
        // {
        //
        //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
        //   float g_fGlobalTime;               // Offset:   64 Size:     4
        //   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
        //   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
        //   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
        //
        // }
        //
        // cbuffer cbUIUpdates
        // {
        //
        //   float g_fLifeSpan;                 // Offset:    0 Size:     4
        //   float g_fLifeSpanVar;              // Offset:    4 Size:     4 [unused]
        //   float g_fRadiusMin;                // Offset:    8 Size:     4 [unused]
        //   float g_fRadiusMax;                // Offset:   12 Size:     4 [unused]
        //   float g_fGrowTime;                 // Offset:   16 Size:     4 [unused]
        //   float g_fStepSize;                 // Offset:   20 Size:     4
        //   float g_fTurnRate;                 // Offset:   24 Size:     4
        //   float g_fTurnSpeed;                // Offset:   28 Size:     4 [unused]
        //   float g_fLeafRate;                 // Offset:   32 Size:     4
        //   float g_fShrinkTime;               // Offset:   36 Size:     4 [unused]
        //   uint g_uMaxFaces;                  // Offset:   40 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samPoint                        sampler      NA          NA             s0      1 
        // g_txRandom                        texture  float4          1d             t0      1 
        // g_adjBuffer                       texture  float3         buf             t1      1 
        // g_triCenterBuffer                 texture  float4         buf             t2      1 
        // cb0                               cbuffer      NA          NA            cb0      1 
        // cbUIUpdates                       cbuffer      NA          NA            cb1      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // DIRECTION                0   xyz         2     NONE   float   xyz 
        // TIMERNTYPE               0   xy          3     NONE   float   xy  
        // PIPELIFE                 0     z         3     NONE   float     z 
        // TARGETDIR                0   xyz         4     NONE   float   xyz 
        // CURRENTFACE              0   x           5     NONE    uint   x   
        // LEAVES                   0    y          5     NONE    uint    y  
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // DIRECTION                0   xyz         2     NONE   float   xyz 
        // TIMERNTYPE               0   xy          3     NONE   float   xy  
        // PIPELIFE                 0     z         3     NONE   float     z 
        // TARGETDIR                0   xyz         4     NONE   float   xyz 
        // CURRENTFACE              0   x           5     NONE    uint   x   
        // LEAVES                   0    y          5     NONE    uint    y  
        //
        gs_4_0
        dcl_constantbuffer CB0[5], immediateIndexed
        dcl_constantbuffer CB1[3], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_resource_buffer (float,float,float,float) t1
        dcl_resource_buffer (float,float,float,float) t2
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xyz
        dcl_input v[1][3].xy
        dcl_input v[1][3].z
        dcl_input v[1][4].xyz
        dcl_input v[1][5].x
        dcl_input v[1][5].y
        dcl_temps 11
        dcl_inputprimitive point 
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xyz
        dcl_output o3.xy
        dcl_output o3.z
        dcl_output o4.xyz
        dcl_output o5.x
        dcl_output o5.y
        dcl_maxout 2
        eq r0.x, l(0.000000), v[0][3].y
        if_nz r0.x
          eq r0.x, l(0.000000), v[0][3].x
          if_nz r0.x
            ishl r0.x, v[0][5].x, l(1)
            ld r1.xyzw, r0.xxxx, t2.xyzw
            iadd r0.x, r0.x, l(1)
            ld r0.xyzw, r0.xxxx, t2.xyzw
            utof r0.w, v[0][5].x
            add r0.w, r0.w, cb0[4].x
            mul r0.w, r0.w, l(0.000977)
            sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, r2.xyzx
            mul r3.xyz, r0.zxyz, r2.xyzx
            mad r2.xyz, r2.zxyz, r0.xyzx, -r3.xyzx
            mul r3.xyz, r0.zxyz, r2.xyzx
            mad r2.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, r2.xyzx
            iadd r0.w, l(100), v[0][5].x
            utof r0.w, r0.w
            add r0.w, r0.w, cb0[4].x
            mul r0.w, r0.w, l(0.000977)
            sample_l r3.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
            dp3 r0.w, r3.xyzx, r3.xyzx
            rsq r0.w, r0.w
            mul r0.w, r0.w, r3.x
            mul r0.w, r0.w, l(10.000000)
            mov r3.z, -r0.w
            mov r4.xyz, r1.xyzx
            add r3.x, cb1[0].x, l(1.000000)
            mov r3.y, l(1.000000)
          else 
            mov r4.xyz, v[0][0].xyzx
            mov r0.xyz, v[0][1].xyzx
            mov r2.xyz, v[0][2].xyzx
            add r3.xz, l(-1.000000, 0.000000, 0.000000, 0.000000), v[0][3].xxzx
            mov r3.y, l(0)
            mov r1.xyz, v[0][4].xyzx
          endif 
          mov o0.xyz, r4.xyzx
          mov o1.xyz, r0.xyzx
          mov o2.xyz, r2.xyzx
          mov o3.xyz, r3.xyzx
          mov o4.xyz, r1.xyzx
          mov o5.xy, v[0][5].xyxx
          emit 
        else 
          eq r0.x, l(1.000000), v[0][3].y
          if_nz r0.x
            add r0.xyz, v[0][0].xyzx, -v[0][4].xyzx
            dp3 r0.x, r0.xyzx, r0.xyzx
            sqrt r0.x, r0.x
            lt r0.x, r0.x, cb1[1].y
            if_nz r0.x
              imul null, r0.x, l(3), v[0][5].x
              ld r0.xyzw, r0.xxxx, t1.xyzw
              imad r0.yz, v[0][5].xxxx, l(0, 3, 3, 0), l(0, 1, 2, 0)
              ld r1.xyzw, r0.yyyy, t1.xyzw
              ld r2.xyzw, r0.zzzz, t1.xyzw
              add r0.y, r0.x, r0.x
              ftoi r0.y, r0.y
              ld r3.xyzw, r0.yyyy, t2.xyzw
              mad r0.y, r0.x, l(2.000000), l(1.000000)
              ftoi r0.y, r0.y
              ld r4.xyzw, r0.yyyy, t2.xyzw
              add r0.yzw, r3.xxyz, -v[0][4].xxyz
              add r1.y, r1.x, r1.x
              ftoi r1.y, r1.y
              ld r5.xyzw, r1.yyyy, t2.xyzw
              mad r1.y, r1.x, l(2.000000), l(1.000000)
              ftoi r1.y, r1.y
              ld r6.xyzw, r1.yyyy, t2.xyzw
              add r1.yzw, r5.xxyz, -v[0][4].xxyz
              add r2.y, r2.x, r2.x
              ftoi r2.y, r2.y
              ld r7.xyzw, r2.yyyy, t2.xyzw
              mad r2.y, r2.x, l(2.000000), l(1.000000)
              ftoi r2.y, r2.y
              ld r8.xyzw, r2.yyyy, t2.xyzw
              add r2.yzw, r7.xxyz, -v[0][4].xxyz
              utof r4.w, v[0][5].x
              add r4.w, r4.w, cb0[4].x
              mul r4.w, r4.w, l(0.000977)
              sample_l r9.xyzw, r4.w, t0.xyzw, s0, l(0.000000)
              dp3 r4.w, r9.xyzx, r9.xyzx
              rsq r4.w, r4.w
              mul r4.w, r4.w, r9.x
              lt r4.w, |r4.w|, cb1[1].z
              if_nz r4.w
                add r4.w, cb0[4].x, l(15.000000)
                mul r4.w, r4.w, l(0.000977)
                sample_l r9.xyzw, r4.w, t0.xyzw, s0, l(0.000000)
              else 
                mov r9.xyz, v[0][2].xyzx
              endif 
              dp3 r4.w, r0.yzwy, r0.yzwy
              rsq r4.w, r4.w
              mul r0.yzw, r0.yyzw, r4.wwww
              dp3 r0.y, r9.xyzx, r0.yzwy
              dp3 r0.z, r1.yzwy, r1.yzwy
              rsq r0.z, r0.z
              mul r1.yzw, r0.zzzz, r1.yyzw
              dp3 r0.z, r9.xyzx, r1.yzwy
              dp3 r0.w, r2.yzwy, r2.yzwy
              rsq r0.w, r0.w
              mul r1.yzw, r0.wwww, r2.yyzw
              dp3 r0.w, r9.xyzx, r1.yzwy
              lt r1.y, r0.x, l(40000000.000000)
              lt r1.z, r0.z, r0.y
              and r1.y, r1.z, r1.y
              mul r2.yzw, r4.zzxy, r9.xxyz
              mad r2.yzw, r9.zzxy, r4.xxyz, -r2.yyzw
              mul r10.xyz, r2.yzwy, r4.zxyz
              mad r2.yzw, r4.yyzx, r2.zzwy, -r10.xxyz
              dp3 r1.z, r2.yzwy, r2.yzwy
              rsq r1.z, r1.z
              mul r2.yzw, r1.zzzz, r2.yyzw
              ftou r3.w, r0.x
              lt r0.x, r1.x, l(40000000.000000)
              lt r0.y, r0.y, r0.z
              and r0.x, r0.y, r0.x
              lt r0.y, r0.w, r0.z
              and r0.x, r0.y, r0.x
              mul r0.yzw, r6.zzxy, r9.xxyz
              mad r0.yzw, r9.zzxy, r6.xxyz, -r0.yyzw
              mul r10.xyz, r0.yzwy, r6.zxyz
              mad r0.yzw, r6.yyzx, r0.zzwy, -r10.xxyz
              dp3 r1.z, r0.yzwy, r0.yzwy
              rsq r1.z, r1.z
              mul r0.yzw, r0.yyzw, r1.zzzz
              ftou r5.w, r1.x
              mul r1.xzw, r8.zzxy, r9.xxyz
              mad r1.xzw, r9.zzxy, r8.xxyz, -r1.xxzw
              mul r9.xyz, r1.xzwx, r8.zxyz
              mad r1.xzw, r8.yyzx, r1.zzwx, -r9.xxyz
              dp3 r4.w, r1.xzwx, r1.xzwx
              rsq r4.w, r4.w
              mul r1.xzw, r1.xxzw, r4.wwww
              ftou r7.w, r2.x
              movc r5.xyzw, r0.xxxx, r5.xyzw, r7.xyzw
              movc r6.xyz, r0.xxxx, r6.xyzx, r8.xyzx
              movc r0.xyz, r0.xxxx, r0.yzwy, r1.xzwx
              movc r1.xzw, r1.yyyy, r4.xxyz, r6.xxyz
              movc r0.xyz, r1.yyyy, r2.yzwy, r0.xyzx
              movc r2.xyzw, r1.yyyy, r3.xyzw, r5.xyzw
              mov o0.xyz, v[0][4].xyzx
              mov o1.xyz, r1.xzwx
              mov o2.xyz, r0.xyzx
              mov o3.xz, v[0][3].xxzx
              mov o3.y, l(1.000000)
              mov o4.xyz, r2.xyzx
              mov o5.x, r2.w
              mov o5.y, v[0][5].y
              emit 
            else 
              add r0.xyz, -v[0][0].xyzx, v[0][4].xyzx
              dp3 r0.x, r0.xyzx, r0.xyzx
              sqrt r0.x, r0.x
              mad r0.xyz, v[0][2].xyzx, r0.xxxx, v[0][0].xyzx
              add r1.xyz, -r0.xyzx, v[0][4].xyzx
              mad r0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r0.xyzx
              add r0.xyz, r0.xyzx, -v[0][0].xyzx
              dp3 r0.w, r0.xyzx, r0.xyzx
              rsq r0.w, r0.w
              mul r0.xyz, r0.wwww, r0.xyzx
              mad r1.xyz, r0.xyzx, cb1[1].yyyy, v[0][0].xyzx
              mul r2.xyz, r0.zxyz, v[0][1].xyzx
              mad r2.xyz, v[0][1].zxyz, r0.xyzx, -r2.xyzx
              mul r3.xyz, r0.zxyz, r2.xyzx
              mad r2.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
              dp3 r0.w, r2.xyzx, r2.xyzx
              rsq r0.w, r0.w
              mul r2.xyz, r0.wwww, r2.xyzx
              utof r0.w, v[0][5].x
              add r0.w, r0.w, cb0[4].x
              mul r0.w, r0.w, l(0.000977)
              sample_l r3.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
              dp3 r0.w, r3.xyzx, r3.xyzx
              rsq r0.w, r0.w
              mul r3.xyz, r0.wwww, r3.xyzx
              lt r0.w, |r3.x|, cb1[2].x
              mul r1.w, |r3.y|, l(2000.000000)
              ftou r1.w, r1.w
              and r0.w, r0.w, r1.w
              lt r1.w, cb1[0].x, v[0][3].z
              utof r2.w, cb1[2].z
              mul r2.w, r2.w, |r3.z|
              ftou r3.z, r2.w
              mov r3.xyw, l(0,0,0,0)
              mov r4.x, cb1[0].x
              mov r4.y, l(1.000000)
              mov r4.z, v[0][5].x
              mov r4.w, v[0][3].z
              movc r3.xyzw, r1.wwww, r3.xyzw, r4.xyzw
              mov o0.xyz, r1.xyzx
              mov o1.xyz, r2.xyzx
              mov o2.xyz, r0.xyzx
              mov o3.xyz, r3.xywx
              mov o4.xyz, v[0][4].xyzx
              mov o5.x, r3.z
              mov o5.y, r0.w
              emit 
            endif 
          endif 
          add r0.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), v[0][3].xzxx
          ne r0.z, r0.x, l(0.000000)
          lt r0.w, r0.y, cb1[0].x
          and r0.z, r0.w, r0.z
          if_nz r0.z
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xyz, v[0][2].xyzx
            mov o3.xz, r0.xxyx
            mov o3.y, l(3.000000)
            mov o4.xyz, v[0][4].xyzx
            mov o5.xy, v[0][5].xyxx
            emit 
          endif 
        endif 
        ret 
        // Approximately 224 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; NORMAL.xyz; DIRECTION.xyz; TIMERNTYPE.xy; TARGETDIR.xyz; CURRENTFACE.x; LEAVES.x; PIPELIFE.x" */;

//
// 5 technique(s)
//
technique10 RenderPipes
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0   x           6     NONE    uint   x   
            // PIPELIFE                 0   x           7     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // PIPELIFE                 0     z         3     NONE   float     z 
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0    y          5     NONE    uint    y  
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xyz
            dcl_input v3.xy
            dcl_input v4.xyz
            dcl_input v5.x
            dcl_input v6.x
            dcl_input v7.x
            dcl_output o0.xyz
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xy
            dcl_output o3.z
            dcl_output o4.xyz
            dcl_output o5.x
            dcl_output o5.y
            mov o0.xyz, v0.xyzx
            mov o1.xyz, v1.xyzx
            mov o2.xyz, v2.xyzx
            mov o3.xy, v3.xyxx
            mov o3.z, v7.x
            mov o4.xyz, v4.xyzx
            mov o5.x, v5.x
            mov o5.y, v6.x
            ret 
            // Approximately 9 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float g_fGlobalTime;               // Offset:   64 Size:     4 [unused]
            //   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
            //   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
            //   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[7];             // Offset:    0 Size:   108
            //      = 0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x3f000000 0x3f5db22d 0x00000000 0x00000000 
            //        0xbf000000 0x3f5db22d 0x00000000 0x00000000 
            //        0xbf800000 0x00000000 0x00000000 0x00000000 
            //        0xbf000000 0xbf5db22d 0x00000000 0x00000000 
            //        0x3f000000 0xbf5db22d 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 
            //   float3 g_leafpositions[4];         // Offset:  112 Size:    60
            //      = 0xbfc00000 0x40000000 0x00000000 0x00000000 
            //        0x3fc00000 0x40000000 0x00000000 0x00000000 
            //        0xbfc00000 0x00000000 0x00000000 0x00000000 
            //        0x3fc00000 0x00000000 0x00000000 
            //   float2 g_leaftexcoords[4];         // Offset:  176 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float3 g_vLightDir;                // Offset:  240 Size:    12
            //      = 0xbe99999a 0x3f67d567 0xbe99999a 
            //
            // }
            //
            // cbuffer cbUIUpdates
            // {
            //
            //   float g_fLifeSpan;                 // Offset:    0 Size:     4
            //   float g_fLifeSpanVar;              // Offset:    4 Size:     4 [unused]
            //   float g_fRadiusMin;                // Offset:    8 Size:     4
            //   float g_fRadiusMax;                // Offset:   12 Size:     4
            //   float g_fGrowTime;                 // Offset:   16 Size:     4
            //   float g_fStepSize;                 // Offset:   20 Size:     4 [unused]
            //   float g_fTurnRate;                 // Offset:   24 Size:     4 [unused]
            //   float g_fTurnSpeed;                // Offset:   28 Size:     4 [unused]
            //   float g_fLeafRate;                 // Offset:   32 Size:     4 [unused]
            //   float g_fShrinkTime;               // Offset:   36 Size:     4
            //   uint g_uMaxFaces;                  // Offset:   40 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            // cbUIUpdates                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // PIPELIFE                 0     z         3     NONE   float     z 
            // TARGETDIR                0   xyz         4     NONE   float       
            // CURRENTFACE              0   x           5     NONE    uint       
            // LEAVES                   0    y          5     NONE    uint    y  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[4], immediateIndexed
            dcl_constantbuffer CB1[16], dynamicIndexed
            dcl_constantbuffer CB2[3], immediateIndexed
            dcl_input v[2][0].xyz
            dcl_input v[2][1].xyz
            dcl_input v[2][2].xyz
            dcl_input v[2][3].xy
            dcl_input v[2][3].z
            dcl_input v[2][4].xyz
            dcl_input v[2][5].x
            dcl_input v[2][5].y
            dcl_temps 7
            dcl_inputprimitive line 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyzw
            dcl_maxout 20
            eq r0.x, l(3.000000), v[1][3].y
            if_nz r0.x
              mul r0.xyz, v[0][1].yzxy, v[0][2].zxyz
              mad r0.xyz, v[0][2].yzxy, v[0][1].zxyz, -r0.xyzx
              mul r1.xyz, v[1][1].yzxy, v[1][2].zxyz
              mad r1.xyz, v[1][2].yzxy, v[1][1].zxyz, -r1.xyzx
              add r2.xy, cb2[0].xxxx, -v[0][3].xzxx
              div_sat r0.w, r2.x, cb2[1].x
              add r1.w, -cb2[0].z, cb2[0].w
              mad r2.x, r1.w, r0.w, cb2[0].z
              lt r2.z, r2.y, cb2[2].y
              div r2.y, r2.y, cb2[2].y
              mul r2.w, r2.y, r2.x
              movc r2.x, r2.z, r2.w, r2.x
              add r3.xy, cb2[0].xxxx, -v[1][3].xzxx
              div_sat r2.w, r3.x, cb2[1].x
              mad r1.w, r1.w, r2.w, cb2[0].z
              lt r2.w, r3.y, cb2[2].y
              div r3.x, r3.y, cb2[2].y
              mul r3.x, r1.w, r3.x
              movc r1.w, r2.w, r3.x, r1.w
              mov r3.w, l(1.000000)
              mov r4.w, l(1.000000)
              mov r2.w, l(0)
              loop 
                ige r5.x, r2.w, l(7)
                breakc_nz r5.x
                mul r5.xyz, r2.xxxx, cb1[r2.w + 0].xyzx
                mul r6.xyz, r5.yyyy, v[0][1].xyzx
                mad r5.xyw, r5.xxxx, -r0.xyxz, r6.xyxz
                mad r5.xyz, r5.zzzz, v[0][2].xyzx, r5.xywx
                dp3 r5.w, r5.xyzx, r5.xyzx
                rsq r5.w, r5.w
                mul r6.xyz, r5.wwww, r5.xyzx
                add r3.xyz, r5.xyzx, v[0][0].xyzx
                dp4 r5.x, r3.xyzw, cb0[0].xyzw
                dp4 r5.y, r3.xyzw, cb0[1].xyzw
                dp4 r5.z, r3.xyzw, cb0[2].xyzw
                dp4 r3.x, r3.xyzw, cb0[3].xyzw
                dp3 r3.y, cb1[15].xyzx, r6.xyzx
                itof r3.z, r2.w
                mul r3.z, r3.z, l(0.166667)
                mov o0.x, r5.x
                mov o0.y, r5.y
                mov o0.z, r5.z
                mov o0.w, r3.x
                mov o1.x, r3.z
                mov o1.yz, l(0,0,0,0)
                mov o2.xyz, r3.yyyy
                mov o2.w, l(1.000000)
                emit 
                mul r5.xyz, r1.wwww, cb1[r2.w + 0].xyzx
                mul r6.xyz, r5.yyyy, v[1][1].xyzx
                mad r5.xyw, r5.xxxx, -r1.xyxz, r6.xyxz
                mad r5.xyz, r5.zzzz, v[1][2].xyzx, r5.xywx
                dp3 r3.x, r5.xyzx, r5.xyzx
                rsq r3.x, r3.x
                mul r6.xyz, r3.xxxx, r5.xyzx
                add r4.xyz, r5.xyzx, v[1][0].xyzx
                dp4 r3.x, r4.xyzw, cb0[0].xyzw
                dp4 r3.y, r4.xyzw, cb0[1].xyzw
                dp4 r5.x, r4.xyzw, cb0[2].xyzw
                dp4 r4.x, r4.xyzw, cb0[3].xyzw
                dp3 r4.y, cb1[15].xyzx, r6.xyzx
                mov o0.x, r3.x
                mov o0.y, r3.y
                mov o0.z, r5.x
                mov o0.w, r4.x
                mov o1.x, r3.z
                mov o1.yz, l(0,1.000000,0,0)
                mov o2.xyz, r4.yyyy
                mov o2.w, l(1.000000)
                emit 
                iadd r2.w, r2.w, l(1)
              endloop 
              cut 
              if_nz v[0][5].y
                mul r0.w, r0.w, cb2[0].w
                mul r1.x, r2.y, r0.w
                movc r0.w, r2.z, r1.x, r0.w
                dp3 r1.x, cb1[15].xyzx, -r0.xyzx
                iadd r1.y, l(1), v[0][5].y
                udiv r1.z, null, v[0][5].y, l(5)
                imad r1.y, r1.z, l(-5), r1.y
                utof r1.y, r1.y
                mov r2.w, l(1.000000)
                mov r1.z, l(0)
                loop 
                  ige r1.w, r1.z, l(4)
                  breakc_nz r1.w
                  mul r3.xyz, r0.wwww, cb1[r1.z + 7].xyzx
                  add r3.xyz, r3.xyzx, r3.xyzx
                  mul r4.xyz, r3.yyyy, v[0][1].xyzx
                  mad r3.xyw, r3.xxxx, -r0.xyxz, r4.xyxz
                  mad r3.xyz, r3.zzzz, v[0][2].xyzx, r3.xywx
                  add r2.xyz, r3.xyzx, v[0][0].xyzx
                  dp4 r1.w, r2.xyzw, cb0[0].xyzw
                  dp4 r3.x, r2.xyzw, cb0[1].xyzw
                  dp4 r3.y, r2.xyzw, cb0[2].xyzw
                  dp4 r2.x, r2.xyzw, cb0[3].xyzw
                  mov o0.x, r1.w
                  mov o0.y, r3.x
                  mov o0.z, r3.y
                  mov o0.w, r2.x
                  mov o1.xy, cb1[r1.z + 11].xyxx
                  mov o1.z, r1.y
                  mov o2.xyz, |r1.xxxx|
                  mov o2.w, l(1.000000)
                  emit 
                  iadd r1.z, r1.z, l(1)
                endloop 
                cut 
              endif 
            endif 
            ret 
            // Approximately 115 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_tx2dArray                       texture  float4     2darray             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyzw
            dcl_output o0.xyzw
            dcl_temps 2
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            mul r0.xyzw, r0.xyzw, v2.xyzw
            lt r1.x, r0.w, l(0.500000)
            discard_nz r1.x
            mov o0.xyzw, r0.xyzw
            ret 
            // Approximately 6 instruction slots used
                    
        };
        RasterizerState = DisableCulling;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepthTestWrite;
    }

}

technique10 AdvancePipes
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0   x           6     NONE    uint   x   
            // PIPELIFE                 0   x           7     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // PIPELIFE                 0     z         3     NONE   float     z 
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0    y          5     NONE    uint    y  
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xyz
            dcl_input v3.xy
            dcl_input v4.xyz
            dcl_input v5.x
            dcl_input v6.x
            dcl_input v7.x
            dcl_output o0.xyz
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xy
            dcl_output o3.z
            dcl_output o4.xyz
            dcl_output o5.x
            dcl_output o5.y
            mov o0.xyz, v0.xyzx
            mov o1.xyz, v1.xyzx
            mov o2.xyz, v2.xyzx
            mov o3.xy, v3.xyxx
            mov o3.z, v7.x
            mov o4.xyz, v4.xyzx
            mov o5.x, v5.x
            mov o5.y, v6.x
            ret 
            // Approximately 9 instruction slots used
                    
        };
        GeometryShader = gsStreamOut;
        PixelShader = NULL;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 AdvancePipesCrawl
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0   x           6     NONE    uint   x   
            // PIPELIFE                 0   x           7     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // DIRECTION                0   xyz         2     NONE   float   xyz 
            // TIMERNTYPE               0   xy          3     NONE   float   xy  
            // PIPELIFE                 0     z         3     NONE   float     z 
            // TARGETDIR                0   xyz         4     NONE   float   xyz 
            // CURRENTFACE              0   x           5     NONE    uint   x   
            // LEAVES                   0    y          5     NONE    uint    y  
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xyz
            dcl_input v3.xy
            dcl_input v4.xyz
            dcl_input v5.x
            dcl_input v6.x
            dcl_input v7.x
            dcl_output o0.xyz
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xy
            dcl_output o3.z
            dcl_output o4.xyz
            dcl_output o5.x
            dcl_output o5.y
            mov o0.xyz, v0.xyzx
            mov o1.xyz, v1.xyzx
            mov o2.xyz, v2.xyzx
            mov o3.xy, v3.xyxx
            mov o3.z, v7.x
            mov o4.xyz, v4.xyzx
            mov o5.x, v5.x
            mov o5.y, v6.x
            ret 
            // Approximately 9 instruction slots used
                    
        };
        GeometryShader = gsStreamOutCrawl;
        PixelShader = NULL;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderMesh
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float g_fGlobalTime;               // Offset:   64 Size:     4 [unused]
            //   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
            //   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
            //   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXTURE                  0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[4], immediateIndexed
            dcl_input v0.xyz
            dcl_input v2.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyzw
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            mov o1.xy, v2.xyxx
            mov o1.z, l(0)
            mov o2.xyzw, l(0,0,0,1.000000)
            ret 
            // Approximately 10 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samClamp                        sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xyz         1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            sample o0.xyzw, v1.xyxx, t0.xyzw, s0
            ret 
            // Approximately 2 instruction slots used
                    
        };
        RasterizerState = EnableCulling;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepthTestWrite;
    }

}

technique10 RenderSkybox
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float g_fGlobalTime;               // Offset:   64 Size:     4 [unused]
            //   float g_fUndulate;                 // Offset:   68 Size:     4 [unused]
            //   float4 vMaterialSpec;              // Offset:   80 Size:    16 [unused]
            //   float4 vMaterialDiff;              // Offset:   96 Size:    16 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXTURE                  0   xy          2     NONE   float   xy  
            // SV_VertexID              0   x           3   VERTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            //
            vs_4_0
            dcl_constantbuffer CB0[4], immediateIndexed
            dcl_input v0.xyz
            dcl_input v2.xy
            dcl_input_sgv v3.x, vertex_id
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            udiv r0.x, null, v3.x, l(6)
            utof o1.z, r0.x
            mov o1.xy, v2.xyxx
            ret 
            // Approximately 10 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samClamp                        sampler      NA          NA             s0      1 
            // g_tx2dArray                       texture  float4     2darray             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xyz         1     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_output o0.xyzw
            sample o0.xyzw, v1.xyzx, t0.xyzw, s0
            ret 
            // Approximately 2 instruction slots used
                    
        };
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthTestWrite;
    }

}

