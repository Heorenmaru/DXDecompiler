//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 2 local buffer(s)
//
cbuffer cb0
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mInvView;                // Offset:   64, size:   64
    float   g_fGlobalTime;              // Offset:  128, size:    4
    float   g_fElapsedTime;             // Offset:  132, size:    4
    float4  g_vFrameGravity;            // Offset:  144, size:   16
    float   g_fSecondsPerFirework = 1;  // Offset:  160, size:    4
    int     g_iNumEmber1s = 30;         // Offset:  164, size:    4
    float   g_fMaxEmber2s = 15;         // Offset:  168, size:    4
}

cbuffer cbImmutable
{
    float3  g_positions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:    0, size:   60
    float2  g_texcoords[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   64, size:   56
}

//
// 8 local object(s)
//
Texture2D g_txDiffuse;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
Texture1D g_txRandom;
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cb0
        // {
        //
        //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
        //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
        //   float g_fGlobalTime;               // Offset:  128 Size:     4
        //   float g_fElapsedTime;              // Offset:  132 Size:     4
        //   float4 g_vFrameGravity;            // Offset:  144 Size:    16
        //   float g_fSecondsPerFirework;       // Offset:  160 Size:     4
        //      = 0x3f800000 
        //   int g_iNumEmber1s;                 // Offset:  164 Size:     4
        //      = 0x0000001e 
        //   float g_fMaxEmber2s;               // Offset:  168 Size:     4
        //      = 0x41700000 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samPoint                        sampler      NA          NA             s0      1 
        // g_txRandom                        texture  float4          1d             t0      1 
        // cb0                               cbuffer      NA          NA            cb0      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // TIMER                    0      w        0     NONE   float      w
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // TYPE                     0   x           2     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // TIMER                    0      w        0     NONE   float      w
        // NORMAL                   0   xyz         1     NONE   float   xyz 
        // TYPE                     0   x           2     NONE    uint   x   
        //
        gs_4_0
        dcl_constantbuffer CB0[11], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][0].w
        dcl_input v[1][1].xyz
        dcl_input v[1][2].x
        dcl_temps 4
        dcl_inputprimitive point 
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o0.w
        dcl_output o1.xyz
        dcl_output o2.x
        dcl_maxout 128
        if_z v[0][2].x
          ge r0.x, l(0.000000), v[0][0].w
          if_nz r0.x
            mul r0.x, cb0[8].x, l(0.003333)
            sample_l r0.xyzw, r0.x, t0.xyzw, s0, l(0.000000)
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyzw, r0.wwww, r0.xyzy
            mad r1.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
            mad r2.xyz, r0.xyzx, l(8.000000, 8.000000, 8.000000, 0.000000), v[0][1].xyzx
            mad r0.y, r0.w, l(0.500000), l(3.000000)
            mov o0.xyz, r1.xyzx
            mov o0.w, r0.y
            mov o1.xyz, r2.xyzx
            mov o2.x, l(1)
            emit 
            mad r0.x, r0.x, l(0.400000), cb0[10].x
          else 
            add r0.x, -cb0[8].y, v[0][0].w
          endif 
          mov o0.xyz, v[0][0].xyzx
          mov o0.w, r0.x
          mov o1.xyz, v[0][1].xyzx
          mov o2.x, l(0)
          emit 
        else 
          ieq r0.x, l(1), v[0][2].x
          if_nz r0.x
            ge r0.x, l(0.000000), v[0][0].w
            if_nz r0.x
              mad r0.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
              mov r1.x, l(0)
              mov r0.w, l(0)
              loop 
                ige r1.w, r0.w, cb0[10].y
                breakc_nz r1.w
                iadd r0.w, r0.w, l(1)
                utof r1.w, r0.w
                add r1.w, r1.w, cb0[8].x
                mul r1.w, r1.w, l(0.003333)
                sample_l r2.xyzw, r1.w, t0.xyzw, s0, l(0.000000)
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r2.xyzx
                mad r1.yzw, r1.xxyz, l(0.000000, 15.000000, 15.000000, 15.000000), v[0][1].xxyz
                mov o0.xyz, r0.xyzx
                mov o0.w, l(2.500000)
                mov o1.xyz, r1.yzwy
                mov o2.x, l(2)
                emit 
              endloop 
              mov r2.x, r1.x
              mov r0.w, l(0)
              loop 
                itof r1.y, r0.w
                mul r1.z, |r2.x|, cb0[10].z
                ge r1.y, r1.y, r1.z
                breakc_nz r1.y
                iadd r0.w, r0.w, l(1)
                utof r1.y, r0.w
                add r1.y, r1.y, cb0[8].x
                mul r1.y, r1.y, l(0.003333)
                sample_l r3.xyzw, r1.y, t0.xyzw, s0, l(0.000000)
                dp3 r1.y, r3.xyzx, r3.xyzx
                rsq r1.y, r1.y
                mul r2.xyzw, r1.yyyy, r3.xxyz
                mad r1.yzw, r2.yyzw, l(0.000000, 10.000000, 10.000000, 10.000000), v[0][1].xxyz
                mad r2.y, r2.x, l(0.400000), l(1.500000)
                mov o0.xyz, r0.xyzx
                mov o0.w, r2.y
                mov o1.xyz, r1.yzwy
                mov o2.x, l(3)
                emit 
              endloop 
            else 
              mad r0.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
              add r1.xyz, cb0[9].xyzx, v[0][1].xyzx
              add r0.w, -cb0[8].y, v[0][0].w
              mov o0.xyz, r0.xyzx
              mov o0.w, r0.w
              mov o1.xyz, r1.xyzx
              mov o2.x, l(1)
              emit 
            endif 
          else 
            ieq r0.xy, l(2, 4, 0, 0), v[0][2].xxxx
            or r0.x, r0.y, r0.x
            if_nz r0.x
              lt r0.x, l(0.000000), v[0][0].w
              if_nz r0.x
                mad r0.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
                add r1.xyz, cb0[9].xyzx, v[0][1].xyzx
                add r0.w, -cb0[8].y, v[0][0].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                mov o1.xyz, r1.xyzx
                mov o2.x, v[0][2].x
                emit 
              endif 
            else 
              ieq r0.x, l(3), v[0][2].x
              if_nz r0.x
                ge r0.x, l(0.000000), v[0][0].w
                if_nz r0.x
                  mad r0.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
                  mov r1.x, l(0)
                  loop 
                    ige r0.w, r1.x, l(10)
                    breakc_nz r0.w
                    iadd r1.xy, r1.xxxx, l(1, 3, 0, 0)
                    utof r0.w, r1.y
                    add r0.w, r0.w, cb0[8].x
                    mul r0.w, r0.w, l(0.003333)
                    sample_l r2.xyzw, r0.w, t0.xyzw, s0, l(0.000000)
                    dp3 r0.w, r2.xyzx, r2.xyzx
                    rsq r0.w, r0.w
                    mul r1.yzw, r0.wwww, r2.xxyz
                    mad r1.yzw, r1.yyzw, l(0.000000, 10.000000, 10.000000, 10.000000), v[0][1].xxyz
                    mov o0.xyz, r0.xyzx
                    mov o0.w, l(2.000000)
                    mov o1.xyz, r1.yzwy
                    mov o2.x, l(4)
                    emit 
                  endloop 
                else 
                  mad r0.xyz, v[0][1].xyzx, cb0[8].yyyy, v[0][0].xyzx
                  add r1.xyz, cb0[9].xyzx, v[0][1].xyzx
                  add r0.w, -cb0[8].y, v[0][0].w
                  mov o0.xyz, r0.xyzx
                  mov o0.w, r0.w
                  mov o1.xyz, r1.xyzx
                  mov o2.x, l(3)
                  emit 
                endif 
              endif 
            endif 
          endif 
        endif 
        ret 
        // Approximately 139 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; NORMAL.xyz; TIMER.x; TYPE.x" */;

//
// 2 technique(s)
//
technique10 RenderParticles
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TIMER                    0   x           2     NONE   float   x   
            // TYPE                     0   x           3     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // RADIUS                   0      w        0     NONE   float      w
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.xyzw
            dcl_temps 3
            mov o0.xyz, v0.xyzx
            ieq r0.xyzw, v3.xxxx, l(1, 2, 3, 4)
            movc r1.x, r0.x, l(1.000000), l(1.500000)
            movc o0.w, v3.x, r1.x, l(1.000000)
            mul r1.xyzw, v2.xxxx, l(0.400000, 0.040000, 0.500000, 0.050000)
            and r2.xyzw, r0.wwww, r1.zwwz
            movc r2.xyzw, r0.zzzz, l(1.000000,0.100000,1.000000,1.000000), r2.xyzw
            movc r1.xyzw, r0.yyyy, r1.xxyx, r2.xyzw
            movc r0.xyzw, r0.xxxx, l(0.100000,1.000000,1.000000,1.000000), r1.xyzw
            movc o1.xyzw, v3.xxxx, r0.xyzw, l(1.000000,0.100000,0.100000,1.000000)
            ret 
            // Approximately 11 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4 [unused]
            //   float4 g_vFrameGravity;            // Offset:  144 Size:    16 [unused]
            //   float g_fSecondsPerFirework;       // Offset:  160 Size:     4 [unused]
            //      = 0x3f800000 
            //   int g_iNumEmber1s;                 // Offset:  164 Size:     4 [unused]
            //      = 0x0000001e 
            //   float g_fMaxEmber2s;               // Offset:  168 Size:     4 [unused]
            //      = 0x41700000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // RADIUS                   0      w        0     NONE   float      w
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_constantbuffer CB1[8], dynamicIndexed
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].xyzw
            dcl_temps 3
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o2.xyzw
            dcl_maxout 4
            mov r0.w, l(1.000000)
            mov r1.x, l(0)
            loop 
              ige r1.y, r1.x, l(4)
              breakc_nz r1.y
              mul r1.yzw, v[0][0].wwww, cb1[r1.x + 0].xxyz
              dp3 r2.x, r1.yzwy, cb0[4].xyzx
              dp3 r2.y, r1.yzwy, cb0[5].xyzx
              dp3 r2.z, r1.yzwy, cb0[6].xyzx
              add r0.xyz, r2.xyzx, v[0][0].xyzx
              dp4 r1.y, r0.xyzw, cb0[0].xyzw
              dp4 r1.z, r0.xyzw, cb0[1].xyzw
              dp4 r1.w, r0.xyzw, cb0[2].xyzw
              dp4 r0.x, r0.xyzw, cb0[3].xyzw
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r0.x
              mov o1.xy, cb1[r1.x + 4].xyxx
              mov o2.xyzw, v[0][1].xyzw
              emit 
              iadd r1.x, r1.x, l(1)
            endloop 
            cut 
            ret 
            // Approximately 25 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v2.xyzw
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xyzw, v2.xyzw
            ret 
            // Approximately 3 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AdditiveBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 AdvanceParticles
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TIMER                    0   x           2     NONE   float   x   
            // TYPE                     0   x           3     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // TIMER                    0      w        0     NONE   float      w
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TYPE                     0   x           2     NONE    uint   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.xyz
            dcl_output o2.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.xyz, v1.xyzx
            mov o2.x, v3.x
            ret 
            // Approximately 5 instruction slots used
                    
        };
        GeometryShader = gsStreamOut;
        PixelShader = NULL;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

