//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cbInstancedGlobals
{
    float4x4 g_mWorldInst[4];           // Offset:    0, size:  256
    float4x4 g_mViewProj;               // Offset:  256, size:   64
}

cbuffer cbPerFrame
{
    float   g_fTime;                    // Offset:    0, size:    4
    float3  g_LightDir;                 // Offset:    4, size:   12
    float3  g_vEyePt;                   // Offset:   16, size:   12
    float3  g_vRight;                   // Offset:   32, size:   12
    float3  g_vUp;                      // Offset:   48, size:   12
    float3  g_vForward;                 // Offset:   64, size:   12
    float4x4 g_mWorldViewProjection;    // Offset:   80, size:   64
    float4x4 g_mInvViewProj;            // Offset:  144, size:   64
    float4x4 g_mWorld;                  // Offset:  208, size:   64
}

cbuffer cbglowlights
{
    uint    g_NumGlowLights;            // Offset:    0, size:    4
    float4  g_vGlowLightPosIntensity[4];// Offset:   16, size:   64
    float4  g_vGlowLightColor[4];       // Offset:   80, size:   64
    float3  g_vGlowLightAttenuation;    // Offset:  144, size:   12
    float3  g_vMeshLightAttenuation;    // Offset:  160, size:   12
}

//
// 12 local object(s)
//
Texture2D g_txMeshTexture;
Texture2D g_txParticleColor;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
DepthStencilState DepthRead
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};
BlendState DeferredBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    BlendEnable[1] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ONE /* 2 */);
    DestBlendAlpha[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
BlendState ForwardBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    BlendEnable[1] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
BlendState CompositeBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    BlendEnable[1] = bool(FALSE /* 0 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
BlendState DisableBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    BlendEnable[1] = bool(FALSE /* 0 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
};
RasterizerState RSWireframe
{
    FillMode = uint(WIREFRAME /* 2 */);
};
RasterizerState RSSolid
{
    FillMode = uint(SOLID /* 3 */);
};

//
// 5 technique(s)
//
technique10 RenderParticlesToBuffer
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12 [unused]
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12 [unused]
            //   float3 g_vUp;                      // Offset:   48 Size:    12 [unused]
            //   float3 g_vForward;                 // Offset:   64 Size:    12 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64
            //
            // }
            //
            // cbuffer cbglowlights
            // {
            //
            //   uint g_NumGlowLights;              // Offset:    0 Size:     4
            //   float4 g_vGlowLightPosIntensity[4];// Offset:   16 Size:    64
            //   float4 g_vGlowLightColor[4];       // Offset:   80 Size:    64
            //   float3 g_vGlowLightAttenuation;    // Offset:  144 Size:    12
            //   float3 g_vMeshLightAttenuation;    // Offset:  160 Size:    12 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            // cbglowlights                      cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // LIFE                     0   x           2     NONE   float   x   
            // THETA                    0   x           3     NONE   float   x   
            // COLOR                    0   xyzw        4     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[16], immediateIndexed
            dcl_constantbuffer CB1[10], dynamicIndexed
            dcl_input v0.xyzw
            dcl_input v1.xy
            dcl_input v2.x
            dcl_input v3.x
            dcl_input v4.xyzw
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xyzw
            dcl_temps 4
            dp4 o0.x, v0.xyzw, cb0[5].xyzw
            dp4 o0.y, v0.xyzw, cb0[6].xyzw
            dp4 o0.z, v0.xyzw, cb0[7].xyzw
            dp4 o0.w, v0.xyzw, cb0[8].xyzw
            dp4 r0.x, v0.xyzw, cb0[13].xyzw
            dp4 r0.y, v0.xyzw, cb0[14].xyzw
            dp4 r0.z, v0.xyzw, cb0[15].xyzw
            mov r1.x, l(1.000000)
            mov r2.xyzw, v4.xyzw
            mov r0.w, l(0)
            mov r1.z, l(0)
            loop 
              uge r1.w, r1.z, cb1[0].x
              breakc_nz r1.w
              add r3.xyz, -r0.xyzx, cb1[r1.z + 1].xyzx
              dp3 r1.y, r3.xyzx, r3.xyzx
              dp2 r1.y, cb1[9].xzxx, r1.xyxx
              div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
              mul r1.y, r1.y, cb1[r1.z + 1].w
              mul r1.w, r1.y, cb1[r1.z + 5].w
              mad r0.w, r1.y, cb1[r1.z + 5].w, r0.w
              mad r2.xyzw, r1.wwww, cb1[r1.z + 5].xyzw, r2.xyzw
              iadd r1.z, r1.z, l(1)
            endloop 
            mov o3.xyzw, r2.xyzw
            mov o1.z, r0.w
            sincos r0.x, r1.x, -v3.x
            mov o1.xy, v1.xyxx
            mov o2.x, r0.x
            mov o2.y, r1.x
            mov o2.z, v2.x
            ret 
            // Approximately 32 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txMeshTexture                   texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_input_ps linear v3.xyzw
            dcl_output o0.xyzw
            dcl_output o1.xyzw
            dcl_temps 2
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
            mul r0.z, r0.y, v2.x
            mad r1.x, v2.y, r0.x, -r0.z
            dp2 r1.y, v2.xyxx, r0.xyxx
            add r0.x, -v2.z, l(1.000000)
            mul r0.x, r0.x, r0.w
            mul o0.xy, r0.xxxx, r1.xyxx
            mul o0.z, r0.x, v1.z
            mov o0.w, r0.x
            mul o1.xyzw, r0.xxxx, v3.xyzw
            ret 
            // Approximately 12 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DeferredBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthRead;
        RasterizerState = RSSolid;
    }

}

technique10 RenderParticles
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12 [unused]
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12 [unused]
            //   float3 g_vUp;                      // Offset:   48 Size:    12 [unused]
            //   float3 g_vForward;                 // Offset:   64 Size:    12 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64
            //
            // }
            //
            // cbuffer cbglowlights
            // {
            //
            //   uint g_NumGlowLights;              // Offset:    0 Size:     4
            //   float4 g_vGlowLightPosIntensity[4];// Offset:   16 Size:    64
            //   float4 g_vGlowLightColor[4];       // Offset:   80 Size:    64
            //   float3 g_vGlowLightAttenuation;    // Offset:  144 Size:    12
            //   float3 g_vMeshLightAttenuation;    // Offset:  160 Size:    12 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            // cbglowlights                      cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // TEXCOORD                 0   xy          1     NONE   float   xy  
            // LIFE                     0   x           2     NONE   float   x   
            // THETA                    0   x           3     NONE   float   x   
            // COLOR                    0   xyzw        4     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[16], immediateIndexed
            dcl_constantbuffer CB1[10], dynamicIndexed
            dcl_input v0.xyzw
            dcl_input v1.xy
            dcl_input v2.x
            dcl_input v3.x
            dcl_input v4.xyzw
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xyzw
            dcl_temps 4
            dp4 o0.x, v0.xyzw, cb0[5].xyzw
            dp4 o0.y, v0.xyzw, cb0[6].xyzw
            dp4 o0.z, v0.xyzw, cb0[7].xyzw
            dp4 o0.w, v0.xyzw, cb0[8].xyzw
            dp4 r0.x, v0.xyzw, cb0[13].xyzw
            dp4 r0.y, v0.xyzw, cb0[14].xyzw
            dp4 r0.z, v0.xyzw, cb0[15].xyzw
            mov r1.x, l(1.000000)
            mov r2.xyzw, v4.xyzw
            mov r0.w, l(0)
            mov r1.z, l(0)
            loop 
              uge r1.w, r1.z, cb1[0].x
              breakc_nz r1.w
              add r3.xyz, -r0.xyzx, cb1[r1.z + 1].xyzx
              dp3 r1.y, r3.xyzx, r3.xyzx
              dp2 r1.y, cb1[9].xzxx, r1.xyxx
              div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
              mul r1.y, r1.y, cb1[r1.z + 1].w
              mul r1.w, r1.y, cb1[r1.z + 5].w
              mad r0.w, r1.y, cb1[r1.z + 5].w, r0.w
              mad r2.xyzw, r1.wwww, cb1[r1.z + 5].xyzw, r2.xyzw
              iadd r1.z, r1.z, l(1)
            endloop 
            mov o3.xyzw, r2.xyzw
            mov o1.z, r0.w
            sincos r0.x, r1.x, -v3.x
            mov o1.xy, v1.xyxx
            mov o2.x, r0.x
            mov o2.y, r1.x
            mov o2.z, v2.x
            ret 
            // Approximately 32 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12
            //   float3 g_vUp;                      // Offset:   48 Size:    12
            //   float3 g_vForward;                 // Offset:   64 Size:    12
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64 [unused]
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txMeshTexture                   texture  float4          2d             t0      1 
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[5], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_input_ps linear v3.xyz
            dcl_output o0.xyzw
            dcl_temps 2
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
            mul r1.x, r0.y, v2.x
            mad r1.x, v2.y, r0.x, -r1.x
            dp2 r0.x, v2.xyxx, r0.xyxx
            mul r1.yzw, r0.xxxx, cb0[3].xxyz
            mad r1.xyz, -r1.xxxx, cb0[2].xyzx, r1.yzwy
            mad r0.xyz, -r0.zzzz, cb0[4].xyzx, r1.xyzx
            dp3 r0.x, r0.xyzx, cb0[0].yzwy
            max r0.x, r0.x, l(0.100000)
            mul r0.xyz, r0.xxxx, v3.xyzx
            add r1.x, -v2.z, l(1.000000)
            mul r0.w, r0.w, r1.x
            mul r1.x, r0.w, v1.z
            mov o0.w, r0.w
            mad r1.yzw, v3.xxyz, r1.xxxx, -r0.xxyz
            mad o0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
            ret 
            // Approximately 18 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = ForwardBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthRead;
        RasterizerState = RSSolid;
    }

}

technique10 CompositeParticlesToScene
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            //
            vs_4_0
            dcl_input v0.xyzw
            dcl_output_siv o0.xyzw, position
            mov o0.xyzw, v0.xyzw
            ret 
            // Approximately 2 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12
            //   float3 g_vUp;                      // Offset:   48 Size:    12
            //   float3 g_vForward;                 // Offset:   64 Size:    12
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64 [unused]
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_txMeshTexture                   texture  float4          2d             t0      1 
            // g_txParticleColor                 texture  float4          2d             t1      1 
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[5], immediateIndexed
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps_siv linear noperspective v0.xy, position
            dcl_output o0.xyzw
            dcl_temps 3
            ftoi r0.xy, v0.xyxx
            mov r0.zw, l(0,0,0,0)
            ld r1.xyzw, r0.xyww, t0.xyzw
            ld r0.xyzw, r0.xyzw, t1.xyzw
            mad r0.w, -r1.x, r1.x, l(1.000000)
            mad r0.w, r1.y, r1.y, r0.w
            sqrt r0.w, r0.w
            mul r2.xyz, r1.yyyy, cb0[3].xyzx
            mad r2.xyz, -r1.xxxx, cb0[2].xyzx, r2.xyzx
            mad r2.xyz, -r0.wwww, cb0[4].xyzx, r2.xyzx
            dp3 r0.w, r2.xyzx, cb0[0].yzwy
            max r0.w, r0.w, l(0.100000)
            mul r2.xyz, r0.wwww, r0.xyzx
            mad r0.xyz, r0.xyzx, r1.zzzz, -r2.xyzx
            mad o0.xyz, r1.zzzz, r0.xyzx, r2.xyzx
            mov o0.w, r1.w
            ret 
            // Approximately 17 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = CompositeBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = RSSolid;
    }

}

technique10 RenderMesh
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12 [unused]
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12 [unused]
            //   float3 g_vUp;                      // Offset:   48 Size:    12 [unused]
            //   float3 g_vForward;                 // Offset:   64 Size:    12 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyz         1     NONE   float   xyz 
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // TEXCOORD                 0   xy          3     NONE   float   xy  
            //
            vs_4_0
            dcl_constantbuffer CB0[16], immediateIndexed
            dcl_input v0.xyzw
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xy
            dp4 o0.x, v0.xyzw, cb0[5].xyzw
            dp4 o0.y, v0.xyzw, cb0[6].xyzw
            dp4 o0.z, v0.xyzw, cb0[7].xyzw
            dp4 o0.w, v0.xyzw, cb0[8].xyzw
            dp4 o1.x, v0.xyzw, cb0[13].xyzw
            dp4 o1.y, v0.xyzw, cb0[14].xyzw
            dp4 o1.z, v0.xyzw, cb0[15].xyzw
            dp3 o2.x, v1.xyzx, cb0[13].xyzx
            dp3 o2.y, v1.xyzx, cb0[14].xyzx
            dp3 o2.z, v1.xyzx, cb0[15].xyzx
            mov o3.xy, v2.xyxx
            ret 
            // Approximately 12 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12 [unused]
            //   float3 g_vUp;                      // Offset:   48 Size:    12 [unused]
            //   float3 g_vForward;                 // Offset:   64 Size:    12 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64 [unused]
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbglowlights
            // {
            //
            //   uint g_NumGlowLights;              // Offset:    0 Size:     4
            //   float4 g_vGlowLightPosIntensity[4];// Offset:   16 Size:    64
            //   float4 g_vGlowLightColor[4];       // Offset:   80 Size:    64
            //   float3 g_vGlowLightAttenuation;    // Offset:  144 Size:    12 [unused]
            //   float3 g_vMeshLightAttenuation;    // Offset:  160 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            // cbglowlights                      cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // WORLDPOS                 0   xyz         1     NONE   float   xyz 
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // TEXCOORD                 0   xy          3     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[11], dynamicIndexed
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 5
            dp3 r0.x, v2.xyzx, v2.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, v2.xyzx
            mov r1.x, l(1.000000)
            mov r2.xyzw, l(0,0,0,0)
            mov r0.w, l(0)
            loop 
              uge r1.w, r0.w, cb1[0].x
              breakc_nz r1.w
              add r3.xyz, -v1.xyzx, cb1[r0.w + 1].xyzx
              dp3 r1.z, r3.xyzx, r3.xyzx
              sqrt r1.y, r1.z
              div r3.xyz, r3.xyzx, r1.yyyy
              dp3 r1.y, cb1[10].xyzx, r1.xyzx
              div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
              mul r1.y, r1.y, cb1[r0.w + 1].w
              mul r4.xyzw, r1.yyyy, cb1[r0.w + 5].xyzw
              dp3_sat r1.y, r3.xyzx, r0.xyzx
              mad r2.xyzw, r4.xyzw, r1.yyyy, r2.xyzw
              iadd r0.w, r0.w, l(1)
            endloop 
            dp3 r0.x, r0.xyzx, cb0[0].yzwy
            max r0.x, r0.x, l(0.100000)
            add r0.xyzw, r0.xxxx, r2.xyzw
            mul o0.xyzw, r0.xyzw, l(0.900000, 0.900000, 0.900000, 0.900000)
            ret 
            // Approximately 26 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
        RasterizerState = RSSolid;
    }

}

technique10 RenderMeshInst
{
    pass P0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbInstancedGlobals
            // {
            //
            //   float4x4 g_mWorldInst[4];          // Offset:    0 Size:   256
            //   float4x4 g_mViewProj;              // Offset:  256 Size:    64
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbInstancedGlobals                cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // SV_INSTANCEID            0   x           3   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyz         1     NONE   float   xyz 
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // TEXCOORD                 0   xy          3     NONE   float   xy  
            //
            vs_4_0
            dcl_constantbuffer CB0[20], dynamicIndexed
            dcl_input v0.xyzw
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input_sgv v3.x, instance_id
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output o3.xy
            dcl_temps 2
            ishl r0.x, v3.x, l(2)
            dp4 r1.w, v0.xyzw, cb0[r0.x + 3].xyzw
            dp4 r1.x, v0.xyzw, cb0[r0.x + 0].xyzw
            dp4 r1.y, v0.xyzw, cb0[r0.x + 1].xyzw
            dp4 r1.z, v0.xyzw, cb0[r0.x + 2].xyzw
            dp4 o0.x, r1.xyzw, cb0[16].xyzw
            dp4 o0.y, r1.xyzw, cb0[17].xyzw
            dp4 o0.z, r1.xyzw, cb0[18].xyzw
            dp4 o0.w, r1.xyzw, cb0[19].xyzw
            mov o1.xyz, r1.xyzx
            dp3 o2.x, v1.xyzx, cb0[r0.x + 0].xyzx
            dp3 o2.y, v1.xyzx, cb0[r0.x + 1].xyzx
            dp3 o2.z, v1.xyzx, cb0[r0.x + 2].xyzx
            mov o3.xy, v2.xyxx
            ret 
            // Approximately 15 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float g_fTime;                     // Offset:    0 Size:     4 [unused]
            //   float3 g_LightDir;                 // Offset:    4 Size:    12
            //   float3 g_vEyePt;                   // Offset:   16 Size:    12 [unused]
            //   float3 g_vRight;                   // Offset:   32 Size:    12 [unused]
            //   float3 g_vUp;                      // Offset:   48 Size:    12 [unused]
            //   float3 g_vForward;                 // Offset:   64 Size:    12 [unused]
            //   float4x4 g_mWorldViewProjection;   // Offset:   80 Size:    64 [unused]
            //   float4x4 g_mInvViewProj;           // Offset:  144 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  208 Size:    64 [unused]
            //
            // }
            //
            // cbuffer cbglowlights
            // {
            //
            //   uint g_NumGlowLights;              // Offset:    0 Size:     4
            //   float4 g_vGlowLightPosIntensity[4];// Offset:   16 Size:    64
            //   float4 g_vGlowLightColor[4];       // Offset:   80 Size:    64
            //   float3 g_vGlowLightAttenuation;    // Offset:  144 Size:    12 [unused]
            //   float3 g_vMeshLightAttenuation;    // Offset:  160 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            // cbglowlights                      cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // WORLDPOS                 0   xyz         1     NONE   float   xyz 
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // TEXCOORD                 0   xy          3     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[11], dynamicIndexed
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 5
            dp3 r0.x, v2.xyzx, v2.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, v2.xyzx
            mov r1.x, l(1.000000)
            mov r2.xyzw, l(0,0,0,0)
            mov r0.w, l(0)
            loop 
              uge r1.w, r0.w, cb1[0].x
              breakc_nz r1.w
              add r3.xyz, -v1.xyzx, cb1[r0.w + 1].xyzx
              dp3 r1.z, r3.xyzx, r3.xyzx
              sqrt r1.y, r1.z
              div r3.xyz, r3.xyzx, r1.yyyy
              dp3 r1.y, cb1[10].xyzx, r1.xyzx
              div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
              mul r1.y, r1.y, cb1[r0.w + 1].w
              mul r4.xyzw, r1.yyyy, cb1[r0.w + 5].xyzw
              dp3_sat r1.y, r3.xyzx, r0.xyzx
              mad r2.xyzw, r4.xyzw, r1.yyyy, r2.xyzw
              iadd r0.w, r0.w, l(1)
            endloop 
            dp3 r0.x, r0.xyzx, cb0[0].yzwy
            max r0.x, r0.x, l(0.100000)
            add r0.xyzw, r0.xxxx, r2.xyzw
            mul o0.xyzw, r0.xyzw, l(0.900000, 0.900000, 0.900000, 0.900000)
            ret 
            // Approximately 26 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = DisableBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
        RasterizerState = RSSolid;
    }

}

