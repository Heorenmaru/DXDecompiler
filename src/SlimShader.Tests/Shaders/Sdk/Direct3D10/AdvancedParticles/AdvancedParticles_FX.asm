//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cb0
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mInvView;                // Offset:   64, size:   64
    float   g_fGlobalTime;              // Offset:  128, size:    4
    float   g_fElapsedTime;             // Offset:  132, size:    4
    float4  g_vFrameGravity;            // Offset:  144, size:   16
}

cbuffer cbUser
{
    float   g_fVolumeSize;              // Offset:    0, size:    4
    float   g_fEmitterSize;             // Offset:    4, size:    4
    float3  g_vVolumeOffsets;           // Offset:   16, size:   12
    float4  g_vParticleColor;           // Offset:   32, size:   16
    float3  g_vEmitterPos;              // Offset:   48, size:   12
}

cbuffer cbImmutable
{
    float3  g_positions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:    0, size:   60
    float2  g_texcoords[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   64, size:   56
    float   g_fParticleRadius = 0.100000001;// Offset:  120, size:    4
    float   g_fParticleDrawRadius = 0.0250000004;// Offset:  124, size:    4
}

//
// 14 local object(s)
//
Texture2D g_txDiffuse;
Texture1D g_txRandom;
Texture3D g_txVolume;
Texture3D g_txVelocity;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
};
SamplerState g_samVolume
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState DisableDepthWrite
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
RasterizerState CullBack
{
    CullMode = uint(BACK /* 3 */);
};
VertexShader vsAdvanceParticles = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cb0
        // {
        //
        //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
        //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
        //   float g_fGlobalTime;               // Offset:  128 Size:     4
        //   float g_fElapsedTime;              // Offset:  132 Size:     4
        //   float4 g_vFrameGravity;            // Offset:  144 Size:    16
        //
        // }
        //
        // cbuffer cbUser
        // {
        //
        //   float g_fVolumeSize;               // Offset:    0 Size:     4
        //   float g_fEmitterSize;              // Offset:    4 Size:     4
        //   float3 g_vVolumeOffsets;           // Offset:   16 Size:    12
        //   float4 g_vParticleColor;           // Offset:   32 Size:    16
        //   float3 g_vEmitterPos;              // Offset:   48 Size:    12
        //
        // }
        //
        // cbuffer cbImmutable
        // {
        //
        //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
        //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0xbf800000 0xbf800000 0x00000000 0x00000000 
        //        0x3f800000 0xbf800000 0x00000000 
        //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
        //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0x00000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 
        //   float g_fParticleRadius;           // Offset:  120 Size:     4
        //      = 0x3dcccccd 
        //   float g_fParticleDrawRadius;       // Offset:  124 Size:     4 [unused]
        //      = 0x3ccccccd 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samPoint                        sampler      NA          NA             s0      1 
        // g_samVolume                       sampler      NA          NA             s1      1 
        // g_txRandom                        texture  float4          1d             t0      1 
        // g_txVolume                        texture  float4          3d             t1      1 
        // g_txVelocity                      texture  float4          3d             t2      1 
        // cb0                               cbuffer      NA          NA            cb0      1 
        // cbUser                            cbuffer      NA          NA            cb1      1 
        // cbImmutable                       cbuffer      NA          NA            cb2      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyzw        0     NONE   float   xyzw
        // LASTPOSITION             0   xyzw        1     NONE   float       
        // COLOR                    0   xyzw        2     NONE   float   xyzw
        // VELOCITY                 0   xyz         3     NONE   float   xyz 
        // ID                       0   x           4     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyzw        0     NONE   float   xyzw
        // LASTPOSITION             0   xyzw        1     NONE   float   xyzw
        // COLOR                    0   xyzw        2     NONE   float   xyzw
        // VELOCITY                 0   xyz         3     NONE   float   xyz 
        // ID                       0   x           4     NONE    uint   x   
        //
        vs_4_0
        dcl_constantbuffer CB0[10], immediateIndexed
        dcl_constantbuffer CB1[4], immediateIndexed
        dcl_constantbuffer CB2[8], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_resource_texture3d (float,float,float,float) t1
        dcl_resource_texture3d (float,float,float,float) t2
        dcl_input v0.xyzw
        dcl_input v2.xyzw
        dcl_input v3.xyz
        dcl_input v4.x
        dcl_output o0.xyzw
        dcl_output o1.xyzw
        dcl_output o2.xyzw
        dcl_output o3.xyz
        dcl_output o4.x
        dcl_temps 6
        lt r0.x, v0.y, l(0.000000)
        if_nz r0.x
          utof r0.x, v4.x
          mul r0.x, r0.x, l(0.000244)
          mad r0.x, cb0[8].x, l(0.000333), r0.x
          sample_l r0.xyzw, r0.x, t0.xyzw, s0, l(0.000000)
          dp3 r0.w, r0.xyzx, r0.xyzx
          rsq r0.w, r0.w
          mul r0.xyz, r0.wwww, r0.xyzx
          mad r0.xyz, r0.xyzx, cb1[0].yyyy, cb1[3].xyzx
          mov o1.xyz, r0.xyzx
          mov o1.w, l(1.000000)
          mov o2.xyzw, cb1[2].xyzw
          mov r1.xyz, l(0,0,0,0)
          mov r0.w, l(1.000000)
        else 
          mov o1.xyzw, v0.xyzw
          mov o2.xyzw, v2.xyzw
          mov r1.xyz, v3.xyzx
          mov r0.xyzw, v0.xyzw
        endif 
        mad r2.xy, cb1[0].xxxx, l(0.500000, 0.500000, 0.000000, 0.000000), v0.xzxx
        div r2.xy, r2.xyxx, cb1[0].xxxx
        add r1.w, -r2.y, cb1[1].y
        div r2.w, v0.y, cb1[0].x
        add r2.xz, r2.xxwx, cb1[1].xxzx
        add r2.y, r1.w, l(1.000000)
        sample_l r3.xyzw, r2.xyzx, t1.xyzw, s1, l(0.000000)
        sample_l r2.xyzw, r2.xyzx, t2.xyzw, s1, l(0.000000)
        dp4 r1.w, r3.xyzw, r0.xyzw
        ne r2.w, r1.w, l(0.000000)
        lt r3.w, r1.w, cb2[7].z
        and r2.w, r2.w, r3.w
        add r1.w, -r1.w, cb2[7].z
        mad r4.xyz, r1.wwww, r3.xyzx, r0.xyzx
        dp3 r1.w, r2.xyzx, r2.xyzx
        rsq r1.w, r1.w
        mul r5.xyz, r1.wwww, r2.xyzx
        dp3 r1.w, r5.xyzx, r3.xyzx
        max r1.w, r1.w, l(0.000000)
        add r3.w, -r1.w, l(1.000000)
        dp3 r4.w, r1.xyzx, r3.xyzx
        add r4.w, r4.w, r4.w
        mad r3.xyz, r3.xyzx, -r4.wwww, r1.xyzx
        mul r3.xyz, r3.xyzx, r3.wwww
        mul r2.xyz, r2.xyzx, r1.wwww
        mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
        movc r0.xyz, r2.wwww, r4.xyzx, r0.xyzx
        movc r1.xyz, r2.wwww, r2.xyzx, r1.xyzx
        mad o0.xyz, r1.xyzx, cb0[8].yyyy, r0.xyzx
        mad o3.xyz, cb0[9].xyzx, cb0[8].yyyy, r1.xyzx
        mov o0.w, r0.w
        mov o4.x, v4.x
        ret 
        // Approximately 54 instruction slots used
            
    };
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 10.1
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cb0
        // {
        //
        //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
        //   float4x4 g_mInvView;               // Offset:   64 Size:    64 [unused]
        //   float g_fGlobalTime;               // Offset:  128 Size:     4
        //   float g_fElapsedTime;              // Offset:  132 Size:     4
        //   float4 g_vFrameGravity;            // Offset:  144 Size:    16
        //
        // }
        //
        // cbuffer cbUser
        // {
        //
        //   float g_fVolumeSize;               // Offset:    0 Size:     4
        //   float g_fEmitterSize;              // Offset:    4 Size:     4
        //   float3 g_vVolumeOffsets;           // Offset:   16 Size:    12
        //   float4 g_vParticleColor;           // Offset:   32 Size:    16
        //   float3 g_vEmitterPos;              // Offset:   48 Size:    12
        //
        // }
        //
        // cbuffer cbImmutable
        // {
        //
        //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
        //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0xbf800000 0xbf800000 0x00000000 0x00000000 
        //        0x3f800000 0xbf800000 0x00000000 
        //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
        //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
        //        0x3f800000 0x3f800000 0x00000000 0x00000000 
        //        0x00000000 0x00000000 0x00000000 0x00000000 
        //        0x3f800000 0x00000000 
        //   float g_fParticleRadius;           // Offset:  120 Size:     4
        //      = 0x3dcccccd 
        //   float g_fParticleDrawRadius;       // Offset:  124 Size:     4 [unused]
        //      = 0x3ccccccd 
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim      HLSL Bind  Count
        // ------------------------------ ---------- ------- ----------- -------------- ------
        // g_samPoint                        sampler      NA          NA             s0      1 
        // g_samVolume                       sampler      NA          NA             s1      1 
        // g_txRandom                        texture  float4          1d             t0      1 
        // g_txVolume                        texture  float4          3d             t1      1 
        // g_txVelocity                      texture  float4          3d             t2      1 
        // cb0                               cbuffer      NA          NA            cb0      1 
        // cbUser                            cbuffer      NA          NA            cb1      1 
        // cbImmutable                       cbuffer      NA          NA            cb2      1 
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyzw        0     NONE   float   xyzw
        // LASTPOSITION             0   xyzw        1     NONE   float       
        // COLOR                    0   xyzw        2     NONE   float   xyzw
        // VELOCITY                 0   xyz         3     NONE   float   xyz 
        // ID                       0   x           4     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyzw        0     NONE   float   xyzw
        // LASTPOSITION             0   xyzw        1     NONE   float   xyzw
        // COLOR                    0   xyzw        2     NONE   float   xyzw
        // VELOCITY                 0   xyz         3     NONE   float   xyz 
        // ID                       0   x           4     NONE    uint   x   
        //
        vs_4_0
        dcl_constantbuffer CB0[10], immediateIndexed
        dcl_constantbuffer CB1[4], immediateIndexed
        dcl_constantbuffer CB2[8], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_resource_texture3d (float,float,float,float) t1
        dcl_resource_texture3d (float,float,float,float) t2
        dcl_input v0.xyzw
        dcl_input v2.xyzw
        dcl_input v3.xyz
        dcl_input v4.x
        dcl_output o0.xyzw
        dcl_output o1.xyzw
        dcl_output o2.xyzw
        dcl_output o3.xyz
        dcl_output o4.x
        dcl_temps 6
        lt r0.x, v0.y, l(0.000000)
        if_nz r0.x
          utof r0.x, v4.x
          mul r0.x, r0.x, l(0.000244)
          mad r0.x, cb0[8].x, l(0.000333), r0.x
          sample_l r0.xyzw, r0.x, t0.xyzw, s0, l(0.000000)
          dp3 r0.w, r0.xyzx, r0.xyzx
          rsq r0.w, r0.w
          mul r0.xyz, r0.wwww, r0.xyzx
          mad r0.xyz, r0.xyzx, cb1[0].yyyy, cb1[3].xyzx
          mov o1.xyz, r0.xyzx
          mov o1.w, l(1.000000)
          mov o2.xyzw, cb1[2].xyzw
          mov r1.xyz, l(0,0,0,0)
          mov r0.w, l(1.000000)
        else 
          mov o1.xyzw, v0.xyzw
          mov o2.xyzw, v2.xyzw
          mov r1.xyz, v3.xyzx
          mov r0.xyzw, v0.xyzw
        endif 
        mad r2.xy, cb1[0].xxxx, l(0.500000, 0.500000, 0.000000, 0.000000), v0.xzxx
        div r2.xy, r2.xyxx, cb1[0].xxxx
        add r1.w, -r2.y, cb1[1].y
        div r2.w, v0.y, cb1[0].x
        add r2.xz, r2.xxwx, cb1[1].xxzx
        add r2.y, r1.w, l(1.000000)
        sample_l r3.xyzw, r2.xyzx, t1.xyzw, s1, l(0.000000)
        sample_l r2.xyzw, r2.xyzx, t2.xyzw, s1, l(0.000000)
        dp4 r1.w, r3.xyzw, r0.xyzw
        ne r2.w, r1.w, l(0.000000)
        lt r3.w, r1.w, cb2[7].z
        and r2.w, r2.w, r3.w
        add r1.w, -r1.w, cb2[7].z
        mad r4.xyz, r1.wwww, r3.xyzx, r0.xyzx
        dp3 r1.w, r2.xyzx, r2.xyzx
        rsq r1.w, r1.w
        mul r5.xyz, r1.wwww, r2.xyzx
        dp3 r1.w, r5.xyzx, r3.xyzx
        max r1.w, r1.w, l(0.000000)
        add r3.w, -r1.w, l(1.000000)
        dp3 r4.w, r1.xyzx, r3.xyzx
        add r4.w, r4.w, r4.w
        mad r3.xyz, r3.xyzx, -r4.wwww, r1.xyzx
        mul r3.xyz, r3.xyzx, r3.wwww
        mul r2.xyz, r2.xyzx, r1.wwww
        mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
        movc r0.xyz, r2.wwww, r4.xyzx, r0.xyzx
        movc r1.xyz, r2.wwww, r2.xyzx, r1.xyzx
        mad o0.xyz, r1.xyzx, cb0[8].yyyy, r0.xyzx
        mad o3.xyz, cb0[9].xyzx, cb0[8].yyyy, r1.xyzx
        mov o0.w, r0.w
        mov o4.x, v4.x
        ret 
        // Approximately 54 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyzw; LASTPOSITION.xyzw; COLOR.xyzw; VELOCITY.xyz; ID.x" */;

//
// 2 technique(s)
//
technique10 RenderParticles
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 
            //   float g_fParticleRadius;           // Offset:  120 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_fParticleDrawRadius;       // Offset:  124 Size:     4
            //      = 0x3ccccccd 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbImmutable                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyz 
            // LASTPOSITION             0   xyzw        1     NONE   float       
            // COLOR                    0   xyzw        2     NONE   float   xyz 
            // VELOCITY                 0   xyz         3     NONE   float       
            // ID                       0   x           4     NONE    uint       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // RADIUS                   0      w        0     NONE   float      w
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[8], immediateIndexed
            dcl_input v0.xyz
            dcl_input v2.xyz
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.xyzw
            mov o0.xyz, v0.xyzx
            mov o0.w, cb0[7].w
            mov o1.xyz, v2.xyzx
            mov o1.w, l(1.000000)
            ret 
            // Approximately 5 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mInvView;               // Offset:   64 Size:    64
            //   float g_fGlobalTime;               // Offset:  128 Size:     4 [unused]
            //   float g_fElapsedTime;              // Offset:  132 Size:     4 [unused]
            //   float4 g_vFrameGravity;            // Offset:  144 Size:    16 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 
            //   float g_fParticleRadius;           // Offset:  120 Size:     4 [unused]
            //      = 0x3dcccccd 
            //   float g_fParticleDrawRadius;       // Offset:  124 Size:     4 [unused]
            //      = 0x3ccccccd 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // RADIUS                   0      w        0     NONE   float      w
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            gs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_constantbuffer CB1[8], dynamicIndexed
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].xyzw
            dcl_temps 3
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o2.xyzw
            dcl_maxout 4
            mov r0.w, l(1.000000)
            mov r1.x, l(0)
            loop 
              ige r1.y, r1.x, l(4)
              breakc_nz r1.y
              mul r1.yzw, v[0][0].wwww, cb1[r1.x + 0].xxyz
              dp3 r2.x, r1.yzwy, cb0[4].xyzx
              dp3 r2.y, r1.yzwy, cb0[5].xyzx
              dp3 r2.z, r1.yzwy, cb0[6].xyzx
              add r0.xyz, r2.xyzx, v[0][0].xyzx
              dp4 r1.y, r0.xyzw, cb0[0].xyzw
              dp4 r1.z, r0.xyzw, cb0[1].xyzw
              dp4 r1.w, r0.xyzw, cb0[2].xyzw
              dp4 r0.x, r0.xyzw, cb0[3].xyzw
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r0.x
              mov o1.xy, cb1[r1.x + 4].xyxx
              mov o2.xyzw, v[0][1].xyzw
              emit 
              iadd r1.x, r1.x, l(1)
            endloop 
            cut 
            ret 
            // Approximately 25 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COLOR                    0   xyzw        2     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v2.xyzw
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyxx, t0.xyzw, s0
            mul o0.xyzw, r0.xyzw, v2.xyzw
            ret 
            // Approximately 3 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AdditiveBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthWrite;
        RasterizerState = CullBack;
    }

}

technique10 AdvanceParticles
{
    pass p0
    {
        VertexShader = vsAdvanceParticles;
        GeometryShader = gsStreamOut;
        PixelShader = NULL;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = CullBack;
    }

}

