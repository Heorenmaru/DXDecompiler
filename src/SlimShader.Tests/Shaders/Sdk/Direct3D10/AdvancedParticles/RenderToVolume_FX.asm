//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 3 local buffer(s)
//
cbuffer cbAnimMatrices
{
    float4x4 g_mBoneWorld[255];         // Offset:    0, size: 16320
    float4x4 g_mBonePrev[255];          // Offset: 16320, size: 16320
}

cbuffer cb0
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mViewProj;               // Offset:   64, size:   64
    float4x4 g_mWorld;                  // Offset:  128, size:   64
    float4x4 g_mWorldPrev;              // Offset:  192, size:   64
    float   g_fElapsedTime;             // Offset:  256, size:    4
    float   g_fPlaneStart;              // Offset:  260, size:    4
    float   g_fPlaneStep;               // Offset:  264, size:    4
}

cbuffer cbPerSlice
{
    float4  g_vFarClipPlane;            // Offset:    0, size:   16
    float4  g_vNearClipPlane;           // Offset:   16, size:   16
}

//
// 5 local object(s)
//
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
RasterizerState CullNone
{
    CullMode = uint(NONE /* 1 */);
};
RasterizerState CullBack
{
    CullMode = uint(BACK /* 3 */);
};

//
// 4 technique(s)
//
technique10 RenderScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64 [unused]
            //   float g_fElapsedTime;              // Offset:  256 Size:     4 [unused]
            //   float g_fPlaneStart;               // Offset:  260 Size:     4 [unused]
            //   float g_fPlaneStep;                // Offset:  264 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXCOORD                 0   xy          2     NONE   float       
            // SV_INSTANCEID            0   x           3   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyzw        1     NONE   float   xyzw
            // INSTANCEID               0   x           2     NONE    uint   x   
            //
            vs_4_0
            dcl_constantbuffer CB0[12], immediateIndexed
            dcl_input v0.xyz
            dcl_input_sgv v3.x, instance_id
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.x
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp4 o1.x, r0.xyzw, cb0[8].xyzw
            dp4 o1.y, r0.xyzw, cb0[9].xyzw
            dp4 o1.z, r0.xyzw, cb0[10].xyzw
            dp4 o1.w, r0.xyzw, cb0[11].xyzw
            mov o2.x, v3.x
            ret 
            // Approximately 12 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64 [unused]
            //   float g_fElapsedTime;              // Offset:  256 Size:     4 [unused]
            //   float g_fPlaneStart;               // Offset:  260 Size:     4
            //   float g_fPlaneStep;                // Offset:  264 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyzw        1     NONE   float   xyzw
            // INSTANCEID               0   x           2     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyzw        0     NONE   float   xyzw
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            // SV_RENDERTARGETARRAYINDEX     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_constantbuffer CB0[17], immediateIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyzw
            dcl_input v[3][2].x
            dcl_temps 3
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xyzw
            dcl_output o1.xy
            dcl_output_siv o2.xyzw, position
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 3
            add r0.xyz, -v[0][1].zxyz, v[1][1].zxyz
            add r1.xyz, -v[0][1].yzxy, v[2][1].yzxy
            mul r2.xyz, r0.xyzx, r1.xyzx
            mad r0.xyz, r0.zxyz, r1.yzxy, -r2.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            mov o0.xyz, r0.xyzx
            dp3 r0.w, v[0][1].xyzx, r0.xyzx
            mov o0.w, -r0.w
            utof r1.x, v[0][2].x
            mad r1.x, cb0[16].z, r1.x, cb0[16].y
            mov r1.y, -r1.x
            mov r1.xz, l(1.000000,0,-1.000000,0)
            dp2 r2.x, v[0][1].ywyy, r1.xyxx
            mov o1.x, r2.x
            iadd r2.x, l(1), v[0][2].x
            utof r2.x, r2.x
            mad r1.w, cb0[16].z, r2.x, cb0[16].y
            dp2 r2.x, v[0][1].ywyy, r1.zwzz
            mov o1.y, r2.x
            mov o2.xyzw, v[0][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            mov o0.xyz, r0.xyzx
            mov o0.w, -r0.w
            dp2 r2.x, v[1][1].ywyy, r1.xyxx
            dp2 r1.x, v[2][1].ywyy, r1.xyxx
            mov o1.x, r2.x
            dp2 r1.y, v[1][1].ywyy, r1.zwzz
            dp2 r1.z, v[2][1].ywyy, r1.zwzz
            mov o1.y, r1.y
            mov o2.xyzw, v[1][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            mov o0.xyz, r0.xyzx
            mov o0.w, -r0.w
            mov o1.x, r1.x
            mov o1.y, r1.z
            mov o2.xyzw, v[2][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            ret 
            // Approximately 43 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyzw        0     NONE   float   xyzw
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_input_ps linear v0.xyzw
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            lt r0.x, v1.x, l(0.000000)
            discard_nz r0.x
            lt r0.x, v1.y, l(0.000000)
            discard_nz r0.x
            mov o0.xyzw, v0.xyzw
            ret 
            // Approximately 6 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = CullBack;
    }

}

technique10 RenderAnimScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbAnimMatrices
            // {
            //
            //   float4x4 g_mBoneWorld[255];        // Offset:    0 Size: 16320
            //   float4x4 g_mBonePrev[255];         // Offset: 16320 Size: 16320 [unused]
            //
            // }
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64 [unused]
            //   float g_fElapsedTime;              // Offset:  256 Size:     4 [unused]
            //   float g_fPlaneStart;               // Offset:  260 Size:     4 [unused]
            //   float g_fPlaneStep;                // Offset:  264 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbAnimMatrices                    cbuffer      NA          NA            cb0      1 
            // cb0                               cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // WEIGHTS                  0   xyzw        1     NONE   float   xyzw
            // BONES                    0   xyzw        2     NONE    uint   xyzw
            // NORMAL                   0   xyz         3     NONE   float       
            // TEXCOORD                 0   xy          4     NONE   float       
            // TANGENT                  0   xyz         5     NONE   float       
            // SV_INSTANCEID            0   x           6   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyzw        1     NONE   float   xyzw
            // INSTANCEID               0   x           2     NONE    uint   x   
            //
            vs_4_0
            dcl_constantbuffer CB0[1020], dynamicIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyzw
            dcl_input v2.xyzw
            dcl_input_sgv v6.x, instance_id
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.x
            dcl_temps 4
            ishl r0.xyzw, v2.xyzw, l(2)
            mov r1.xyz, v0.xyzx
            mov r1.w, l(1.000000)
            dp4 r2.x, r1.xyzw, cb0[r0.y + 0].xyzw
            dp4 r2.y, r1.xyzw, cb0[r0.y + 1].xyzw
            dp4 r2.z, r1.xyzw, cb0[r0.y + 2].xyzw
            dp4 r2.w, r1.xyzw, cb0[r0.y + 3].xyzw
            mul r2.xyzw, r2.xyzw, v1.yyyy
            dp4 r3.x, r1.xyzw, cb0[r0.x + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.x + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.x + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.x + 3].xyzw
            mad r2.xyzw, v1.xxxx, r3.xyzw, r2.xyzw
            dp4 r3.x, r1.xyzw, cb0[r0.z + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.z + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.z + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.z + 3].xyzw
            mad r2.xyzw, v1.zzzz, r3.xyzw, r2.xyzw
            dp4 r3.x, r1.xyzw, cb0[r0.w + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.w + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.w + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.w + 3].xyzw
            mad r0.xyzw, v1.wwww, r3.xyzw, r2.xyzw
            dp4 o0.x, r0.xyzw, cb1[4].xyzw
            dp4 o0.y, r0.xyzw, cb1[5].xyzw
            dp4 o0.z, r0.xyzw, cb1[6].xyzw
            dp4 o0.w, r0.xyzw, cb1[7].xyzw
            mov o1.xyzw, r0.xyzw
            mov o2.x, v6.x
            ret 
            // Approximately 30 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64 [unused]
            //   float g_fElapsedTime;              // Offset:  256 Size:     4 [unused]
            //   float g_fPlaneStart;               // Offset:  260 Size:     4
            //   float g_fPlaneStep;                // Offset:  264 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // WORLDPOS                 0   xyzw        1     NONE   float   xyzw
            // INSTANCEID               0   x           2     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyzw        0     NONE   float   xyzw
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            // SV_RENDERTARGETARRAYINDEX     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_constantbuffer CB0[17], immediateIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyzw
            dcl_input v[3][2].x
            dcl_temps 3
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xyzw
            dcl_output o1.xy
            dcl_output_siv o2.xyzw, position
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 3
            add r0.xyz, -v[0][1].zxyz, v[1][1].zxyz
            add r1.xyz, -v[0][1].yzxy, v[2][1].yzxy
            mul r2.xyz, r0.xyzx, r1.xyzx
            mad r0.xyz, r0.zxyz, r1.yzxy, -r2.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            mov o0.xyz, r0.xyzx
            dp3 r0.w, v[0][1].xyzx, r0.xyzx
            mov o0.w, -r0.w
            utof r1.x, v[0][2].x
            mad r1.x, cb0[16].z, r1.x, cb0[16].y
            mov r1.y, -r1.x
            mov r1.xz, l(1.000000,0,-1.000000,0)
            dp2 r2.x, v[0][1].ywyy, r1.xyxx
            mov o1.x, r2.x
            iadd r2.x, l(1), v[0][2].x
            utof r2.x, r2.x
            mad r1.w, cb0[16].z, r2.x, cb0[16].y
            dp2 r2.x, v[0][1].ywyy, r1.zwzz
            mov o1.y, r2.x
            mov o2.xyzw, v[0][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            mov o0.xyz, r0.xyzx
            mov o0.w, -r0.w
            dp2 r2.x, v[1][1].ywyy, r1.xyxx
            dp2 r1.x, v[2][1].ywyy, r1.xyxx
            mov o1.x, r2.x
            dp2 r1.y, v[1][1].ywyy, r1.zwzz
            dp2 r1.z, v[2][1].ywyy, r1.zwzz
            mov o1.y, r1.y
            mov o2.xyzw, v[1][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            mov o0.xyz, r0.xyzx
            mov o0.w, -r0.w
            mov o1.x, r1.x
            mov o1.y, r1.z
            mov o2.xyzw, v[2][0].xyzw
            mov o3.x, v[0][2].x
            emit 
            ret 
            // Approximately 43 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // NORMAL                   0   xyzw        0     NONE   float   xyzw
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_input_ps linear v0.xyzw
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            lt r0.x, v1.x, l(0.000000)
            discard_nz r0.x
            lt r0.x, v1.y, l(0.000000)
            discard_nz r0.x
            mov o0.xyzw, v0.xyzw
            ret 
            // Approximately 6 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = CullNone;
    }

}

technique10 RenderVelocity
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64
            //   float g_fElapsedTime;              // Offset:  256 Size:     4
            //   float g_fPlaneStart;               // Offset:  260 Size:     4
            //   float g_fPlaneStep;                // Offset:  264 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cb0                               cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXCOORD                 0   xy          2     NONE   float       
            // SV_INSTANCEID            0   x           3   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // PLANEDIST                0   xy          1     NONE   float   xy  
            // VELOCITY                 0   xyz         2     NONE   float   xyz 
            // INSTANCEID               0   x           3     NONE    uint   x   
            //
            vs_4_0
            dcl_constantbuffer CB0[17], immediateIndexed
            dcl_input v0.xyz
            dcl_input_sgv v3.x, instance_id
            dcl_output o0.xyzw
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.x
            dcl_temps 3
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            utof r1.x, v3.x
            mad r1.x, cb0[16].z, r1.x, cb0[16].y
            mov r1.y, -r1.x
            mov r1.xz, l(1.000000,0,-1.000000,0)
            dp4 r2.w, r0.xyzw, cb0[11].xyzw
            dp4 r2.y, r0.xyzw, cb0[9].xyzw
            dp2 o1.x, r2.ywyy, r1.xyxx
            iadd r1.x, v3.x, l(1)
            utof r1.x, r1.x
            mad r1.w, cb0[16].z, r1.x, cb0[16].y
            dp2 o1.y, r2.ywyy, r1.zwzz
            dp4 r2.x, r0.xyzw, cb0[8].xyzw
            dp4 r2.z, r0.xyzw, cb0[10].xyzw
            dp4 r1.x, r0.xyzw, cb0[12].xyzw
            dp4 r1.y, r0.xyzw, cb0[13].xyzw
            dp4 r1.z, r0.xyzw, cb0[14].xyzw
            add r0.xyz, -r1.xyzx, r2.xyzx
            div o2.xyz, r0.xyzx, cb0[16].xxxx
            mov o3.x, v3.x
            ret 
            // Approximately 26 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // PLANEDIST                0   xy          1     NONE   float   xy  
            // VELOCITY                 0   xyz         2     NONE   float   xyz 
            // INSTANCEID               0   x           3     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // VELOCITY                 0   xyz         0     NONE   float   xyz 
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            // SV_RENDERTARGETARRAYINDEX     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_input v[3][0].xyzw
            dcl_input v[3][1].xy
            dcl_input v[3][2].xyz
            dcl_input v[3][3].x
            dcl_temps 1
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output_siv o2.xyzw, position
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 3
            mov r0.x, l(0)
            loop 
              ige r0.y, r0.x, l(3)
              breakc_nz r0.y
              mov o0.xyz, v[r0.x + 0][2].xyzx
              mov o1.xy, v[r0.x + 0][1].xyxx
              mov o2.xyzw, v[r0.x + 0][0].xyzw
              mov o3.x, v[r0.x + 0][3].x
              emit 
              iadd r0.x, r0.x, l(1)
            endloop 
            ret 
            // Approximately 12 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // VELOCITY                 0   xyz         0     NONE   float   xyz 
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_input_ps linear v0.xyz
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            lt r0.x, v1.x, l(0.000000)
            discard_nz r0.x
            lt r0.x, v1.y, l(0.000000)
            discard_nz r0.x
            mov o0.xyz, v0.xyzx
            mov o0.w, l(1.000000)
            ret 
            // Approximately 7 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = CullNone;
    }

}

technique10 RenderAnimVelocity
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbAnimMatrices
            // {
            //
            //   float4x4 g_mBoneWorld[255];        // Offset:    0 Size: 16320
            //   float4x4 g_mBonePrev[255];         // Offset: 16320 Size: 16320
            //
            // }
            //
            // cbuffer cb0
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mWorldPrev;             // Offset:  192 Size:    64 [unused]
            //   float g_fElapsedTime;              // Offset:  256 Size:     4
            //   float g_fPlaneStart;               // Offset:  260 Size:     4
            //   float g_fPlaneStep;                // Offset:  264 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbAnimMatrices                    cbuffer      NA          NA            cb0      1 
            // cb0                               cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // WEIGHTS                  0   xyzw        1     NONE   float   xyzw
            // BONES                    0   xyzw        2     NONE    uint   xyzw
            // NORMAL                   0   xyz         3     NONE   float       
            // TEXCOORD                 0   xy          4     NONE   float       
            // TANGENT                  0   xyz         5     NONE   float       
            // SV_INSTANCEID            0   x           6   INSTID    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // PLANEDIST                0   xy          1     NONE   float   xy  
            // VELOCITY                 0   xyz         2     NONE   float   xyz 
            // INSTANCEID               0   x           3     NONE    uint   x   
            //
            vs_4_0
            dcl_constantbuffer CB0[2040], dynamicIndexed
            dcl_constantbuffer CB1[17], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyzw
            dcl_input v2.xyzw
            dcl_input_sgv v6.x, instance_id
            dcl_output o0.xyzw
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.x
            dcl_temps 5
            ishl r0.xyzw, v2.xyzw, l(2)
            mov r1.xyz, v0.xyzx
            mov r1.w, l(1.000000)
            dp4 r2.x, r1.xyzw, cb0[r0.y + 0].xyzw
            dp4 r2.y, r1.xyzw, cb0[r0.y + 1].xyzw
            dp4 r2.z, r1.xyzw, cb0[r0.y + 2].xyzw
            dp4 r2.w, r1.xyzw, cb0[r0.y + 3].xyzw
            mul r2.xyzw, r2.xyzw, v1.yyyy
            dp4 r3.x, r1.xyzw, cb0[r0.x + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.x + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.x + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.x + 3].xyzw
            mad r2.xyzw, v1.xxxx, r3.xyzw, r2.xyzw
            dp4 r3.x, r1.xyzw, cb0[r0.z + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.z + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.z + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.z + 3].xyzw
            mad r2.xyzw, v1.zzzz, r3.xyzw, r2.xyzw
            dp4 r3.x, r1.xyzw, cb0[r0.w + 0].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.w + 1].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.w + 2].xyzw
            dp4 r3.w, r1.xyzw, cb0[r0.w + 3].xyzw
            mad r2.xyzw, v1.wwww, r3.xyzw, r2.xyzw
            dp4 o0.x, r2.xyzw, cb1[4].xyzw
            dp4 o0.y, r2.xyzw, cb1[5].xyzw
            dp4 o0.z, r2.xyzw, cb1[6].xyzw
            dp4 o0.w, r2.xyzw, cb1[7].xyzw
            utof r3.x, v6.x
            mad r3.x, cb1[16].z, r3.x, cb1[16].y
            mov r3.y, -r3.x
            mov r3.xz, l(1.000000,0,-1.000000,0)
            dp2 o1.x, r2.ywyy, r3.xyxx
            iadd r3.x, v6.x, l(1)
            utof r3.x, r3.x
            mad r3.w, cb1[16].z, r3.x, cb1[16].y
            dp2 o1.y, r2.ywyy, r3.zwzz
            dp4 r3.x, r1.xyzw, cb0[r0.y + 1020].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.y + 1021].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.y + 1022].xyzw
            mul r3.xyz, r3.xyzx, v1.yyyy
            dp4 r4.x, r1.xyzw, cb0[r0.x + 1020].xyzw
            dp4 r4.y, r1.xyzw, cb0[r0.x + 1021].xyzw
            dp4 r4.z, r1.xyzw, cb0[r0.x + 1022].xyzw
            mad r3.xyz, v1.xxxx, r4.xyzx, r3.xyzx
            dp4 r4.x, r1.xyzw, cb0[r0.z + 1020].xyzw
            dp4 r4.y, r1.xyzw, cb0[r0.z + 1021].xyzw
            dp4 r4.z, r1.xyzw, cb0[r0.z + 1022].xyzw
            mad r0.xyz, v1.zzzz, r4.xyzx, r3.xyzx
            dp4 r3.x, r1.xyzw, cb0[r0.w + 1020].xyzw
            dp4 r3.y, r1.xyzw, cb0[r0.w + 1021].xyzw
            dp4 r3.z, r1.xyzw, cb0[r0.w + 1022].xyzw
            mad r0.xyz, v1.wwww, r3.xyzx, r0.xyzx
            add r0.xyz, -r0.xyzx, r2.xyzx
            div o2.xyz, r0.xyzx, cb1[16].xxxx
            mov o3.x, v6.x
            ret 
            // Approximately 56 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyzw        0     NONE   float   xyzw
            // PLANEDIST                0   xy          1     NONE   float   xy  
            // VELOCITY                 0   xyz         2     NONE   float   xyz 
            // INSTANCEID               0   x           3     NONE    uint   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // VELOCITY                 0   xyz         0     NONE   float   xyz 
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            // SV_POSITION              0   xyzw        2      POS   float   xyzw
            // SV_RENDERTARGETARRAYINDEX     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_input v[3][0].xyzw
            dcl_input v[3][1].xy
            dcl_input v[3][2].xyz
            dcl_input v[3][3].x
            dcl_temps 1
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output o0.xyz
            dcl_output o1.xy
            dcl_output_siv o2.xyzw, position
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 3
            mov r0.x, l(0)
            loop 
              ige r0.y, r0.x, l(3)
              breakc_nz r0.y
              mov o0.xyz, v[r0.x + 0][2].xyzx
              mov o1.xy, v[r0.x + 0][1].xyxx
              mov o2.xyzw, v[r0.x + 0][0].xyzw
              mov o3.x, v[r0.x + 0][3].x
              emit 
              iadd r0.x, r0.x, l(1)
            endloop 
            ret 
            // Approximately 12 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // VELOCITY                 0   xyz         0     NONE   float   xyz 
            // CLIPDISTANCE             0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_input_ps linear v0.xyz
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            lt r0.x, v1.x, l(0.000000)
            discard_nz r0.x
            lt r0.x, v1.y, l(0.000000)
            discard_nz r0.x
            mov o0.xyz, v0.xyzx
            mov o0.w, l(1.000000)
            ret 
            // Approximately 7 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = CullNone;
    }

}

