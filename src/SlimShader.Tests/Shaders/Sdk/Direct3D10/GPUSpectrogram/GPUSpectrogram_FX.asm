//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 2 local buffer(s)
//
cbuffer cbOnce
{
    float2  g_TextureSize;              // Offset:    0, size:    8
}

cbuffer cbManyPerFrame
{
    float   g_WR;                       // Offset:    0, size:    4
    float   g_WI;                       // Offset:    4, size:    4
    uint    g_MMAX;                     // Offset:    8, size:    4
    uint    g_M;                        // Offset:   12, size:    4
    uint    g_ISTEP;                    // Offset:   16, size:    4
}

//
// 9 local object(s)
//
Texture2D g_txSource;
SamplerState g_samPointClamp
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState AdditiveAlphaBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
RasterizerState DisableCulling
{
    CullMode = uint(NONE /* 1 */);
};
RasterizerState EnableCulling
{
    CullMode = uint(BACK /* 3 */);
};

//
// 3 technique(s)
//
technique10 Reverse
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE    uint   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            vs_4_0
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            utof o1.xy, v1.xyxx
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnce
            // {
            //
            //   float2 g_TextureSize;              // Offset:    0 Size:     8
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txSource                        texture  float2          2d             t0      1 
            // cbOnce                            cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            ftou r0.x, v1.x
            ushr r0.y, r0.x, l(1)
            ishl r0.x, r0.x, l(1)
            and r0.xy, r0.xyxx, l(0xaaaaaaaa, 0x55555555, 0, 0)
            iadd r0.x, r0.x, r0.y
            ushr r0.y, r0.x, l(2)
            ishl r0.x, r0.x, l(2)
            and r0.xy, r0.xyxx, l(0xcccccccc, 0x33333333, 0, 0)
            iadd r0.x, r0.x, r0.y
            ushr r0.y, r0.x, l(4)
            ishl r0.x, r0.x, l(4)
            and r0.xy, r0.xyxx, l(0xf0f0f0f0, 0x0f0f0f0f, 0, 0)
            iadd r0.x, r0.x, r0.y
            ushr r0.y, r0.x, l(8)
            ishl r0.x, r0.x, l(8)
            and r0.xy, r0.xyxx, l(0xff00ff00, 0x00ff00ff, 0, 0)
            iadd r0.x, r0.x, r0.y
            ushr r0.x, r0.x, l(7)
            and r0.x, r0.x, l(511)
            utof r0.x, r0.x
            mov r0.y, v1.y
            div r0.xy, r0.xyxx, cb0[0].xyxx
            sample r0.xyzw, r0.xyxx, t0.xyzw, s0
            mov o0.xy, r0.xyxx
            mov o0.zw, l(0,0,0,0)
            ret 
            // Approximately 26 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

technique10 FFTInner
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE    uint   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            vs_4_0
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            utof o1.xy, v1.xyxx
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnce
            // {
            //
            //   float2 g_TextureSize;              // Offset:    0 Size:     8
            //
            // }
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_WR;                        // Offset:    0 Size:     4
            //   float g_WI;                        // Offset:    4 Size:     4
            //   uint g_MMAX;                       // Offset:    8 Size:     4
            //   uint g_M;                          // Offset:   12 Size:     4
            //   uint g_ISTEP;                      // Offset:   16 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txSource                        texture  float2          2d             t0      1 
            // cbOnce                            cbuffer      NA          NA            cb0      1 
            // cbManyPerFrame                    cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 3
            utof r0.x, cb1[0].w
            add r0.y, -r0.x, v1.x
            utof r0.z, cb1[1].x
            mul r0.w, r0.z, r0.y
            ge r0.w, r0.w, -r0.w
            movc r0.z, r0.w, r0.z, -r0.z
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
            mul r0.y, r0.w, r0.y
            frc r0.y, r0.y
            mul r0.y, r0.y, r0.z
            ftou r0.y, r0.y
            ieq r0.z, r0.y, cb1[0].z
            ge r0.x, v1.x, r0.x
            and r0.z, r0.x, r0.z
            if_nz r0.z
              ftou r0.z, v1.x
              iadd r0.w, r0.z, -cb1[0].z
              mov r1.yw, v1.yyyy
              utof r1.xz, r0.zzwz
              div r1.xyzw, r1.xyzw, cb0[0].xyxy
              sample r2.xyzw, r1.xyxx, t0.xyzw, s0
              sample r1.xyzw, r1.zwzz, t0.xyzw, s0
              mul r0.z, r2.y, cb1[0].y
              mad r0.z, cb1[0].x, r2.x, -r0.z
              dp2 r0.w, cb1[0].yxyy, r2.xyxx
              add r2.xy, -r0.zwzz, r1.xyxx
            else 
              div r0.zw, v1.xxxy, cb0[0].xxxy
              sample r2.xyzw, r0.zwzz, t0.xyzw, s0
            endif 
            ieq r0.y, r0.y, l(0)
            and r0.x, r0.x, r0.y
            if_nz r0.x
              ftou r0.x, v1.x
              iadd r0.y, r0.x, cb1[0].z
              mov r1.yw, v1.yyyy
              utof r1.xz, r0.yyxy
              div r0.xyzw, r1.xyzw, cb0[0].xyxy
              sample r1.xyzw, r0.xyxx, t0.xyzw, s0
              sample r0.xyzw, r0.zwzz, t0.xyzw, s0
              mul r0.z, r1.y, cb1[0].y
              mad r0.z, cb1[0].x, r1.x, -r0.z
              dp2 r0.w, cb1[0].yxyy, r1.xyxx
              add r2.xy, r0.zwzz, r0.xyxx
            endif 
            mov o0.xy, r2.xyxx
            mov o0.zw, l(0,0,0,0)
            ret 
            // Approximately 48 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

technique10 RenderQuad
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE    uint   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            vs_4_0
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            utof o1.xy, v1.xyxx
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnce
            // {
            //
            //   float2 g_TextureSize;              // Offset:    0 Size:     8
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txSource                        texture  float2          2d             t0      1 
            // cbOnce                            cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xy
            dcl_output o0.xyzw
            dcl_temps 1
            div r0.xy, v1.xyxx, cb0[0].xyxx
            sample r0.xyzw, r0.xyxx, t0.xyzw, s0
            mov o0.xy, |r0.xyxx|
            mov o0.zw, l(0,0,0,0)
            ret 
            // Approximately 5 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

