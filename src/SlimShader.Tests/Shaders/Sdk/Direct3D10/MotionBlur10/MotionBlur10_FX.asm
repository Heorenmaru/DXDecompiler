//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 4 local buffer(s)
//
cbuffer cbPerDraw
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mWorldView;              // Offset:   64, size:   64
    float4x4 g_mViewProj;               // Offset:  128, size:   64
    float   g_fFadeDist;                // Offset:  192, size:    4
}

cbuffer cbTimeMatrices
{
    float4x4 g_mBlurViewProj[3];        // Offset:    0, size:  192
    float4x4 g_mBlurWorld[3];           // Offset:  192, size:  192
    float4x4 g_mBoneWorld[300];         // Offset:  384, size: 19200
}

cbuffer cbPerFrame
{
    float   g_fFrameTime;               // Offset:    0, size:    4
}

cbuffer cbPerUser
{
    uint    g_iNumSteps = 3;            // Offset:    0, size:    4
    float   g_fTextureSmear = 0.5;      // Offset:    4, size:    4
    float3  g_vLightDir = { 0, 0.707000017, -0.707000017 };// Offset:   16, size:   12
}

//
// 14 local object(s)
//
Texture2D g_txDiffuse;
SamplerState g_samLinear
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(8);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
RasterizerState RasNoCull
{
    CullMode = uint(NONE /* 1 */);
    MultisampleEnable = bool(FALSE /* 0 */);
};
RasterizerState RasMultiSampleNone
{
    CullMode = uint(NONE /* 1 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
RasterizerState RasMultiSampleBack
{
    CullMode = uint(BACK /* 3 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
RasterizerState RasBack
{
    CullMode = uint(BACK /* 3 */);
    MultisampleEnable = bool(FALSE /* 0 */);
};
BlendState AdditiveBlend
{
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
};
DepthStencilState DepthTestWithoutDepthWrite
{
    DepthEnable = bool(TRUE /* true */);
    DepthWriteMask = uint(ZERO /* 0 */);
    DepthFunc = uint(LESS /* 2 */);
    StencilEnable = bool(FALSE /* false */);
};
DepthStencilState DepthTestNormal
{
    DepthEnable = bool(TRUE /* true */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(LESS /* 2 */);
    StencilEnable = bool(FALSE /* false */);
    StencilReadMask = byte(0x00);
    StencilWriteMask = byte(0x00);
};
DepthStencilState DepthTestLessEqual
{
    DepthEnable = bool(TRUE /* true */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    StencilEnable = bool(FALSE /* false */);
    StencilReadMask = byte(0x00);
    StencilWriteMask = byte(0x00);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(MIN /* 4 */);
    SrcBlendAlpha[0] = uint(ONE /* 2 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState SrcAlphaBlending
{
    AlphaToCoverageEnable = bool(TRUE /* 1 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};

//
// 4 technique(s)
//
technique10 RenderScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerDraw
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:  128 Size:    64 [unused]
            //   float g_fFadeDist;                 // Offset:  192 Size:     4
            //
            // }
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200 [unused]
            //
            // }
            //
            // cbuffer cbPerUser
            // {
            //
            //   uint g_iNumSteps;                  // Offset:    0 Size:     4 [unused]
            //      = 0x00000003 
            //   float g_fTextureSmear;             // Offset:    4 Size:     4
            //      = 0x3f000000 
            //   float3 g_vLightDir;                // Offset:   16 Size:    12
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerDraw                         cbuffer      NA          NA            cb0      1 
            // cbTimeMatrices                    cbuffer      NA          NA            cb1      1 
            // cbPerUser                         cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TANGENT                  0   xyz         3     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // ANISOTROPY               0     zw        2     NONE   float     zw
            //
            vs_4_0
            dcl_constantbuffer CB0[13], immediateIndexed
            dcl_constantbuffer CB1[24], immediateIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyz
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_temps 3
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 r1.x, r0.xyzw, cb1[16].xyzw
            dp4 r1.y, r0.xyzw, cb1[17].xyzw
            dp4 r1.z, r0.xyzw, cb1[18].xyzw
            dp4 r1.w, r0.xyzw, cb1[19].xyzw
            dp4 o0.x, r1.xyzw, cb1[4].xyzw
            dp4 o0.y, r1.xyzw, cb1[5].xyzw
            dp4 o0.z, r1.xyzw, cb1[6].xyzw
            dp4 o0.w, r1.xyzw, cb1[7].xyzw
            dp4 r1.x, r0.xyzw, cb1[20].xyzw
            dp4 r1.y, r0.xyzw, cb1[21].xyzw
            dp4 r1.z, r0.xyzw, cb1[22].xyzw
            dp4 r1.w, r0.xyzw, cb1[23].xyzw
            dp4 r2.x, r1.xyzw, cb1[8].xyzw
            dp4 r2.y, r1.xyzw, cb1[9].xyzw
            dp4 r2.z, r1.xyzw, cb1[10].xyzw
            dp4 r1.x, r1.xyzw, cb1[11].xyzw
            div r1.xyz, r2.xyzx, r1.xxxx
            dp4 r2.x, r0.xyzw, cb1[12].xyzw
            dp4 r2.y, r0.xyzw, cb1[13].xyzw
            dp4 r2.z, r0.xyzw, cb1[14].xyzw
            dp4 r2.w, r0.xyzw, cb1[15].xyzw
            dp4 r0.x, r2.xyzw, cb1[0].xyzw
            dp4 r0.y, r2.xyzw, cb1[1].xyzw
            dp4 r0.z, r2.xyzw, cb1[2].xyzw
            dp4 r0.w, r2.xyzw, cb1[3].xyzw
            div r0.xyz, r0.xyzx, r0.wwww
            add r0.xyz, -r0.xyzx, r1.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.w, r0.w, cb0[12].x
            add r0.w, -r0.w, l(1.000000)
            max o1.w, r0.w, l(0.100000)
            dp3 r1.x, v1.xyzx, cb1[16].xyzx
            dp3 r1.y, v1.xyzx, cb1[17].xyzx
            dp3 r1.z, v1.xyzx, cb1[18].xyzx
            dp3_sat r0.w, r1.xyzx, cb2[1].xyzx
            add o1.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
            mul r1.xyz, v1.yzxy, v3.zxyz
            mad r1.xyz, v3.yzxy, v1.zxyz, -r1.xyzx
            dp3 r2.x, r1.xyzx, cb1[16].xyzx
            dp3 r2.y, r1.xyzx, cb1[17].xyzx
            dp3 r2.z, r1.xyzx, cb1[18].xyzx
            dp3 r1.x, r2.xyzx, cb1[4].xyzx
            dp3 r1.y, r2.xyzx, cb1[5].xyzx
            dp3 r1.z, r2.xyzx, cb1[6].xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, r1.xyzx
            dp3 r0.w, r1.xyzx, r0.xyzx
            mul r0.w, r0.w, cb2[0].y
            max o2.z, |r0.w|, l(0.000100)
            dp3 r1.x, v3.xyzx, cb1[16].xyzx
            dp3 r1.y, v3.xyzx, cb1[17].xyzx
            dp3 r1.z, v3.xyzx, cb1[18].xyzx
            dp3 r2.x, r1.xyzx, cb1[4].xyzx
            dp3 r2.y, r1.xyzx, cb1[5].xyzx
            dp3 r2.z, r1.xyzx, cb1[6].xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, r2.xyzx
            dp3 r0.x, r1.xyzx, r0.xyzx
            mul r0.x, r0.x, cb2[0].y
            max o2.w, |r0.x|, l(0.000100)
            mov o2.xy, v2.xyxx
            ret 
            // Approximately 67 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // ANISOTROPY               0     zw        2     NONE   float     zw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyzw
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_output o0.xyzw
            dcl_temps 1
            sample_d r0.xyzw, v2.xyxx, t0.xyzw, s0, v2.zwzz, v2.zwzz
            mov r0.w, l(1.000000)
            mul o0.xyzw, r0.xyzw, v1.xyzw
            ret 
            // Approximately 4 instruction slots used
                    
        };
        RasterizerState = RasMultiSampleBack;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthTestNormal;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = SrcAlphaBlending;
    }

}

technique10 RenderSkinnedScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerDraw
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mViewProj;              // Offset:  128 Size:    64 [unused]
            //   float g_fFadeDist;                 // Offset:  192 Size:     4
            //
            // }
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200
            //
            // }
            //
            // cbuffer cbPerUser
            // {
            //
            //   uint g_iNumSteps;                  // Offset:    0 Size:     4 [unused]
            //      = 0x00000003 
            //   float g_fTextureSmear;             // Offset:    4 Size:     4
            //      = 0x3f000000 
            //   float3 g_vLightDir;                // Offset:   16 Size:    12
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerDraw                         cbuffer      NA          NA            cb0      1 
            // cbTimeMatrices                    cbuffer      NA          NA            cb1      1 
            // cbPerUser                         cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TANGENT                  0   xyz         3     NONE   float   xyz 
            // BONES                    0   xyzw        4     NONE    uint   xyzw
            // WEIGHTS                  0   xyzw        5     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // ANISOTROPY               0     zw        2     NONE   float     zw
            //
            vs_4_0
            dcl_constantbuffer CB0[13], immediateIndexed
            dcl_constantbuffer CB1[1224], dynamicIndexed
            dcl_constantbuffer CB2[2], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyz
            dcl_input v4.xyzw
            dcl_input v5.xyzw
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_temps 6
            ishl r0.xyzw, v4.xyzw, l(2)
            iadd r1.xyzw, r0.xyzw, l(400, 400, 400, 400)
            mov r2.xyz, v0.xyzx
            mov r2.w, l(1.000000)
            dp4 r3.x, r2.xyzw, cb1[r1.y + 24].xyzw
            dp4 r3.y, r2.xyzw, cb1[r1.y + 25].xyzw
            dp4 r3.z, r2.xyzw, cb1[r1.y + 26].xyzw
            dp4 r3.w, r2.xyzw, cb1[r1.y + 27].xyzw
            mul r3.xyzw, r3.xyzw, v5.yyyy
            dp4 r4.x, r2.xyzw, cb1[r1.x + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r1.x + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r1.x + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r1.x + 27].xyzw
            mad r3.xyzw, v5.xxxx, r4.xyzw, r3.xyzw
            dp4 r4.x, r2.xyzw, cb1[r1.z + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r1.z + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r1.z + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r1.z + 27].xyzw
            mad r3.xyzw, v5.zzzz, r4.xyzw, r3.xyzw
            dp4 r4.x, r2.xyzw, cb1[r1.w + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r1.w + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r1.w + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r1.w + 27].xyzw
            mad r3.xyzw, v5.wwww, r4.xyzw, r3.xyzw
            dp4 o0.x, r3.xyzw, cb1[4].xyzw
            dp4 o0.y, r3.xyzw, cb1[5].xyzw
            dp4 o0.z, r3.xyzw, cb1[6].xyzw
            dp4 o0.w, r3.xyzw, cb1[7].xyzw
            dp4 r3.x, r2.xyzw, cb1[r0.y + 24].xyzw
            dp4 r3.y, r2.xyzw, cb1[r0.y + 25].xyzw
            dp4 r3.z, r2.xyzw, cb1[r0.y + 26].xyzw
            dp4 r3.w, r2.xyzw, cb1[r0.y + 27].xyzw
            mul r3.xyzw, r3.xyzw, v5.yyyy
            dp4 r4.x, r2.xyzw, cb1[r0.x + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r0.x + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r0.x + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r0.x + 27].xyzw
            mad r3.xyzw, v5.xxxx, r4.xyzw, r3.xyzw
            dp4 r4.x, r2.xyzw, cb1[r0.z + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r0.z + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r0.z + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r0.z + 27].xyzw
            mad r3.xyzw, v5.zzzz, r4.xyzw, r3.xyzw
            dp4 r4.x, r2.xyzw, cb1[r0.w + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r0.w + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r0.w + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r0.w + 27].xyzw
            iadd r0.xyzw, r0.xyzw, l(800, 800, 800, 800)
            mad r3.xyzw, v5.wwww, r4.xyzw, r3.xyzw
            dp4 r4.x, r3.xyzw, cb1[0].xyzw
            dp4 r4.y, r3.xyzw, cb1[1].xyzw
            dp4 r4.z, r3.xyzw, cb1[2].xyzw
            dp4 r3.x, r3.xyzw, cb1[3].xyzw
            div r3.xyz, r4.xyzx, r3.xxxx
            dp4 r4.x, r2.xyzw, cb1[r0.y + 24].xyzw
            dp4 r4.y, r2.xyzw, cb1[r0.y + 25].xyzw
            dp4 r4.z, r2.xyzw, cb1[r0.y + 26].xyzw
            dp4 r4.w, r2.xyzw, cb1[r0.y + 27].xyzw
            mul r4.xyzw, r4.xyzw, v5.yyyy
            dp4 r5.x, r2.xyzw, cb1[r0.x + 24].xyzw
            dp4 r5.y, r2.xyzw, cb1[r0.x + 25].xyzw
            dp4 r5.z, r2.xyzw, cb1[r0.x + 26].xyzw
            dp4 r5.w, r2.xyzw, cb1[r0.x + 27].xyzw
            mad r4.xyzw, v5.xxxx, r5.xyzw, r4.xyzw
            dp4 r5.x, r2.xyzw, cb1[r0.z + 24].xyzw
            dp4 r5.y, r2.xyzw, cb1[r0.z + 25].xyzw
            dp4 r5.z, r2.xyzw, cb1[r0.z + 26].xyzw
            dp4 r5.w, r2.xyzw, cb1[r0.z + 27].xyzw
            mad r4.xyzw, v5.zzzz, r5.xyzw, r4.xyzw
            dp4 r5.x, r2.xyzw, cb1[r0.w + 24].xyzw
            dp4 r5.y, r2.xyzw, cb1[r0.w + 25].xyzw
            dp4 r5.z, r2.xyzw, cb1[r0.w + 26].xyzw
            dp4 r5.w, r2.xyzw, cb1[r0.w + 27].xyzw
            mad r0.xyzw, v5.wwww, r5.xyzw, r4.xyzw
            dp4 r2.x, r0.xyzw, cb1[8].xyzw
            dp4 r2.y, r0.xyzw, cb1[9].xyzw
            dp4 r2.z, r0.xyzw, cb1[10].xyzw
            dp4 r0.x, r0.xyzw, cb1[11].xyzw
            div r0.xyz, r2.xyzx, r0.xxxx
            add r0.xyz, -r3.xyzx, r0.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            sqrt r0.w, r0.w
            div r0.w, r0.w, cb0[12].x
            add r0.w, -r0.w, l(1.000000)
            max o1.w, r0.w, l(0.100000)
            dp3 r2.x, v1.xyzx, cb1[r1.y + 24].xyzx
            dp3 r2.y, v1.xyzx, cb1[r1.y + 25].xyzx
            dp3 r2.z, v1.xyzx, cb1[r1.y + 26].xyzx
            mul r2.xyz, r2.xyzx, v5.yyyy
            dp3 r3.x, v1.xyzx, cb1[r1.x + 24].xyzx
            dp3 r3.y, v1.xyzx, cb1[r1.x + 25].xyzx
            dp3 r3.z, v1.xyzx, cb1[r1.x + 26].xyzx
            mad r2.xyz, v5.xxxx, r3.xyzx, r2.xyzx
            dp3 r3.x, v1.xyzx, cb1[r1.z + 24].xyzx
            dp3 r3.y, v1.xyzx, cb1[r1.z + 25].xyzx
            dp3 r3.z, v1.xyzx, cb1[r1.z + 26].xyzx
            mad r1.xyz, v5.zzzz, r3.xyzx, r2.xyzx
            dp3 r2.x, v1.xyzx, cb1[r1.w + 24].xyzx
            dp3 r2.y, v1.xyzx, cb1[r1.w + 25].xyzx
            dp3 r2.z, v1.xyzx, cb1[r1.w + 26].xyzx
            mad r1.xyz, v5.wwww, r2.xyzx, r1.xyzx
            dp3_sat r0.w, r1.xyzx, cb2[1].xyzx
            add o1.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
            mul r1.xyz, v1.yzxy, v3.zxyz
            mad r1.xyz, v3.yzxy, v1.zxyz, -r1.xyzx
            dp3 r2.x, r1.xyzx, cb1[16].xyzx
            dp3 r2.y, r1.xyzx, cb1[17].xyzx
            dp3 r2.z, r1.xyzx, cb1[18].xyzx
            dp3 r1.x, r2.xyzx, cb1[4].xyzx
            dp3 r1.y, r2.xyzx, cb1[5].xyzx
            dp3 r1.z, r2.xyzx, cb1[6].xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, r1.xyzx
            dp3 r0.w, r1.xyzx, r0.xyzx
            mul r0.w, r0.w, cb2[0].y
            max o2.z, |r0.w|, l(0.000100)
            dp3 r1.x, v3.xyzx, cb1[16].xyzx
            dp3 r1.y, v3.xyzx, cb1[17].xyzx
            dp3 r1.z, v3.xyzx, cb1[18].xyzx
            dp3 r2.x, r1.xyzx, cb1[4].xyzx
            dp3 r2.y, r1.xyzx, cb1[5].xyzx
            dp3 r2.z, r1.xyzx, cb1[6].xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, r2.xyzx
            dp3 r0.x, r1.xyzx, r0.xyzx
            mul r0.x, r0.x, cb2[0].y
            max o2.w, |r0.x|, l(0.000100)
            mov o2.xy, v2.xyxx
            ret 
            // Approximately 131 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // ANISOTROPY               0     zw        2     NONE   float     zw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyzw
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_output o0.xyzw
            dcl_temps 1
            sample_d r0.xyzw, v2.xyxx, t0.xyzw, s0, v2.zwzz, v2.zwzz
            mov r0.w, l(1.000000)
            mul o0.xyzw, r0.xyzw, v1.xyzw
            ret 
            // Approximately 4 instruction slots used
                    
        };
        RasterizerState = RasMultiSampleBack;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthTestNormal;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = SrcAlphaBlending;
    }

}

technique10 RenderMotionBlur
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerDraw
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mViewProj;              // Offset:  128 Size:    64 [unused]
            //   float g_fFadeDist;                 // Offset:  192 Size:     4
            //
            // }
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerDraw                         cbuffer      NA          NA            cb0      1 
            // cbTimeMatrices                    cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // VIEWPOS                  0   xyzw        1     NONE   float   xyzw
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyzw
            // TEXCOORD                 0   xy          4     NONE   float   xy  
            //
            vs_4_0
            dcl_constantbuffer CB0[13], immediateIndexed
            dcl_constantbuffer CB1[24], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xyz
            dcl_output o3.xyzw
            dcl_output o4.xy
            dcl_temps 3
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            mov o0.xyzw, r0.xyzw
            dp4 o1.x, r0.xyzw, cb0[4].xyzw
            dp4 o1.y, r0.xyzw, cb0[5].xyzw
            dp4 o1.z, r0.xyzw, cb0[6].xyzw
            dp4 o1.w, r0.xyzw, cb0[7].xyzw
            mov o2.xyz, v1.xyzx
            dp4 r1.x, r0.xyzw, cb1[20].xyzw
            dp4 r1.y, r0.xyzw, cb1[21].xyzw
            dp4 r1.z, r0.xyzw, cb1[22].xyzw
            dp4 r1.w, r0.xyzw, cb1[23].xyzw
            dp4 r2.x, r1.xyzw, cb1[8].xyzw
            dp4 r2.y, r1.xyzw, cb1[9].xyzw
            dp4 r2.z, r1.xyzw, cb1[10].xyzw
            dp4 r1.x, r1.xyzw, cb1[11].xyzw
            div r1.xyz, r2.xyzx, r1.xxxx
            dp4 r2.x, r0.xyzw, cb1[12].xyzw
            dp4 r2.y, r0.xyzw, cb1[13].xyzw
            dp4 r2.z, r0.xyzw, cb1[14].xyzw
            dp4 r2.w, r0.xyzw, cb1[15].xyzw
            dp4 r0.x, r2.xyzw, cb1[0].xyzw
            dp4 r0.y, r2.xyzw, cb1[1].xyzw
            dp4 r0.z, r2.xyzw, cb1[2].xyzw
            dp4 r0.w, r2.xyzw, cb1[3].xyzw
            div r0.xyz, r0.xyzx, r0.wwww
            add r0.xyz, -r0.xyzx, r1.xyzx
            dp3 r0.x, r0.xyzx, r0.xyzx
            sqrt r0.x, r0.x
            div r0.x, r0.x, cb0[12].x
            add r0.x, -r0.x, l(1.000000)
            max o3.w, r0.x, l(0.100000)
            mov o3.xyz, l(0,0,0,0)
            mov o4.xy, v2.xyxx
            ret 
            // Approximately 35 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200 [unused]
            //
            // }
            //
            // cbuffer cbPerUser
            // {
            //
            //   uint g_iNumSteps;                  // Offset:    0 Size:     4 [unused]
            //      = 0x00000003 
            //   float g_fTextureSmear;             // Offset:    4 Size:     4 [unused]
            //      = 0x3f000000 
            //   float3 g_vLightDir;                // Offset:   16 Size:    12
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbTimeMatrices                    cbuffer      NA          NA            cb0      1 
            // cbPerUser                         cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // VIEWPOS                  0   xyzw        1     NONE   float   xy  
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float      w
            // TEXCOORD                 0   xy          4     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            gs_4_0
            dcl_constantbuffer CB0[24], immediateIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyzw
            dcl_input v[3][2].xyz
            dcl_input v[3][3].xyzw
            dcl_input v[3][4].xy
            dcl_temps 11
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xy
            dcl_maxout 30
            add r0.xy, -v[0][1].xyxx, v[1][1].xyxx
            add r0.zw, -v[0][1].yyyx, v[2][1].yyyx
            mul r0.y, r0.w, r0.y
            mad r0.x, r0.x, r0.z, -r0.y
            lt r0.x, r0.x, l(-0.000000)
            if_nz r0.x
              dp3 r0.x, v[0][2].xyzx, cb0[12].xyzx
              dp3 r0.y, v[0][2].xyzx, cb0[13].xyzx
              dp3 r0.z, v[0][2].xyzx, cb0[14].xyzx
              dp3_sat r0.x, r0.xyzx, cb1[1].xyzx
              dp3 r1.x, v[1][2].xyzx, cb0[12].xyzx
              dp3 r1.y, v[1][2].xyzx, cb0[13].xyzx
              dp3 r1.z, v[1][2].xyzx, cb0[14].xyzx
              dp3_sat r0.y, r1.xyzx, cb1[1].xyzx
              add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
              dp4 r1.x, v[0][0].xyzw, cb0[12].xyzw
              dp4 r1.y, v[0][0].xyzw, cb0[13].xyzw
              dp4 r1.z, v[0][0].xyzw, cb0[14].xyzw
              dp4 r1.w, v[0][0].xyzw, cb0[15].xyzw
              dp4 r0.z, r1.xyzw, cb0[0].xyzw
              dp4 r0.w, r1.xyzw, cb0[1].xyzw
              dp4 r2.x, r1.xyzw, cb0[2].xyzw
              dp4 r1.x, r1.xyzw, cb0[3].xyzw
              dp4 r3.x, v[1][0].xyzw, cb0[12].xyzw
              dp4 r3.y, v[1][0].xyzw, cb0[13].xyzw
              dp4 r3.z, v[1][0].xyzw, cb0[14].xyzw
              dp4 r3.w, v[1][0].xyzw, cb0[15].xyzw
              dp4 r1.y, r3.xyzw, cb0[0].xyzw
              dp4 r1.z, r3.xyzw, cb0[1].xyzw
              dp4 r1.w, r3.xyzw, cb0[2].xyzw
              dp4 r2.y, r3.xyzw, cb0[3].xyzw
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r2.y
              mov o1.xyz, r0.yyyy
              mov o1.w, l(0)
              mov o2.xy, v[1][4].xyxx
              emit 
              mov o0.x, r0.z
              mov o0.y, r0.w
              mov o0.z, r2.x
              mov o0.w, r1.x
              mov o1.xyz, r0.xxxx
              mov o1.w, l(0)
              mov o2.xy, v[0][4].xyxx
              emit 
              dp3 r3.x, v[0][2].xyzx, cb0[16].xyzx
              dp3 r3.y, v[0][2].xyzx, cb0[17].xyzx
              dp3 r3.z, v[0][2].xyzx, cb0[18].xyzx
              dp3_sat r2.z, r3.xyzx, cb1[1].xyzx
              dp3 r3.x, v[1][2].xyzx, cb0[16].xyzx
              dp3 r3.y, v[1][2].xyzx, cb0[17].xyzx
              dp3 r3.z, v[1][2].xyzx, cb0[18].xyzx
              dp3_sat r2.w, r3.xyzx, cb1[1].xyzx
              add r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
              dp4 r3.x, v[0][0].xyzw, cb0[16].xyzw
              dp4 r3.y, v[0][0].xyzw, cb0[17].xyzw
              dp4 r3.z, v[0][0].xyzw, cb0[18].xyzw
              dp4 r3.w, v[0][0].xyzw, cb0[19].xyzw
              dp4 r4.x, r3.xyzw, cb0[4].xyzw
              dp4 r4.y, r3.xyzw, cb0[5].xyzw
              dp4 r4.z, r3.xyzw, cb0[6].xyzw
              dp4 r3.x, r3.xyzw, cb0[7].xyzw
              dp4 r5.x, v[1][0].xyzw, cb0[16].xyzw
              dp4 r5.y, v[1][0].xyzw, cb0[17].xyzw
              dp4 r5.z, v[1][0].xyzw, cb0[18].xyzw
              dp4 r5.w, v[1][0].xyzw, cb0[19].xyzw
              dp4 r3.y, r5.xyzw, cb0[4].xyzw
              dp4 r3.z, r5.xyzw, cb0[5].xyzw
              dp4 r3.w, r5.xyzw, cb0[6].xyzw
              dp4 r4.w, r5.xyzw, cb0[7].xyzw
              mov o0.x, r3.y
              mov o0.y, r3.z
              mov o0.z, r3.w
              mov o0.w, r4.w
              mov o1.xyz, r2.wwww
              mov o1.w, v[1][3].w
              mov o2.xy, v[1][4].xyxx
              emit 
              mov o0.x, r4.x
              mov o0.y, r4.y
              mov o0.z, r4.z
              mov o0.w, r3.x
              mov o1.xyz, r2.zzzz
              mov o1.w, v[0][3].w
              mov o2.xy, v[0][4].xyxx
              emit 
              dp3 r5.x, v[0][2].xyzx, cb0[20].xyzx
              dp3 r5.y, v[0][2].xyzx, cb0[21].xyzx
              dp3 r5.z, v[0][2].xyzx, cb0[22].xyzx
              dp3_sat r5.x, r5.xyzx, cb1[1].xyzx
              dp3 r6.x, v[1][2].xyzx, cb0[20].xyzx
              dp3 r6.y, v[1][2].xyzx, cb0[21].xyzx
              dp3 r6.z, v[1][2].xyzx, cb0[22].xyzx
              dp3_sat r5.y, r6.xyzx, cb1[1].xyzx
              add r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
              dp4 r6.x, v[0][0].xyzw, cb0[20].xyzw
              dp4 r6.y, v[0][0].xyzw, cb0[21].xyzw
              dp4 r6.z, v[0][0].xyzw, cb0[22].xyzw
              dp4 r6.w, v[0][0].xyzw, cb0[23].xyzw
              dp4 r5.z, r6.xyzw, cb0[8].xyzw
              dp4 r5.w, r6.xyzw, cb0[9].xyzw
              dp4 r7.x, r6.xyzw, cb0[10].xyzw
              dp4 r6.x, r6.xyzw, cb0[11].xyzw
              dp4 r8.x, v[1][0].xyzw, cb0[20].xyzw
              dp4 r8.y, v[1][0].xyzw, cb0[21].xyzw
              dp4 r8.z, v[1][0].xyzw, cb0[22].xyzw
              dp4 r8.w, v[1][0].xyzw, cb0[23].xyzw
              dp4 r6.y, r8.xyzw, cb0[8].xyzw
              dp4 r6.z, r8.xyzw, cb0[9].xyzw
              dp4 r6.w, r8.xyzw, cb0[10].xyzw
              dp4 r7.y, r8.xyzw, cb0[11].xyzw
              mov o0.x, r6.y
              mov o0.y, r6.z
              mov o0.z, r6.w
              mov o0.w, r7.y
              mov o1.xyz, r5.yyyy
              mov o1.w, l(0)
              mov o2.xy, v[1][4].xyxx
              emit 
              mov o0.x, r5.z
              mov o0.y, r5.w
              mov o0.z, r7.x
              mov o0.w, r6.x
              mov o1.xyz, r5.xxxx
              mov o1.w, l(0)
              mov o2.xy, v[0][4].xyxx
              emit 
              cut 
              dp3 r8.x, v[2][2].xyzx, cb0[12].xyzx
              dp3 r8.y, v[2][2].xyzx, cb0[13].xyzx
              dp3 r8.z, v[2][2].xyzx, cb0[14].xyzx
              dp3_sat r7.z, r8.xyzx, cb1[1].xyzx
              add r7.z, r7.z, l(0.500000)
              dp4 r8.x, v[2][0].xyzw, cb0[12].xyzw
              dp4 r8.y, v[2][0].xyzw, cb0[13].xyzw
              dp4 r8.z, v[2][0].xyzw, cb0[14].xyzw
              dp4 r8.w, v[2][0].xyzw, cb0[15].xyzw
              dp4 r7.w, r8.xyzw, cb0[0].xyzw
              dp4 r9.x, r8.xyzw, cb0[1].xyzw
              dp4 r9.y, r8.xyzw, cb0[2].xyzw
              dp4 r8.x, r8.xyzw, cb0[3].xyzw
              mov o0.x, r7.w
              mov o0.y, r9.x
              mov o0.z, r9.y
              mov o0.w, r8.x
              mov o1.xyz, r7.zzzz
              mov o1.w, l(0)
              mov o2.xy, v[2][4].xyxx
              emit 
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r2.y
              mov o1.xyz, r0.yyyy
              mov o1.w, l(0)
              mov o2.xy, v[1][4].xyxx
              emit 
              dp3 r10.x, v[2][2].xyzx, cb0[16].xyzx
              dp3 r10.y, v[2][2].xyzx, cb0[17].xyzx
              dp3 r10.z, v[2][2].xyzx, cb0[18].xyzx
              dp3_sat r0.y, r10.xyzx, cb1[1].xyzx
              add r0.y, r0.y, l(0.500000)
              dp4 r10.x, v[2][0].xyzw, cb0[16].xyzw
              dp4 r10.y, v[2][0].xyzw, cb0[17].xyzw
              dp4 r10.z, v[2][0].xyzw, cb0[18].xyzw
              dp4 r10.w, v[2][0].xyzw, cb0[19].xyzw
              dp4 r1.y, r10.xyzw, cb0[4].xyzw
              dp4 r1.z, r10.xyzw, cb0[5].xyzw
              dp4 r1.w, r10.xyzw, cb0[6].xyzw
              dp4 r2.y, r10.xyzw, cb0[7].xyzw
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r2.y
              mov o1.xyz, r0.yyyy
              mov o1.w, v[2][3].w
              mov o2.xy, v[2][4].xyxx
              emit 
              mov o0.x, r3.y
              mov o0.y, r3.z
              mov o0.z, r3.w
              mov o0.w, r4.w
              mov o1.xyz, r2.wwww
              mov o1.w, v[1][3].w
              mov o2.xy, v[1][4].xyxx
              emit 
              dp3 r10.x, v[2][2].xyzx, cb0[20].xyzx
              dp3 r10.y, v[2][2].xyzx, cb0[21].xyzx
              dp3 r10.z, v[2][2].xyzx, cb0[22].xyzx
              dp3_sat r2.w, r10.xyzx, cb1[1].xyzx
              add r2.w, r2.w, l(0.500000)
              dp4 r10.x, v[2][0].xyzw, cb0[20].xyzw
              dp4 r10.y, v[2][0].xyzw, cb0[21].xyzw
              dp4 r10.z, v[2][0].xyzw, cb0[22].xyzw
              dp4 r10.w, v[2][0].xyzw, cb0[23].xyzw
              dp4 r3.y, r10.xyzw, cb0[8].xyzw
              dp4 r3.z, r10.xyzw, cb0[9].xyzw
              dp4 r3.w, r10.xyzw, cb0[10].xyzw
              dp4 r4.w, r10.xyzw, cb0[11].xyzw
              mov o0.x, r3.y
              mov o0.y, r3.z
              mov o0.z, r3.w
              mov o0.w, r4.w
              mov o1.xyz, r2.wwww
              mov o1.w, l(0)
              mov o2.xy, v[2][4].xyxx
              emit 
              mov o0.x, r6.y
              mov o0.y, r6.z
              mov o0.z, r6.w
              mov o0.w, r7.y
              mov o1.xyz, r5.yyyy
              mov o1.w, l(0)
              mov o2.xy, v[1][4].xyxx
              emit 
              cut 
              mov o0.x, r0.z
              mov o0.y, r0.w
              mov o0.z, r2.x
              mov o0.w, r1.x
              mov o1.xyz, r0.xxxx
              mov o1.w, l(0)
              mov o2.xy, v[0][4].xyxx
              emit 
              mov o0.x, r7.w
              mov o0.y, r9.x
              mov o0.z, r9.y
              mov o0.w, r8.x
              mov o1.xyz, r7.zzzz
              mov o1.w, l(0)
              mov o2.xy, v[2][4].xyxx
              emit 
              mov o0.x, r4.x
              mov o0.y, r4.y
              mov o0.z, r4.z
              mov o0.w, r3.x
              mov o1.xyz, r2.zzzz
              mov o1.w, v[0][3].w
              mov o2.xy, v[0][4].xyxx
              emit 
              mov o0.x, r1.y
              mov o0.y, r1.z
              mov o0.z, r1.w
              mov o0.w, r2.y
              mov o1.xyz, r0.yyyy
              mov o1.w, v[2][3].w
              mov o2.xy, v[2][4].xyxx
              emit 
              mov o0.x, r5.z
              mov o0.y, r5.w
              mov o0.z, r7.x
              mov o0.w, r6.x
              mov o1.xyz, r5.xxxx
              mov o1.w, l(0)
              mov o2.xy, v[0][4].xyxx
              emit 
              mov o0.x, r3.y
              mov o0.y, r3.z
              mov o0.z, r3.w
              mov o0.w, r4.w
              mov o1.xyz, r2.wwww
              mov o1.w, l(0)
              mov o2.xy, v[2][4].xyxx
              emit 
              cut 
            endif 
            ret 
            // Approximately 269 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyzw
            dcl_input_ps linear v2.xy
            dcl_output o0.xyzw
            dcl_temps 1
            sample_l r0.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)
            mov r0.w, l(1.000000)
            mul o0.xyzw, r0.xyzw, v1.xyzw
            ret 
            // Approximately 4 instruction slots used
                    
        };
        RasterizerState = RasMultiSampleNone;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthTestNormal;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = SrcAlphaBlending;
    }

}

technique10 RenderSkinnedMotionBlur
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerDraw
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mViewProj;              // Offset:  128 Size:    64 [unused]
            //   float g_fFadeDist;                 // Offset:  192 Size:     4
            //
            // }
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192 [unused]
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerDraw                         cbuffer      NA          NA            cb0      1 
            // cbTimeMatrices                    cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TANGENT                  0   xyz         3     NONE   float       
            // BONES                    0   xyzw        4     NONE    uint   xyzw
            // WEIGHTS                  0   xyzw        5     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // VIEWPOS                  0   xyzw        1     NONE   float   xyzw
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float   xyzw
            // TEXCOORD                 0   xy          4     NONE   float   xy  
            // BONES                    0   xyzw        5     NONE    uint   xyzw
            // WEIGHTS                  0   xyzw        6     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[13], immediateIndexed
            dcl_constantbuffer CB1[1224], dynamicIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v4.xyzw
            dcl_input v5.xyzw
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xyz
            dcl_output o3.xyzw
            dcl_output o4.xy
            dcl_output o5.xyzw
            dcl_output o6.xyzw
            dcl_temps 5
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            mov o0.xyzw, r0.xyzw
            dp4 o1.x, r0.xyzw, cb0[4].xyzw
            dp4 o1.y, r0.xyzw, cb0[5].xyzw
            dp4 o1.z, r0.xyzw, cb0[6].xyzw
            dp4 o1.w, r0.xyzw, cb0[7].xyzw
            mov o2.xyz, v1.xyzx
            ishl r1.xyzw, v4.xyzw, l(2)
            dp4 r2.x, r0.xyzw, cb1[r1.y + 24].xyzw
            dp4 r2.y, r0.xyzw, cb1[r1.y + 25].xyzw
            dp4 r2.z, r0.xyzw, cb1[r1.y + 26].xyzw
            dp4 r2.w, r0.xyzw, cb1[r1.y + 27].xyzw
            mul r2.xyzw, r2.xyzw, v5.yyyy
            dp4 r3.x, r0.xyzw, cb1[r1.x + 24].xyzw
            dp4 r3.y, r0.xyzw, cb1[r1.x + 25].xyzw
            dp4 r3.z, r0.xyzw, cb1[r1.x + 26].xyzw
            dp4 r3.w, r0.xyzw, cb1[r1.x + 27].xyzw
            mad r2.xyzw, v5.xxxx, r3.xyzw, r2.xyzw
            dp4 r3.x, r0.xyzw, cb1[r1.z + 24].xyzw
            dp4 r3.y, r0.xyzw, cb1[r1.z + 25].xyzw
            dp4 r3.z, r0.xyzw, cb1[r1.z + 26].xyzw
            dp4 r3.w, r0.xyzw, cb1[r1.z + 27].xyzw
            mad r2.xyzw, v5.zzzz, r3.xyzw, r2.xyzw
            dp4 r3.x, r0.xyzw, cb1[r1.w + 24].xyzw
            dp4 r3.y, r0.xyzw, cb1[r1.w + 25].xyzw
            dp4 r3.z, r0.xyzw, cb1[r1.w + 26].xyzw
            dp4 r3.w, r0.xyzw, cb1[r1.w + 27].xyzw
            iadd r1.xyzw, r1.xyzw, l(800, 800, 800, 800)
            mad r2.xyzw, v5.wwww, r3.xyzw, r2.xyzw
            dp4 r3.x, r2.xyzw, cb1[0].xyzw
            dp4 r3.y, r2.xyzw, cb1[1].xyzw
            dp4 r3.z, r2.xyzw, cb1[2].xyzw
            dp4 r2.x, r2.xyzw, cb1[3].xyzw
            div r2.xyz, r3.xyzx, r2.xxxx
            dp4 r3.x, r0.xyzw, cb1[r1.y + 24].xyzw
            dp4 r3.y, r0.xyzw, cb1[r1.y + 25].xyzw
            dp4 r3.z, r0.xyzw, cb1[r1.y + 26].xyzw
            dp4 r3.w, r0.xyzw, cb1[r1.y + 27].xyzw
            mul r3.xyzw, r3.xyzw, v5.yyyy
            dp4 r4.x, r0.xyzw, cb1[r1.x + 24].xyzw
            dp4 r4.y, r0.xyzw, cb1[r1.x + 25].xyzw
            dp4 r4.z, r0.xyzw, cb1[r1.x + 26].xyzw
            dp4 r4.w, r0.xyzw, cb1[r1.x + 27].xyzw
            mad r3.xyzw, v5.xxxx, r4.xyzw, r3.xyzw
            dp4 r4.x, r0.xyzw, cb1[r1.z + 24].xyzw
            dp4 r4.y, r0.xyzw, cb1[r1.z + 25].xyzw
            dp4 r4.z, r0.xyzw, cb1[r1.z + 26].xyzw
            dp4 r4.w, r0.xyzw, cb1[r1.z + 27].xyzw
            mad r3.xyzw, v5.zzzz, r4.xyzw, r3.xyzw
            dp4 r4.x, r0.xyzw, cb1[r1.w + 24].xyzw
            dp4 r4.y, r0.xyzw, cb1[r1.w + 25].xyzw
            dp4 r4.z, r0.xyzw, cb1[r1.w + 26].xyzw
            dp4 r4.w, r0.xyzw, cb1[r1.w + 27].xyzw
            mad r0.xyzw, v5.wwww, r4.xyzw, r3.xyzw
            dp4 r1.x, r0.xyzw, cb1[8].xyzw
            dp4 r1.y, r0.xyzw, cb1[9].xyzw
            dp4 r1.z, r0.xyzw, cb1[10].xyzw
            dp4 r0.x, r0.xyzw, cb1[11].xyzw
            div r0.xyz, r1.xyzx, r0.xxxx
            add r0.xyz, -r2.xyzx, r0.xyzx
            dp3 r0.x, r0.xyzx, r0.xyzx
            sqrt r0.x, r0.x
            div r0.x, r0.x, cb0[12].x
            add r0.x, -r0.x, l(1.000000)
            max o3.w, r0.x, l(0.100000)
            mov o3.xyz, l(0,0,0,0)
            mov o4.xy, v2.xyxx
            mov o5.xyzw, v4.xyzw
            mov o6.xyzw, v5.xyzw
            ret 
            // Approximately 71 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbTimeMatrices
            // {
            //
            //   float4x4 g_mBlurViewProj[3];       // Offset:    0 Size:   192
            //   float4x4 g_mBlurWorld[3];          // Offset:  192 Size:   192 [unused]
            //   float4x4 g_mBoneWorld[300];        // Offset:  384 Size: 19200
            //
            // }
            //
            // cbuffer cbPerUser
            // {
            //
            //   uint g_iNumSteps;                  // Offset:    0 Size:     4 [unused]
            //      = 0x00000003 
            //   float g_fTextureSmear;             // Offset:    4 Size:     4 [unused]
            //      = 0x3f000000 
            //   float3 g_vLightDir;                // Offset:   16 Size:    12
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbTimeMatrices                    cbuffer      NA          NA            cb0      1 
            // cbPerUser                         cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // VIEWPOS                  0   xyzw        1     NONE   float   xy  
            // NORMAL                   0   xyz         2     NONE   float   xyz 
            // COLOR                    0   xyzw        3     NONE   float      w
            // TEXCOORD                 0   xy          4     NONE   float   xy  
            // BONES                    0   xyzw        5     NONE    uint   xyzw
            // WEIGHTS                  0   xyzw        6     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            gs_4_0
            dcl_constantbuffer CB0[1224], dynamicIndexed
            dcl_constantbuffer CB1[2], immediateIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyzw
            dcl_input v[3][2].xyz
            dcl_input v[3][3].xyzw
            dcl_input v[3][4].xy
            dcl_input v[3][5].xyzw
            dcl_input v[3][6].xyzw
            dcl_temps 8
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyzw
            dcl_output o2.xy
            dcl_maxout 18
            add r0.xy, -v[0][1].xyxx, v[1][1].xyxx
            add r0.zw, -v[0][1].yyyx, v[2][1].yyyx
            mul r0.y, r0.w, r0.y
            mad r0.x, r0.x, r0.z, -r0.y
            lt r0.x, r0.x, l(-0.000000)
            if_nz r0.x
              mov r0.x, l(0)
              loop 
                uge r0.y, r0.x, l(3)
                breakc_nz r0.y
                ishl r0.y, r0.x, l(2)
                utof r0.z, r0.x
                add r0.z, r0.z, l(-1.000000)
                imad r1.xyzw, r0.xxxx, l(100, 100, 100, 100), v[0][5].xyzw
                ishl r1.xyzw, r1.xyzw, l(2)
                dp4 r2.x, v[0][0].xyzw, cb0[r1.x + 24].xyzw
                dp4 r2.y, v[0][0].xyzw, cb0[r1.x + 25].xyzw
                dp4 r2.z, v[0][0].xyzw, cb0[r1.x + 26].xyzw
                dp4 r2.w, v[0][0].xyzw, cb0[r1.x + 27].xyzw
                dp3 r3.x, v[0][2].xyzx, cb0[r1.x + 24].xyzx
                dp3 r3.y, v[0][2].xyzx, cb0[r1.x + 25].xyzx
                dp3 r3.z, v[0][2].xyzx, cb0[r1.x + 26].xyzx
                dp4 r4.x, v[0][0].xyzw, cb0[r1.y + 24].xyzw
                dp4 r4.y, v[0][0].xyzw, cb0[r1.y + 25].xyzw
                dp4 r4.z, v[0][0].xyzw, cb0[r1.y + 26].xyzw
                dp4 r4.w, v[0][0].xyzw, cb0[r1.y + 27].xyzw
                mul r4.xyzw, r4.xyzw, v[0][6].yyyy
                mad r2.xyzw, v[0][6].xxxx, r2.xyzw, r4.xyzw
                dp3 r4.x, v[0][2].xyzx, cb0[r1.y + 24].xyzx
                dp3 r4.y, v[0][2].xyzx, cb0[r1.y + 25].xyzx
                dp3 r4.z, v[0][2].xyzx, cb0[r1.y + 26].xyzx
                mul r4.xyz, r4.xyzx, v[0][6].yyyy
                mad r3.xyz, v[0][6].xxxx, r3.xyzx, r4.xyzx
                dp4 r4.x, v[0][0].xyzw, cb0[r1.z + 24].xyzw
                dp4 r4.y, v[0][0].xyzw, cb0[r1.z + 25].xyzw
                dp4 r4.z, v[0][0].xyzw, cb0[r1.z + 26].xyzw
                dp4 r4.w, v[0][0].xyzw, cb0[r1.z + 27].xyzw
                mad r2.xyzw, v[0][6].zzzz, r4.xyzw, r2.xyzw
                dp3 r4.x, v[0][2].xyzx, cb0[r1.z + 24].xyzx
                dp3 r4.y, v[0][2].xyzx, cb0[r1.z + 25].xyzx
                dp3 r4.z, v[0][2].xyzx, cb0[r1.z + 26].xyzx
                mad r1.xyz, v[0][6].zzzz, r4.xyzx, r3.xyzx
                dp4 r3.x, v[0][0].xyzw, cb0[r1.w + 24].xyzw
                dp4 r3.y, v[0][0].xyzw, cb0[r1.w + 25].xyzw
                dp4 r3.z, v[0][0].xyzw, cb0[r1.w + 26].xyzw
                dp4 r3.w, v[0][0].xyzw, cb0[r1.w + 27].xyzw
                mad r2.xyzw, v[0][6].wwww, r3.xyzw, r2.xyzw
                dp3 r3.x, v[0][2].xyzx, cb0[r1.w + 24].xyzx
                dp3 r3.y, v[0][2].xyzx, cb0[r1.w + 25].xyzx
                dp3 r3.z, v[0][2].xyzx, cb0[r1.w + 26].xyzx
                mad r1.xyz, v[0][6].wwww, r3.xyzx, r1.xyzx
                dp4 r0.w, r2.xyzw, cb0[r0.y + 0].xyzw
                dp4 r1.w, r2.xyzw, cb0[r0.y + 1].xyzw
                dp4 r3.x, r2.xyzw, cb0[r0.y + 2].xyzw
                dp4 r2.x, r2.xyzw, cb0[r0.y + 3].xyzw
                dp3_sat r1.x, r1.xyzx, cb1[1].xyzx
                add r1.x, r1.x, l(0.500000)
                imad r4.xyzw, r0.xxxx, l(100, 100, 100, 100), v[1][5].xyzw
                ishl r4.xyzw, r4.xyzw, l(2)
                dp4 r5.x, v[1][0].xyzw, cb0[r4.x + 24].xyzw
                dp4 r5.y, v[1][0].xyzw, cb0[r4.x + 25].xyzw
                dp4 r5.z, v[1][0].xyzw, cb0[r4.x + 26].xyzw
                dp4 r5.w, v[1][0].xyzw, cb0[r4.x + 27].xyzw
                dp3 r6.x, v[1][2].xyzx, cb0[r4.x + 24].xyzx
                dp3 r6.y, v[1][2].xyzx, cb0[r4.x + 25].xyzx
                dp3 r6.z, v[1][2].xyzx, cb0[r4.x + 26].xyzx
                dp4 r7.x, v[1][0].xyzw, cb0[r4.y + 24].xyzw
                dp4 r7.y, v[1][0].xyzw, cb0[r4.y + 25].xyzw
                dp4 r7.z, v[1][0].xyzw, cb0[r4.y + 26].xyzw
                dp4 r7.w, v[1][0].xyzw, cb0[r4.y + 27].xyzw
                mul r7.xyzw, r7.xyzw, v[1][6].yyyy
                mad r5.xyzw, v[1][6].xxxx, r5.xyzw, r7.xyzw
                dp3 r7.x, v[1][2].xyzx, cb0[r4.y + 24].xyzx
                dp3 r7.y, v[1][2].xyzx, cb0[r4.y + 25].xyzx
                dp3 r7.z, v[1][2].xyzx, cb0[r4.y + 26].xyzx
                mul r2.yzw, r7.xxyz, v[1][6].yyyy
                mad r2.yzw, v[1][6].xxxx, r6.xxyz, r2.yyzw
                dp4 r6.x, v[1][0].xyzw, cb0[r4.z + 24].xyzw
                dp4 r6.y, v[1][0].xyzw, cb0[r4.z + 25].xyzw
                dp4 r6.z, v[1][0].xyzw, cb0[r4.z + 26].xyzw
                dp4 r6.w, v[1][0].xyzw, cb0[r4.z + 27].xyzw
                mad r5.xyzw, v[1][6].zzzz, r6.xyzw, r5.xyzw
                dp3 r6.x, v[1][2].xyzx, cb0[r4.z + 24].xyzx
                dp3 r6.y, v[1][2].xyzx, cb0[r4.z + 25].xyzx
                dp3 r6.z, v[1][2].xyzx, cb0[r4.z + 26].xyzx
                mad r2.yzw, v[1][6].zzzz, r6.xxyz, r2.yyzw
                dp4 r6.x, v[1][0].xyzw, cb0[r4.w + 24].xyzw
                dp4 r6.y, v[1][0].xyzw, cb0[r4.w + 25].xyzw
                dp4 r6.z, v[1][0].xyzw, cb0[r4.w + 26].xyzw
                dp4 r6.w, v[1][0].xyzw, cb0[r4.w + 27].xyzw
                mad r5.xyzw, v[1][6].wwww, r6.xyzw, r5.xyzw
                dp3 r4.x, v[1][2].xyzx, cb0[r4.w + 24].xyzx
                dp3 r4.y, v[1][2].xyzx, cb0[r4.w + 25].xyzx
                dp3 r4.z, v[1][2].xyzx, cb0[r4.w + 26].xyzx
                mad r2.yzw, v[1][6].wwww, r4.xxyz, r2.yyzw
                dp4 r1.y, r5.xyzw, cb0[r0.y + 0].xyzw
                dp4 r1.z, r5.xyzw, cb0[r0.y + 1].xyzw
                dp4 r3.y, r5.xyzw, cb0[r0.y + 2].xyzw
                dp4 r0.y, r5.xyzw, cb0[r0.y + 3].xyzw
                dp3_sat r2.y, r2.yzwy, cb1[1].xyzx
                add r2.y, r2.y, l(0.500000)
                add r0.z, -|r0.z|, l(1.000000)
                mul r2.z, r0.z, v[0][3].w
                mul r0.z, r0.z, v[1][3].w
                mov o0.x, r1.y
                mov o0.y, r1.z
                mov o0.z, r3.y
                mov o0.w, r0.y
                mov o1.xyz, r2.yyyy
                mov o1.w, r0.z
                mov o2.xy, v[1][4].xyxx
                emit 
                mov o0.x, r0.w
                mov o0.y, r1.w
                mov o0.z, r3.x
                mov o0.w, r2.x
                mov o1.xyz, r1.xxxx
                mov o1.w, r2.z
                mov o2.xy, v[0][4].xyxx
                emit 
                iadd r0.x, r0.x, l(1)
              endloop 
              cut 
              mov r0.x, l(0)
              loop 
                uge r0.y, r0.x, l(3)
                breakc_nz r0.y
                ishl r0.y, r0.x, l(2)
                utof r0.z, r0.x
                add r0.z, r0.z, l(-1.000000)
                imad r1.xyzw, r0.xxxx, l(100, 100, 100, 100), v[1][5].xyzw
                ishl r1.xyzw, r1.xyzw, l(2)
                dp4 r2.x, v[1][0].xyzw, cb0[r1.x + 24].xyzw
                dp4 r2.y, v[1][0].xyzw, cb0[r1.x + 25].xyzw
                dp4 r2.z, v[1][0].xyzw, cb0[r1.x + 26].xyzw
                dp4 r2.w, v[1][0].xyzw, cb0[r1.x + 27].xyzw
                dp3 r3.x, v[1][2].xyzx, cb0[r1.x + 24].xyzx
                dp3 r3.y, v[1][2].xyzx, cb0[r1.x + 25].xyzx
                dp3 r3.z, v[1][2].xyzx, cb0[r1.x + 26].xyzx
                dp4 r4.x, v[1][0].xyzw, cb0[r1.y + 24].xyzw
                dp4 r4.y, v[1][0].xyzw, cb0[r1.y + 25].xyzw
                dp4 r4.z, v[1][0].xyzw, cb0[r1.y + 26].xyzw
                dp4 r4.w, v[1][0].xyzw, cb0[r1.y + 27].xyzw
                mul r4.xyzw, r4.xyzw, v[1][6].yyyy
                mad r2.xyzw, v[1][6].xxxx, r2.xyzw, r4.xyzw
                dp3 r4.x, v[1][2].xyzx, cb0[r1.y + 24].xyzx
                dp3 r4.y, v[1][2].xyzx, cb0[r1.y + 25].xyzx
                dp3 r4.z, v[1][2].xyzx, cb0[r1.y + 26].xyzx
                mul r4.xyz, r4.xyzx, v[1][6].yyyy
                mad r3.xyz, v[1][6].xxxx, r3.xyzx, r4.xyzx
                dp4 r4.x, v[1][0].xyzw, cb0[r1.z + 24].xyzw
                dp4 r4.y, v[1][0].xyzw, cb0[r1.z + 25].xyzw
                dp4 r4.z, v[1][0].xyzw, cb0[r1.z + 26].xyzw
                dp4 r4.w, v[1][0].xyzw, cb0[r1.z + 27].xyzw
                mad r2.xyzw, v[1][6].zzzz, r4.xyzw, r2.xyzw
                dp3 r4.x, v[1][2].xyzx, cb0[r1.z + 24].xyzx
                dp3 r4.y, v[1][2].xyzx, cb0[r1.z + 25].xyzx
                dp3 r4.z, v[1][2].xyzx, cb0[r1.z + 26].xyzx
                mad r1.xyz, v[1][6].zzzz, r4.xyzx, r3.xyzx
                dp4 r3.x, v[1][0].xyzw, cb0[r1.w + 24].xyzw
                dp4 r3.y, v[1][0].xyzw, cb0[r1.w + 25].xyzw
                dp4 r3.z, v[1][0].xyzw, cb0[r1.w + 26].xyzw
                dp4 r3.w, v[1][0].xyzw, cb0[r1.w + 27].xyzw
                mad r2.xyzw, v[1][6].wwww, r3.xyzw, r2.xyzw
                dp3 r3.x, v[1][2].xyzx, cb0[r1.w + 24].xyzx
                dp3 r3.y, v[1][2].xyzx, cb0[r1.w + 25].xyzx
                dp3 r3.z, v[1][2].xyzx, cb0[r1.w + 26].xyzx
                mad r1.xyz, v[1][6].wwww, r3.xyzx, r1.xyzx
                dp4 r0.w, r2.xyzw, cb0[r0.y + 0].xyzw
                dp4 r1.w, r2.xyzw, cb0[r0.y + 1].xyzw
                dp4 r3.x, r2.xyzw, cb0[r0.y + 2].xyzw
                dp4 r0.y, r2.xyzw, cb0[r0.y + 3].xyzw
                dp3_sat r1.x, r1.xyzx, cb1[1].xyzx
                add r1.x, r1.x, l(0.500000)
                add r0.z, -|r0.z|, l(1.000000)
                mul r0.z, r0.z, v[1][3].w
                mov o0.x, r0.w
                mov o0.y, r1.w
                mov o0.z, r3.x
                mov o0.w, r0.y
                mov o1.xyz, r1.xxxx
                mov o1.w, r0.z
                mov o2.xy, v[1][4].xyxx
                emit 
                mov o0.x, r0.w
                mov o0.y, r1.w
                mov o0.z, r3.x
                mov o0.w, r0.y
                mov o1.xyz, r1.xxxx
                mov o1.w, r0.z
                mov o2.xy, v[1][4].xyxx
                emit 
                iadd r0.x, r0.x, l(1)
              endloop 
              cut 
              mov r0.x, l(0)
              loop 
                uge r0.y, r0.x, l(3)
                breakc_nz r0.y
                ishl r0.y, r0.x, l(2)
                utof r0.z, r0.x
                add r0.z, r0.z, l(-1.000000)
                imad r1.xyzw, r0.xxxx, l(100, 100, 100, 100), v[1][5].xyzw
                ishl r1.xyzw, r1.xyzw, l(2)
                dp4 r2.x, v[1][0].xyzw, cb0[r1.x + 24].xyzw
                dp4 r2.y, v[1][0].xyzw, cb0[r1.x + 25].xyzw
                dp4 r2.z, v[1][0].xyzw, cb0[r1.x + 26].xyzw
                dp4 r2.w, v[1][0].xyzw, cb0[r1.x + 27].xyzw
                dp3 r3.x, v[1][2].xyzx, cb0[r1.x + 24].xyzx
                dp3 r3.y, v[1][2].xyzx, cb0[r1.x + 25].xyzx
                dp3 r3.z, v[1][2].xyzx, cb0[r1.x + 26].xyzx
                dp4 r4.x, v[1][0].xyzw, cb0[r1.y + 24].xyzw
                dp4 r4.y, v[1][0].xyzw, cb0[r1.y + 25].xyzw
                dp4 r4.z, v[1][0].xyzw, cb0[r1.y + 26].xyzw
                dp4 r4.w, v[1][0].xyzw, cb0[r1.y + 27].xyzw
                mul r4.xyzw, r4.xyzw, v[1][6].yyyy
                mad r2.xyzw, v[1][6].xxxx, r2.xyzw, r4.xyzw
                dp3 r4.x, v[1][2].xyzx, cb0[r1.y + 24].xyzx
                dp3 r4.y, v[1][2].xyzx, cb0[r1.y + 25].xyzx
                dp3 r4.z, v[1][2].xyzx, cb0[r1.y + 26].xyzx
                mul r4.xyz, r4.xyzx, v[1][6].yyyy
                mad r3.xyz, v[1][6].xxxx, r3.xyzx, r4.xyzx
                dp4 r4.x, v[1][0].xyzw, cb0[r1.z + 24].xyzw
                dp4 r4.y, v[1][0].xyzw, cb0[r1.z + 25].xyzw
                dp4 r4.z, v[1][0].xyzw, cb0[r1.z + 26].xyzw
                dp4 r4.w, v[1][0].xyzw, cb0[r1.z + 27].xyzw
                mad r2.xyzw, v[1][6].zzzz, r4.xyzw, r2.xyzw
                dp3 r4.x, v[1][2].xyzx, cb0[r1.z + 24].xyzx
                dp3 r4.y, v[1][2].xyzx, cb0[r1.z + 25].xyzx
                dp3 r4.z, v[1][2].xyzx, cb0[r1.z + 26].xyzx
                mad r1.xyz, v[1][6].zzzz, r4.xyzx, r3.xyzx
                dp4 r3.x, v[1][0].xyzw, cb0[r1.w + 24].xyzw
                dp4 r3.y, v[1][0].xyzw, cb0[r1.w + 25].xyzw
                dp4 r3.z, v[1][0].xyzw, cb0[r1.w + 26].xyzw
                dp4 r3.w, v[1][0].xyzw, cb0[r1.w + 27].xyzw
                mad r2.xyzw, v[1][6].wwww, r3.xyzw, r2.xyzw
                dp3 r3.x, v[1][2].xyzx, cb0[r1.w + 24].xyzx
                dp3 r3.y, v[1][2].xyzx, cb0[r1.w + 25].xyzx
                dp3 r3.z, v[1][2].xyzx, cb0[r1.w + 26].xyzx
                mad r1.xyz, v[1][6].wwww, r3.xyzx, r1.xyzx
                dp4 r0.w, r2.xyzw, cb0[r0.y + 0].xyzw
                dp4 r1.w, r2.xyzw, cb0[r0.y + 1].xyzw
                dp4 r3.x, r2.xyzw, cb0[r0.y + 2].xyzw
                dp4 r2.x, r2.xyzw, cb0[r0.y + 3].xyzw
                dp3_sat r1.x, r1.xyzx, cb1[1].xyzx
                add r1.x, r1.x, l(0.500000)
                imad r4.xyzw, r0.xxxx, l(100, 100, 100, 100), v[0][5].xyzw
                ishl r4.xyzw, r4.xyzw, l(2)
                dp4 r5.x, v[0][0].xyzw, cb0[r4.x + 24].xyzw
                dp4 r5.y, v[0][0].xyzw, cb0[r4.x + 25].xyzw
                dp4 r5.z, v[0][0].xyzw, cb0[r4.x + 26].xyzw
                dp4 r5.w, v[0][0].xyzw, cb0[r4.x + 27].xyzw
                dp3 r6.x, v[0][2].xyzx, cb0[r4.x + 24].xyzx
                dp3 r6.y, v[0][2].xyzx, cb0[r4.x + 25].xyzx
                dp3 r6.z, v[0][2].xyzx, cb0[r4.x + 26].xyzx
                dp4 r7.x, v[0][0].xyzw, cb0[r4.y + 24].xyzw
                dp4 r7.y, v[0][0].xyzw, cb0[r4.y + 25].xyzw
                dp4 r7.z, v[0][0].xyzw, cb0[r4.y + 26].xyzw
                dp4 r7.w, v[0][0].xyzw, cb0[r4.y + 27].xyzw
                mul r7.xyzw, r7.xyzw, v[0][6].yyyy
                mad r5.xyzw, v[0][6].xxxx, r5.xyzw, r7.xyzw
                dp3 r7.x, v[0][2].xyzx, cb0[r4.y + 24].xyzx
                dp3 r7.y, v[0][2].xyzx, cb0[r4.y + 25].xyzx
                dp3 r7.z, v[0][2].xyzx, cb0[r4.y + 26].xyzx
                mul r2.yzw, r7.xxyz, v[0][6].yyyy
                mad r2.yzw, v[0][6].xxxx, r6.xxyz, r2.yyzw
                dp4 r6.x, v[0][0].xyzw, cb0[r4.z + 24].xyzw
                dp4 r6.y, v[0][0].xyzw, cb0[r4.z + 25].xyzw
                dp4 r6.z, v[0][0].xyzw, cb0[r4.z + 26].xyzw
                dp4 r6.w, v[0][0].xyzw, cb0[r4.z + 27].xyzw
                mad r5.xyzw, v[0][6].zzzz, r6.xyzw, r5.xyzw
                dp3 r6.x, v[0][2].xyzx, cb0[r4.z + 24].xyzx
                dp3 r6.y, v[0][2].xyzx, cb0[r4.z + 25].xyzx
                dp3 r6.z, v[0][2].xyzx, cb0[r4.z + 26].xyzx
                mad r2.yzw, v[0][6].zzzz, r6.xxyz, r2.yyzw
                dp4 r6.x, v[0][0].xyzw, cb0[r4.w + 24].xyzw
                dp4 r6.y, v[0][0].xyzw, cb0[r4.w + 25].xyzw
                dp4 r6.z, v[0][0].xyzw, cb0[r4.w + 26].xyzw
                dp4 r6.w, v[0][0].xyzw, cb0[r4.w + 27].xyzw
                mad r5.xyzw, v[0][6].wwww, r6.xyzw, r5.xyzw
                dp3 r4.x, v[0][2].xyzx, cb0[r4.w + 24].xyzx
                dp3 r4.y, v[0][2].xyzx, cb0[r4.w + 25].xyzx
                dp3 r4.z, v[0][2].xyzx, cb0[r4.w + 26].xyzx
                mad r2.yzw, v[0][6].wwww, r4.xxyz, r2.yyzw
                dp4 r1.y, r5.xyzw, cb0[r0.y + 0].xyzw
                dp4 r1.z, r5.xyzw, cb0[r0.y + 1].xyzw
                dp4 r3.y, r5.xyzw, cb0[r0.y + 2].xyzw
                dp4 r0.y, r5.xyzw, cb0[r0.y + 3].xyzw
                dp3_sat r2.y, r2.yzwy, cb1[1].xyzx
                add r2.y, r2.y, l(0.500000)
                add r0.z, -|r0.z|, l(1.000000)
                mul r2.z, r0.z, v[1][3].w
                mul r0.z, r0.z, v[0][3].w
                mov o0.x, r1.y
                mov o0.y, r1.z
                mov o0.z, r3.y
                mov o0.w, r0.y
                mov o1.xyz, r2.yyyy
                mov o1.w, r0.z
                mov o2.xy, v[0][4].xyxx
                emit 
                mov o0.x, r0.w
                mov o0.y, r1.w
                mov o0.z, r3.x
                mov o0.w, r2.x
                mov o1.xyz, r1.xxxx
                mov o1.w, r2.z
                mov o2.xy, v[1][4].xyxx
                emit 
                iadd r0.x, r0.x, l(1)
              endloop 
              cut 
            endif 
            ret 
            // Approximately 314 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinear                       sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // COLOR                    0   xyzw        1     NONE   float   xyzw
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v1.xyzw
            dcl_input_ps linear v2.xy
            dcl_output o0.xyzw
            dcl_temps 1
            sample_l r0.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)
            mov r0.w, l(1.000000)
            mul o0.xyzw, r0.xyzw, v1.xyzw
            ret 
            // Approximately 4 instruction slots used
                    
        };
        RasterizerState = RasMultiSampleNone;
        DS_StencilRef = uint(0);
        DepthStencilState = DepthTestLessEqual;
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = SrcAlphaBlending;
    }

}

