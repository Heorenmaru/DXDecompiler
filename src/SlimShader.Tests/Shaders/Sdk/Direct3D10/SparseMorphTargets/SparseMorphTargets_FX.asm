//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 4 local buffer(s)
//
cbuffer cbOnce
{
    uint    g_DataTexSize;              // Offset:    0, size:    4
    float3  g_vLightDir = { 0, 0.707000017, -0.707000017 };// Offset:    4, size:   12
}

cbuffer cbPerFrame
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mWorld;                  // Offset:   64, size:   64
    float3  g_vCameraPos;               // Offset:  128, size:   12
    float   g_fOily;                    // Offset:  140, size:    4
}

cbuffer cbManyPerFrame
{
    float   g_fBlendAmt;                // Offset:    0, size:    4
    float3  g_vMaxDeltas[3];            // Offset:   16, size:   44
    uint    g_RT;                       // Offset:   60, size:    4
}

cbuffer SHLights
{
    float4  RLight[9];                  // Offset:    0, size:  144
    float4  GLight[9];                  // Offset:  144, size:  144
    float4  BLight[9];                  // Offset:  288, size:  144
}

//
// 27 local object(s)
//
Texture2DArray g_txVertData;
Texture2DArray g_txVertDataOrig;
TextureCube CLinBF;
TextureCube QuadBF;
TextureCube CubeBFA;
TextureCube CubeBFB;
TextureCube QuarBFA;
TextureCube QuarBFB;
TextureCube QuarBFC;
TextureCube QuinBFA;
TextureCube QuinBFB;
Texture2D g_txDiffuse;
Texture2D g_txNormal;
TextureCube g_txEnvMap;
SamplerState g_samPointCube
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samLinearCube
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samPointClamp
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samPointWrap
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState g_samLinearWrap
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    BlendEnable[1] = bool(TRUE /* 1 */);
    BlendEnable[2] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
    RenderTargetWriteMask[2] = byte(0x0f);
};
BlendState AdditiveAlphaBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    BlendEnable[1] = bool(TRUE /* 1 */);
    BlendEnable[2] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
    RenderTargetWriteMask[1] = byte(0x0f);
    RenderTargetWriteMask[2] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
    BlendEnable[1] = bool(FALSE /* 0 */);
    BlendEnable[2] = bool(FALSE /* 0 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
RasterizerState DisableCulling
{
    CullMode = uint(NONE /* 1 */);
};
RasterizerState EnableCulling
{
    CullMode = uint(BACK /* 3 */);
};

//
// 5 technique(s)
//
technique10 RenderReferencedObject
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnce
            // {
            //
            //   uint g_DataTexSize;                // Offset:    0 Size:     4
            //   float3 g_vLightDir;                // Offset:    4 Size:    12 [unused]
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorld;                 // Offset:   64 Size:    64
            //   float3 g_vCameraPos;               // Offset:  128 Size:    12 [unused]
            //   float g_fOily;                     // Offset:  140 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txVertData                      texture  float3     2darray             t0      1 
            // g_txVertDataOrig                  texture  float3     2darray             t1      1 
            // cbOnce                            cbuffer      NA          NA            cb0      1 
            // cbPerFrame                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // REFERENCE                0   x           0     NONE    uint   x   
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // COEFFSET                 0   xyzw        2     NONE   float   xyzw
            // COEFFSET                 1   xyzw        3     NONE   float   xyzw
            // COEFFSET                 2   xyzw        4     NONE   float   xyzw
            // COEFFSET                 3   xyzw        5     NONE   float   xyzw
            // COEFFSET                 4   xy          6     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // TEXTURE                  8     zw        1     NONE   float     zw
            // TEXTURE                  1   xyz         2     NONE   float   xyz 
            // TEXTURE                  2   xyz         3     NONE   float   xyz 
            // TEXTURE                  3   xyz         4     NONE   float   xyz 
            // TEXTURE                  4   xyzw        5     NONE   float   xyzw
            // TEXTURE                  5   xyzw        6     NONE   float   xyzw
            // TEXTURE                  6   xyzw        7     NONE   float   xyzw
            // TEXTURE                  7   xyzw        8     NONE   float   xyzw
            //
            vs_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_resource_texture2darray (float,float,float,float) t1
            dcl_input v0.x
            dcl_input v1.xy
            dcl_input v2.xyzw
            dcl_input v3.xyzw
            dcl_input v4.xyzw
            dcl_input v5.xyzw
            dcl_input v6.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o1.zw
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyzw
            dcl_output o6.xyzw
            dcl_output o7.xyzw
            dcl_output o8.xyzw
            dcl_temps 4
            udiv r0.x, r1.x, v0.x, cb0[0].x
            utof r1.x, r1.x
            utof r1.y, r0.x
            add r0.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
            utof r0.z, cb0[0].x
            div r0.xz, r0.xxyx, r0.zzzz
            add r0.y, -r0.z, l(1.000000)
            mov r0.w, l(0)
            sample_l r1.xyzw, r0.xywx, t0.xyzw, s0, l(0.000000)
            sample_l r2.xyzw, r0.xzwx, t1.xyzw, s0, l(0.000000)
            mov r1.w, l(1.000000)
            dp4 o0.x, r1.xyzw, cb1[0].xyzw
            dp4 o0.y, r1.xyzw, cb1[1].xyzw
            dp4 o0.z, r1.xyzw, cb1[2].xyzw
            dp4 o0.w, r1.xyzw, cb1[3].xyzw
            mov o1.xy, v1.xyxx
            mov o1.zw, v6.xxxy
            mov r0.zw, l(0,0,1.000000,2.000000)
            sample_l r1.xyzw, r0.xywx, t0.xyzw, s0, l(0.000000)
            sample_l r0.xyzw, r0.xyzx, t0.xyzw, s0, l(0.000000)
            dp3 r3.x, r1.xyzx, cb1[4].xyzx
            dp3 r3.y, r1.xyzx, cb1[5].xyzx
            dp3 r3.z, r1.xyzx, cb1[6].xyzx
            dp3 r0.w, r3.xyzx, r3.xyzx
            rsq r0.w, r0.w
            mul o2.xyz, r0.wwww, r3.xyzx
            dp3 r1.x, r0.xyzx, cb1[4].xyzx
            dp3 r1.y, r0.xyzx, cb1[5].xyzx
            dp3 r1.z, r0.xyzx, cb1[6].xyzx
            dp3 r0.x, r1.xyzx, r1.xyzx
            rsq r0.x, r0.x
            mul o3.xyz, r0.xxxx, r1.xyzx
            mov r2.w, l(1.000000)
            dp4 o4.x, r2.xyzw, cb1[0].xyzw
            dp4 o4.y, r2.xyzw, cb1[1].xyzw
            dp4 o4.z, r2.xyzw, cb1[2].xyzw
            mov o5.xyzw, v2.xyzw
            mov o6.xyzw, v3.xyzw
            mov o7.xyzw, v4.xyzw
            mov o8.xyzw, v5.xyzw
            ret 
            // Approximately 41 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // TEXTURE                  8     zw        1     NONE   float     zw
            // TEXTURE                  1   xyz         2     NONE   float   xyz 
            // TEXTURE                  2   xyz         3     NONE   float   xyz 
            // TEXTURE                  3   xyz         4     NONE   float   xyz 
            // TEXTURE                  4   xyzw        5     NONE   float   xyzw
            // TEXTURE                  5   xyzw        6     NONE   float   xyzw
            // TEXTURE                  6   xyzw        7     NONE   float   xyzw
            // TEXTURE                  7   xyzw        8     NONE   float   xyzw
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // WRINKLE                  0     z         1     NONE   float     z 
            // TEXTURE                  1   xyz         2     NONE   float   xyz 
            // TEXTURE                  2   xyz         3     NONE   float   xyz 
            // TEXTURE                  3   xyzw        4     NONE   float   xyzw
            // TEXTURE                  4   xyzw        5     NONE   float   xyzw
            // TEXTURE                  5   xyzw        6     NONE   float   xyzw
            // TEXTURE                  6   xyzw        7     NONE   float   xyzw
            // TEXTURE                  7   xy          8     NONE   float   xy  
            //
            gs_4_0
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xy
            dcl_input v[3][1].zw
            dcl_input v[3][2].xyz
            dcl_input v[3][3].xyz
            dcl_input v[3][4].xyz
            dcl_input v[3][5].xyzw
            dcl_input v[3][6].xyzw
            dcl_input v[3][7].xyzw
            dcl_input v[3][8].xyzw
            dcl_temps 3
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xy
            dcl_output o1.z
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyzw
            dcl_output o5.xyzw
            dcl_output o6.xyzw
            dcl_output o7.xyzw
            dcl_output o8.xy
            dcl_maxout 3
            add r0.xyz, -v[0][0].zxyz, v[1][0].zxyz
            add r1.xyz, -v[0][0].yzxy, v[2][0].yzxy
            mul r2.xyz, r0.xyzx, r1.xyzx
            mad r0.xyz, r0.zxyz, r1.yzxy, -r2.xyzx
            dp3 r0.x, r0.xyzx, r0.xyzx
            add r0.yzw, -v[0][4].zzxy, v[1][4].zzxy
            add r1.xyz, -v[0][4].yzxy, v[2][4].yzxy
            mul r2.xyz, r0.yzwy, r1.xyzx
            mad r0.yzw, r0.wwyz, r1.yyzx, -r2.xxyz
            dp3 r0.y, r0.yzwy, r0.yzwy
            sqrt r0.xy, r0.xyxx
            mul r0.y, r0.y, l(0.500000)
            mad r0.x, -r0.x, l(0.500000), r0.y
            div r0.x, r0.x, r0.y
            lt r0.y, r0.x, l(0.000000)
            mul r0.z, r0.x, l(0.005000)
            movc r0.x, r0.y, r0.z, r0.x
            add_sat r0.x, r0.x, l(0.300000)
            mov r0.y, l(0)
            loop 
              ige r0.z, r0.y, l(3)
              breakc_nz r0.z
              mov o0.xyzw, v[r0.y + 0][0].xyzw
              mov o1.xy, v[r0.y + 0][1].xyxx
              mov o1.z, r0.x
              mov o2.xyz, v[r0.y + 0][2].xyzx
              mov o3.xyz, v[r0.y + 0][3].xyzx
              mov o4.xyzw, v[r0.y + 0][5].xyzw
              mov o5.xyzw, v[r0.y + 0][6].xyzw
              mov o6.xyzw, v[r0.y + 0][7].xyzw
              mov o7.xyzw, v[r0.y + 0][8].xyzw
              mov o8.xy, v[r0.y + 0][1].zwzz
              emit 
              iadd r0.y, r0.y, l(1)
            endloop 
            cut 
            ret 
            // Approximately 37 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:   64 Size:    64 [unused]
            //   float3 g_vCameraPos;               // Offset:  128 Size:    12
            //   float g_fOily;                     // Offset:  140 Size:     4
            //
            // }
            //
            // cbuffer SHLights
            // {
            //
            //   float4 RLight[9];                  // Offset:    0 Size:   144
            //   float4 GLight[9];                  // Offset:  144 Size:   144
            //   float4 BLight[9];                  // Offset:  288 Size:   144
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointCube                    sampler      NA          NA             s0      1 
            // g_samLinearCube                   sampler      NA          NA             s1      1 
            // g_samLinearWrap                   sampler      NA          NA             s2      1 
            // CLinBF                            texture  float4        cube             t0      1 
            // QuadBF                            texture  float4        cube             t1      1 
            // CubeBFA                           texture  float4        cube             t2      1 
            // CubeBFB                           texture  float4        cube             t3      1 
            // g_txDiffuse                       texture  float4          2d             t4      1 
            // g_txNormal                        texture  float4          2d             t5      1 
            // g_txEnvMap                        texture  float4        cube             t6      1 
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            // SHLights                          cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // TEXTURE                  0   xy          1     NONE   float   xy  
            // WRINKLE                  0     z         1     NONE   float     z 
            // TEXTURE                  1   xyz         2     NONE   float   xyz 
            // TEXTURE                  2   xyz         3     NONE   float   xyz 
            // TEXTURE                  3   xyzw        4     NONE   float   xyzw
            // TEXTURE                  4   xyzw        5     NONE   float   xyzw
            // TEXTURE                  5   xyzw        6     NONE   float   xyzw
            // TEXTURE                  6   xyzw        7     NONE   float       
            // TEXTURE                  7   xy          8     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[9], immediateIndexed
            dcl_constantbuffer CB1[22], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_sampler s2, mode_default
            dcl_resource_texturecube (float,float,float,float) t0
            dcl_resource_texturecube (float,float,float,float) t1
            dcl_resource_texturecube (float,float,float,float) t2
            dcl_resource_texturecube (float,float,float,float) t3
            dcl_resource_texture2d (float,float,float,float) t4
            dcl_resource_texture2d (float,float,float,float) t5
            dcl_resource_texturecube (float,float,float,float) t6
            dcl_input_ps linear v1.xy
            dcl_input_ps linear v1.z
            dcl_input_ps linear v2.xyz
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyzw
            dcl_input_ps linear v5.xyzw
            dcl_input_ps linear v6.xyzw
            dcl_output o0.xyzw
            dcl_temps 8
            mul r0.xyz, v2.yzxy, v3.zxyz
            mad r0.xyz, v3.yzxy, v2.zxyz, -r0.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            sample r1.xyzw, v1.xyxx, t5.xyzw, s2
            mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
            mul r2.xyz, r1.yyyy, v2.xyzx
            mad r0.xyz, r1.xxxx, r0.xyzx, r2.xyzx
            mad r0.xyz, r1.zzzz, v3.xyzx, r0.xyzx
            add r0.xyz, r0.xyzx, -v3.xyzx
            mad r0.xyz, v1.zzzz, r0.xyzx, v3.xyzx
            dp3 r0.w, cb0[8].xyzx, cb0[8].xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, cb0[8].xyzx
            dp3 r0.w, -r1.xyzx, r0.xyzx
            add r0.w, r0.w, r0.w
            mad r1.xyz, -r0.wwww, r0.xyzx, -r1.xyzx
            sample_l r1.xyzw, r1.xyzx, t6.xyzw, s1, l(6.000000)
            sample r2.xyzw, v1.xyxx, t4.xyzw, s2
            mul r0.w, r2.w, cb0[8].w
            mul_sat r1.xyzw, r1.xyzw, r0.wwww
            sample r3.xyzw, r0.xyzx, t0.xyzw, s0
            mul r4.xyzw, r3.xyzw, v4.xyyy
            dp4 r0.w, r4.xyzw, cb1[0].xyzw
            sample r4.xyzw, r0.xyzx, t1.xyzw, s0
            mul r5.xyzw, r4.xyzw, v4.zzzz
            dp4 r5.x, r5.xyzw, cb1[1].xyzw
            add r0.w, r0.w, r5.x
            sample r5.xyzw, r0.xyzx, t2.xyzw, s0
            sample r6.xyzw, r0.xyzx, t3.xyzw, s0
            mul r7.xyzw, r5.xyzw, v4.zwww
            mul r5.xyzw, r5.xyzw, v5.zwww
            dp4 r0.x, r7.xyzw, cb1[2].xyzw
            add r0.x, r0.x, r0.w
            mul r7.xyzw, r6.xyzw, v4.wwww
            dp4 r0.y, r7.xyzw, cb1[3].xyzw
            add r0.x, r0.y, r0.x
            mul r7.xyzw, r3.xyzw, v5.xyyy
            mul r3.xyzw, r3.xyzw, v6.xyyy
            dp4 r3.x, r3.xyzw, cb1[18].xyzw
            dp4 r3.y, r7.xyzw, cb1[9].xyzw
            mul r7.xyzw, r4.xyzw, v5.zzzz
            mul r4.xyzw, r4.xyzw, v6.zzzz
            dp4 r3.z, r4.xyzw, cb1[19].xyzw
            add r3.x, r3.z, r3.x
            dp4 r3.z, r7.xyzw, cb1[10].xyzw
            add r3.y, r3.z, r3.y
            dp4 r3.z, r5.xyzw, cb1[11].xyzw
            dp4 r3.w, r5.xyzw, cb1[20].xyzw
            add r3.xy, r3.wzww, r3.xyxx
            mul r4.xyzw, r6.xyzw, v5.wwww
            mul r5.xyzw, r6.xyzw, v6.wwww
            dp4 r3.z, r5.xyzw, cb1[21].xyzw
            add r0.z, r3.z, r3.x
            dp4 r3.x, r4.xyzw, cb1[12].xyzw
            add r0.y, r3.x, r3.y
            mov r0.w, l(1.000000)
            add r0.xyzw, r1.xyzw, r0.xyzw
            mul o0.xyzw, r0.xyzw, r2.xyzw
            ret 
            // Approximately 61 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
        RasterizerState = EnableCulling;
    }

}

technique10 Render2DQuad
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            //
            vs_4_0
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            mov o1.xy, v1.xyxx
            mov o1.z, l(0)
            ret 
            // Approximately 5 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4 [unused]
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44
            //   uint g_RT;                         // Offset:   60 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_RenderTargetArrayIndex     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_constantbuffer CB0[4], dynamicIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyz
            dcl_temps 1
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 9
            mov r0.x, l(0)
            loop 
              uge r0.y, r0.x, l(3)
              breakc_nz r0.y
              utof r0.y, r0.x
              mov r0.z, l(0)
              loop 
                ige r0.w, r0.z, l(3)
                breakc_nz r0.w
                mov o0.xyzw, v[r0.z + 0][0].xyzw
                mov o1.xy, v[r0.z + 0][1].xyxx
                mov o1.z, r0.y
                mov o2.xyz, cb0[r0.x + 1].xyzx
                mov o3.x, r0.x
                emit 
                iadd r0.z, r0.z, l(1)
              endloop 
              cut 
              iadd r0.x, r0.x, l(1)
            endloop 
            ret 
            // Approximately 21 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44 [unused]
            //   uint g_RT;                         // Offset:   60 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txVertData                      texture  float3     2darray             t0      1 
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_RenderTargetArrayIndex     0   x           3  RTINDEX    uint       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, v2.xyzx
            mov o0.w, cb0[0].x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AdditiveBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

technique10 Render2DQuadNoAlpha
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            //
            vs_4_0
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            mov o1.xy, v1.xyxx
            mov o1.z, l(0)
            ret 
            // Approximately 5 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4 [unused]
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44
            //   uint g_RT;                         // Offset:   60 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_RenderTargetArrayIndex     0   x           3  RTINDEX    uint   x   
            //
            gs_4_0
            dcl_constantbuffer CB0[4], dynamicIndexed
            dcl_input_siv v[3][0].xyzw, position
            dcl_input v[3][1].xyz
            dcl_temps 1
            dcl_inputprimitive triangle 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xyz
            dcl_output_siv o3.x, rendertarget_array_index
            dcl_maxout 9
            mov r0.x, l(0)
            loop 
              uge r0.y, r0.x, l(3)
              breakc_nz r0.y
              utof r0.y, r0.x
              mov r0.z, l(0)
              loop 
                ige r0.w, r0.z, l(3)
                breakc_nz r0.w
                mov o0.xyzw, v[r0.z + 0][0].xyzw
                mov o1.xy, v[r0.z + 0][1].xyxx
                mov o1.z, r0.y
                mov o2.xyz, cb0[r0.x + 1].xyzx
                mov o3.x, r0.x
                emit 
                iadd r0.z, r0.z, l(1)
              endloop 
              cut 
              iadd r0.x, r0.x, l(1)
            endloop 
            ret 
            // Approximately 21 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44 [unused]
            //   uint g_RT;                         // Offset:   60 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txVertData                      texture  float3     2darray             t0      1 
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 1   xyz         2     NONE   float   xyz 
            // SV_RenderTargetArrayIndex     0   x           3  RTINDEX    uint       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, v2.xyzx
            mov o0.w, cb0[0].x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

technique10 Show2DQuad
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4 [unused]
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44 [unused]
            //   uint g_RT;                         // Offset:   60 Size:     4
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xy  
            // TEXTURE                  0   xy          1     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            //
            vs_4_0
            dcl_constantbuffer CB0[4], immediateIndexed
            dcl_input v0.xy
            dcl_input v1.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            mov o0.xy, v0.xyxx
            mov o0.zw, l(0,0,0.500000,1.000000)
            utof o1.z, cb0[3].w
            mov o1.xy, v1.xyxx
            ret 
            // Approximately 5 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbManyPerFrame
            // {
            //
            //   float g_fBlendAmt;                 // Offset:    0 Size:     4
            //   float3 g_vMaxDeltas[3];            // Offset:   16 Size:    44 [unused]
            //   uint g_RT;                         // Offset:   60 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPointClamp                   sampler      NA          NA             s0      1 
            // g_txVertData                      texture  float3     2darray             t0      1 
            // cbManyPerFrame                    cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2darray (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_output o0.xyzw
            dcl_temps 1
            sample r0.xyzw, v1.xyzx, t0.xyzw, s0
            div o0.xyz, r0.xyzx, cb0[0].xxxx
            mov o0.w, l(1.000000)
            ret 
            // Approximately 4 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
        RasterizerState = DisableCulling;
    }

}

technique10 RenderScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorld;                 // Offset:   64 Size:    64
            //   float3 g_vCameraPos;               // Offset:  128 Size:    12 [unused]
            //   float g_fOily;                     // Offset:  140 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerFrame                        cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float   xyzw
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            //
            vs_4_0
            dcl_constantbuffer CB0[7], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xy
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp3 o1.x, v1.xyzx, cb0[4].xyzx
            dp3 o1.y, v1.xyzx, cb0[5].xyzx
            dp3 o1.z, v1.xyzx, cb0[6].xyzx
            mov o2.xy, v2.xyxx
            ret 
            // Approximately 11 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbOnce
            // {
            //
            //   uint g_DataTexSize;                // Offset:    0 Size:     4 [unused]
            //   float3 g_vLightDir;                // Offset:    4 Size:    12
            //      = 0x00000000 0x3f34fdf4 0xbf34fdf4 
            //
            // }
            //
            // cbuffer cbPerFrame
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:   64 Size:    64 [unused]
            //   float3 g_vCameraPos;               // Offset:  128 Size:    12
            //   float g_fOily;                     // Offset:  140 Size:     4 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearCube                   sampler      NA          NA             s0      1 
            // g_samLinearWrap                   sampler      NA          NA             s1      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            // g_txEnvMap                        texture  float4        cube             t1      1 
            // cbOnce                            cbuffer      NA          NA            cb0      1 
            // cbPerFrame                        cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Position              0   xyzw        0      POS   float       
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXTURE                  0   xy          2     NONE   float   xy  
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[9], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texturecube (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xy
            dcl_output o0.xyzw
            dcl_temps 3
            dp3 r0.x, cb1[8].xyzx, cb1[8].xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, cb1[8].xyzx
            dp3 r0.w, -r0.xyzx, v1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, -r0.wwww, v1.xyzx, -r0.xyzx
            sample r0.xyzw, r0.xyzx, t1.xyzw, s0
            mov_sat r0.xyzw, r0.xyzw
            mul r0.xyzw, r0.xyzw, l(0.200000, 0.200000, 0.200000, 0.200000)
            dp3 r1.x, cb0[0].yzwy, v1.xyzx
            sample r2.xyzw, v2.xyxx, t0.xyzw, s1
            mad o0.xyzw, r2.xyzw, r1.xxxx, r0.xyzw
            ret 
            // Approximately 13 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
        RasterizerState = EnableCulling;
    }

}

