//
// FX Version: fx_4_0
// Child effect (requires effect pool): false
//
// 4 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 g_mWorldViewProj;          // Offset:    0, size:   64
    float4x4 g_mWorldView;              // Offset:   64, size:   64
    float4x4 g_mWorld;                  // Offset:  128, size:   64
    float4x4 g_mInvView;                // Offset:  192, size:   64
    float4x4 g_mInvProj;                // Offset:  256, size:   64
    float3  g_vViewDir;                 // Offset:  320, size:   12
}

cbuffer cbUser
{
    float   g_fFadeDistance;            // Offset:    0, size:    4
    float   g_fSizeZScale;              // Offset:    4, size:    4
    float2  g_vScreenSize;              // Offset:    8, size:    8
    float4  g_vViewLightDir1;           // Offset:   16, size:   16
    float4  g_vViewLightDir2;           // Offset:   32, size:   16
    float4  g_vWorldLightDir1;          // Offset:   48, size:   16
    float4  g_vWorldLightDir2;          // Offset:   64, size:   16
    float4  g_vEyePt;                   // Offset:   80, size:   16
    float   g_stepSize = 0.00999999978; // Offset:   96, size:    4
    float   g_noiseSize = 40;           // Offset:  100, size:    4
    float   g_noiseOpacity = 20;        // Offset:  104, size:    4
}

cbuffer cbNoiseOffset
{
    float4  g_OctaveOffsets[4];         // Offset:    0, size:   64
}

cbuffer cbImmutable
{
    float3  g_positions[4] = { -1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 };// Offset:    0, size:   60
    float2  g_texcoords[4] = { 0, 0, 1, 0, 0, 1, 1, 1 };// Offset:   64, size:   56
    float4  g_directional1 = { 0.991999984, 1, 0.879999995, 0 };// Offset:  128, size:   16
    float4  g_directional2 = { 0.595000029, 0.600000024, 0.527999997, 0 };// Offset:  144, size:   16
    float4  g_ambient = { 0.524999976, 0.474000007, 0.474000007, 0 };// Offset:  160, size:   16
}

//
// 17 local object(s)
//
Texture2D g_txDiffuse;
Texture2D g_txNormal;
Texture2D g_txColorGradient;
Texture3D g_txVolumeDiff;
Texture3D g_txVolumeNorm;
Texture2D g_txDepth;
Texture2DMS g_txDepthMSAA;
SamplerState g_samLinearClamp
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samLinearWrap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samVolume
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
BlendState AlphaBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
BlendState NoBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(FALSE /* 0 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState DisableDepthWrite
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState DisableDepthTest
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(ALWAYS /* 8 */);
};

//
// 12 technique(s)
//
technique10 RenderScene
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TANGENT                  0   xyz         3     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TEXCOORD                 1   xyz         3     NONE   float   xyz 
            // TEXCOORD                 2   xyz         4     NONE   float   xyz 
            //
            vs_4_0
            dcl_constantbuffer CB0[11], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyz
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xy
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_temps 2
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp3 r1.x, v1.xyzx, cb0[8].xyzx
            dp3 r1.y, v1.xyzx, cb0[9].xyzx
            dp3 r1.z, v1.xyzx, cb0[10].xyzx
            dp3 r1.w, r1.xyzx, r1.xyzx
            rsq r1.w, r1.w
            mul o1.xyz, r1.wwww, r1.xyzx
            mov o2.xy, v2.xyxx
            dp3 r1.x, v3.xyzx, cb0[8].xyzx
            dp3 r1.y, v3.xyzx, cb0[9].xyzx
            dp3 r1.z, v3.xyzx, cb0[10].xyzx
            dp3 r1.w, r1.xyzx, r1.xyzx
            rsq r1.w, r1.w
            mul o3.xyz, r1.wwww, r1.xyzx
            dp4 o4.x, r0.xyzw, cb0[8].xyzw
            dp4 o4.y, r0.xyzw, cb0[9].xyzw
            dp4 o4.z, r0.xyzw, cb0[10].xyzw
            ret 
            // Approximately 23 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4 [unused]
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearWrap                   sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            // g_txNormal                        texture  float4          2d             t1      1 
            // cbUser                            cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TEXCOORD                 1   xyz         3     NONE   float   xyz 
            // TEXCOORD                 2   xyz         4     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[6], immediateIndexed
            dcl_constantbuffer CB1[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyz
            dcl_output o0.xyzw
            dcl_temps 4
            mul r0.xyz, v1.zxyz, v3.yzxy
            mad r0.xyz, v1.yzxy, v3.zxyz, -r0.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            sample r1.xyzw, v2.xyxx, t1.xyzw, s0
            mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
            mul r2.xyz, r1.yyyy, v3.xyzx
            mad r0.xyz, r1.xxxx, r0.xyzx, r2.xyzx
            mad r0.xyz, r1.zzzz, v1.xyzx, r0.xyzx
            dp3 r0.w, r0.xyzx, r0.xyzx
            rsq r0.w, r0.w
            mul r0.xyz, r0.wwww, r0.xyzx
            add r1.xyz, -v4.xyzx, cb0[5].xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            rsq r0.w, r0.w
            mad r2.xyz, r1.xyzx, r0.wwww, cb0[4].xyzx
            mad r1.xyz, r1.xyzx, r0.wwww, cb0[3].xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, r2.xyzx
            dp3_sat r0.w, r2.xyzx, r0.xyzx
            log r0.w, r0.w
            mul r0.w, r0.w, l(32.000000)
            exp r0.w, r0.w
            mul r2.xyzw, r0.wwww, cb1[9].xyzw
            dp3 r0.w, r1.xyzx, r1.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, r1.xyzx
            dp3_sat r0.w, r1.xyzx, r0.xyzx
            log r0.w, r0.w
            mul r0.w, r0.w, l(32.000000)
            exp r0.w, r0.w
            mad r1.xyzw, r0.wwww, cb1[8].xyzw, r2.xyzw
            sample r2.xyzw, v2.xyxx, t0.xyzw, s0
            mul r1.xyzw, r1.xyzw, r2.wwww
            dp3_sat r0.w, r0.xyzx, cb0[4].xyzx
            dp3_sat r0.x, r0.xyzx, cb0[3].xyzx
            mul r3.xyzw, r0.wwww, cb1[9].xyzw
            mad r0.xyzw, r0.xxxx, cb1[8].xyzw, r3.xyzw
            add r0.xyzw, r0.xyzw, cb1[10].xyzw
            mad o0.xyzw, r0.xyzw, r2.xyzw, r1.xyzw
            ret 
            // Approximately 43 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = EnableDepth;
    }

}

technique10 RenderSky
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TANGENT                  0   xyz         3     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // NORMAL                   0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TEXCOORD                 1   xyz         3     NONE   float   xyz 
            // TEXCOORD                 2   xyz         4     NONE   float   xyz 
            //
            vs_4_0
            dcl_constantbuffer CB0[11], immediateIndexed
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_input v3.xyz
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o2.xy
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_temps 2
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp3 r1.x, v1.xyzx, cb0[8].xyzx
            dp3 r1.y, v1.xyzx, cb0[9].xyzx
            dp3 r1.z, v1.xyzx, cb0[10].xyzx
            dp3 r1.w, r1.xyzx, r1.xyzx
            rsq r1.w, r1.w
            mul o1.xyz, r1.wwww, r1.xyzx
            mov o2.xy, v2.xyxx
            dp3 r1.x, v3.xyzx, cb0[8].xyzx
            dp3 r1.y, v3.xyzx, cb0[9].xyzx
            dp3 r1.z, v3.xyzx, cb0[10].xyzx
            dp3 r1.w, r1.xyzx, r1.xyzx
            rsq r1.w, r1.w
            mul o3.xyz, r1.wwww, r1.xyzx
            dp4 o4.x, r0.xyzw, cb0[8].xyzw
            dp4 o4.y, r0.xyzw, cb0[9].xyzw
            dp4 o4.z, r0.xyzw, cb0[10].xyzw
            ret 
            // Approximately 23 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearWrap                   sampler      NA          NA             s0      1 
            // g_txDiffuse                       texture  float4          2d             t0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // NORMAL                   0   xyz         1     NONE   float       
            // TEXCOORD                 0   xy          2     NONE   float   xy  
            // TEXCOORD                 1   xyz         3     NONE   float       
            // TEXCOORD                 2   xyz         4     NONE   float       
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input_ps linear v2.xy
            dcl_output o0.xyzw
            sample o0.xyzw, v2.xyxx, t0.xyzw, s0
            ret 
            // Approximately 2 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = NoBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthTest;
    }

}

technique10 RenderBillboardParticles_Hard
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // cbImmutable                       cbuffer      NA          NA            cb0      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float       
            // TEXCOORD                 1   xy          2     NONE   float       
            // TEXCOORD                 2     zw        2     NONE   float       
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 2
            add r0.xyz, cb0[8].xyzx, cb0[10].xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            sample r1.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, r1.xyzx
            mov o0.w, r1.w
            ret 
            // Approximately 6 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthWrite;
    }

}

technique10 RenderBillboardParticles_ODepth
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4 [unused]
            //   float g_fSizeZScale;               // Offset:    4 Size:     4
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // cbUser                            cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float       
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            // SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[1], immediateIndexed
            dcl_constantbuffer CB1[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.zw
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 2
            add r0.xyz, cb1[8].xyzx, cb1[10].xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            sample r1.xyzw, v1.xyzx, t0.xyzw, s0
            mul o0.xyz, r0.xyzx, r1.xyzx
            mov o0.w, r1.w
            mul r0.x, v1.w, cb0[0].y
            dp2 r0.x, r0.xxxx, r1.wwww
            add r0.x, -r0.x, v2.z
            div oDepth, r0.x, v2.w
            ret 
            // Approximately 10 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthWrite;
    }

}

technique10 RenderBillboardParticles_Soft
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_samVolume                       sampler      NA          NA             s1      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepth                         texture  float4          2d             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbImmutable                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float       
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 3
            div r0.z, v2.z, v2.w
            mad r1.xy, v2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t1.yzxw, s0
            mov r1.xy, v2.xyxx
            mov r1.w, l(1.000000)
            dp4 r2.x, r1.xyzw, cb0[18].xyzw
            dp4 r1.z, r1.xyzw, cb0[19].xyzw
            mov r0.xyw, r1.xyxw
            dp4 r1.x, r0.xyzw, cb0[18].xyzw
            dp4 r0.x, r0.xyzw, cb0[19].xyzw
            div r0.y, r2.x, r1.z
            div r0.x, r1.x, r0.x
            add r0.x, -r0.x, r0.y
            lt r0.y, r0.x, l(0.000000)
            discard_nz r0.y
            div_sat r0.x, r0.x, cb1[0].x
            sample r1.xyzw, v1.xyzx, t0.xyzw, s1
            add r0.yzw, cb2[8].xxyz, cb2[10].xxyz
            mul r0.yzw, r0.yyzw, v5.xxyz
            mul o0.xyz, r0.yzwy, r1.xyzx
            mul o0.w, r0.x, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthWrite;
    }

}

technique10 RenderBillboardParticles_ODepthSoft
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_samVolume                       sampler      NA          NA             s1      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepth                         texture  float4          2d             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbImmutable                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            // SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 4
            sample r0.xyzw, v1.xyzx, t0.xyzw, s1
            mul r1.x, v1.w, cb1[0].y
            dp2 r1.x, r1.xxxx, r0.wwww
            add r1.x, -r1.x, v2.z
            div r1.z, r1.x, v2.w
            mad r2.xy, v2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            sample r2.xyzw, r2.xyxx, t1.yzxw, s0
            mov r2.xy, v2.xyxx
            mov r2.w, l(1.000000)
            dp4 r3.x, r2.xyzw, cb0[18].xyzw
            dp4 r2.z, r2.xyzw, cb0[19].xyzw
            mov r1.xyw, r2.xyxw
            dp4 r2.x, r1.xyzw, cb0[18].xyzw
            dp4 r1.x, r1.xyzw, cb0[19].xyzw
            div r1.y, r3.x, r2.z
            div r1.x, r2.x, r1.x
            add r1.x, -r1.x, r1.y
            lt r1.y, r1.x, l(0.000000)
            discard_nz r1.y
            div_sat r1.x, r1.x, cb1[0].x
            add r2.xyz, cb2[8].xyzx, cb2[10].xyzx
            mul r2.xyz, r2.xyzx, v5.xyzx
            mul o0.xyz, r0.xyzx, r2.xyzx
            mul o0.w, r0.w, r1.x
            mov oDepth, r1.z
            ret 
            // Approximately 26 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderVolumeParticles_Hard
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4 [unused]
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbNoiseOffset
            // {
            //
            //   float4 g_OctaveOffsets[4];         // Offset:    0 Size:    64
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_samVolume                       sampler      NA          NA             s1      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepth                         texture  float4          2d             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbNoiseOffset                     cbuffer      NA          NA            cb2      1 
            // cbImmutable                       cbuffer      NA          NA            cb3      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float     z 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float       
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[21], immediateIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_constantbuffer CB2[4], dynamicIndexed
            dcl_constantbuffer CB3[9], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v1.z
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyz
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 9
            add r0.xyz, v3.xyzx, -v4.xyzx
            dp3 r0.w, cb0[20].xyzx, cb0[20].xyzx
            dp3 r1.x, r0.xyzx, cb0[20].xyzx
            add r1.y, r1.x, r1.x
            dp3 r0.x, r0.xyzx, r0.xyzx
            mad r0.x, -v1.w, v1.w, r0.x
            mul r0.x, r0.w, r0.x
            mul r0.x, r0.x, l(4.000000)
            mad r0.x, r1.y, r1.y, -r0.x
            lt r0.y, r0.x, l(0.010000)
            discard_nz r0.y
            mad r0.yz, v2.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            sample r2.xyzw, r0.yzyy, t1.yzxw, s0
            mov r2.xy, v2.xyxx
            mov r2.w, l(1.000000)
            dp4 r0.y, r2.xyzw, cb0[18].xyzw
            dp4 r0.z, r2.xyzw, cb0[19].xyzw
            div r0.y, r0.y, r0.z
            sqrt r0.x, r0.x
            mad r0.z, -r1.x, l(2.000000), -r0.x
            add r0.w, r0.w, r0.w
            mad r0.x, -r1.x, l(2.000000), r0.x
            div r0.xz, r0.xxzx, r0.wwww
            mad r1.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mov r1.w, l(1.000000)
            dp4 r0.w, r1.xyzw, cb0[6].xyzw
            dp4 r1.w, r1.xyzw, cb0[7].xyzw
            div r0.w, r0.w, r1.w
            add r0.y, -r0.y, r0.w
            lt r0.w, l(0.000000), r0.y
            add r0.x, -r0.y, r0.x
            lt r0.y, r0.x, r0.z
            and r0.y, r0.y, r0.w
            discard_nz r0.y
            mad r2.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mad r0.xyz, cb0[20].xyzx, r0.zzzz, v3.xyzx
            movc r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
            add r2.xyz, r0.xyzx, -v4.xyzx
            div r2.xyz, r2.xyzx, v1.wwww
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb1[6].y
            mul r0.xyz, r0.wwww, r0.xyzx
            mad r1.xyz, r1.xyzx, r0.wwww, -r0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r0.w, r0.w, cb1[6].x
            ftoi r0.w, r0.w
            imin r0.w, r0.w, l(6)
            iadd r3.xy, r0.wwww, l(2, 1, 0, 0)
            itof r0.w, r3.y
            div r1.xyz, r1.xyzx, r0.wwww
            div r1.w, cb1[6].z, r0.w
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
            mov r3.yzw, r2.xxyz
            mov r4.xyz, r0.xyzx
            mov r5.xyz, l(0,0,0,0)
            mov r2.w, l(0)
            mov r4.w, l(0)
            loop 
              ige r5.w, r4.w, r3.x
              breakc_nz r5.w
              mov r6.xyzw, l(0,0,0,0)
              mov r5.w, l(1.000000)
              mov r7.xy, l(1.000000,0,0,0)
              loop 
                ige r7.z, r7.y, l(4)
                breakc_nz r7.z
                add r8.xyz, r4.xyzx, cb2[r7.y + 0].xyzx
                mul r8.xyz, r5.wwww, r8.xyzx
                sample_l r8.xyzw, r8.xyzx, t0.xyzw, s1, l(0.000000)
                mad r6.xyzw, r7.xxxx, r8.xyzw, r6.xyzw
                mul r5.w, r5.w, l(3.000000)
                mul r7.x, r7.x, l(0.500000)
                iadd r7.y, r7.y, l(1)
              endloop 
              dp3 r5.w, r3.yzwy, r3.yzwy
              rsq r7.x, r5.w
              mad r7.xyz, r3.yzwy, r7.xxxx, r6.xyzx
              dp3 r7.x, r7.xyzx, r7.xyzx
              rsq r7.x, r7.x
              mul r7.x, r7.x, r7.y
              add r5.w, -r5.w, l(1.000000)
              mad r2.w, |r6.w|, r5.w, r2.w
              mad_sat r5.w, r7.x, l(0.500000), l(0.500000)
              mad r5.xyz, cb3[8].xyzx, r5.wwww, r5.xyzx
              add r4.xyz, r1.xyzx, r4.xyzx
              add r3.yzw, r1.xxyz, r3.yyzw
              iadd r4.w, r4.w, l(1)
            endloop 
            mul r0.xyz, r0.wwww, r5.xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            mad o0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000), l(0.200000, 0.200000, 0.200000, 0.000000)
            mul_sat r0.x, r1.w, r2.w
            add r0.y, -v1.z, l(1.000000)
            mul o0.w, r0.y, r0.x
            ret 
            // Approximately 95 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderVolumeParticles_Soft
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8 [unused]
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbNoiseOffset
            // {
            //
            //   float4 g_OctaveOffsets[4];         // Offset:    0 Size:    64
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samPoint                        sampler      NA          NA             s0      1 
            // g_samVolume                       sampler      NA          NA             s1      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepth                         texture  float4          2d             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbNoiseOffset                     cbuffer      NA          NA            cb2      1 
            // cbImmutable                       cbuffer      NA          NA            cb3      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float     z 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float       
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[21], immediateIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_constantbuffer CB2[4], dynamicIndexed
            dcl_constantbuffer CB3[9], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2d (float,float,float,float) t1
            dcl_input_ps linear v1.z
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyz
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 10
            add r0.xyz, v3.xyzx, -v4.xyzx
            dp3 r0.w, cb0[20].xyzx, cb0[20].xyzx
            dp3 r1.x, r0.xyzx, cb0[20].xyzx
            add r1.y, r1.x, r1.x
            dp3 r0.x, r0.xyzx, r0.xyzx
            mad r0.x, -v1.w, v1.w, r0.x
            mul r0.x, r0.w, r0.x
            mul r0.x, r0.x, l(4.000000)
            mad r0.x, r1.y, r1.y, -r0.x
            lt r0.y, r0.x, l(0.010000)
            discard_nz r0.y
            mad r0.yz, v2.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            sample r2.xyzw, r0.yzyy, t1.yzxw, s0
            mov r2.xy, v2.xyxx
            mov r2.w, l(1.000000)
            dp4 r0.y, r2.xyzw, cb0[18].xyzw
            dp4 r0.z, r2.xyzw, cb0[19].xyzw
            div r2.w, r0.y, r0.z
            sqrt r0.x, r0.x
            mad r0.y, -r1.x, l(2.000000), -r0.x
            add r0.z, r0.w, r0.w
            mad r0.x, -r1.x, l(2.000000), r0.x
            div r0.xy, r0.xyxx, r0.zzzz
            mad r1.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mov r1.w, l(1.000000)
            dp4 r0.z, r1.xyzw, cb0[6].xyzw
            dp4 r0.w, r1.xyzw, cb0[7].xyzw
            div r1.w, r0.z, r0.w
            add r0.z, -r2.w, r1.w
            lt r0.w, l(0.000000), r0.z
            add r0.x, -r0.z, r0.x
            lt r0.z, r0.x, r0.y
            and r0.z, r0.z, r0.w
            discard_nz r0.z
            mad r2.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mad r3.xyz, cb0[20].xyzx, r0.yyyy, v3.xyzx
            mov r3.w, l(1.000000)
            dp4 r0.x, r3.xyzw, cb0[6].xyzw
            dp4 r0.y, r3.xyzw, cb0[7].xyzw
            div r0.x, r0.x, r0.y
            movc r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
            add r0.yzw, r3.xxyz, -v4.xxyz
            div r0.yzw, r0.yyzw, v1.wwww
            div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb1[6].y
            mul r3.xyz, r2.xxxx, r3.xyzx
            mad r1.xyz, r1.xyzx, r2.xxxx, -r3.xyzx
            dp3 r2.x, r1.xyzx, r1.xyzx
            sqrt r2.x, r2.x
            div r2.x, r2.x, cb1[6].x
            ftoi r2.x, r2.x
            imin r2.x, r2.x, l(6)
            iadd r2.xy, r2.xxxx, l(2, 1, 0, 0)
            itof r2.y, r2.y
            add r1.w, -r0.x, r1.w
            div r1.xyzw, r1.xyzw, r2.yyyy
            div r2.z, cb1[6].z, r2.y
            div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
            mov r4.xyz, r0.yzwy
            mov r5.xyz, r3.xyzx
            mov r6.xyz, l(0,0,0,0)
            mov r3.w, r0.x
            mov r4.w, l(0)
            mov r5.w, l(0)
            loop 
              ige r6.w, r5.w, r2.x
              breakc_nz r6.w
              mov r7.xyzw, l(0,0,0,0)
              mov r6.w, l(1.000000)
              mov r8.xy, l(1.000000,0,0,0)
              loop 
                ige r8.z, r8.y, l(4)
                breakc_nz r8.z
                add r9.xyz, r5.xyzx, cb2[r8.y + 0].xyzx
                mul r9.xyz, r6.wwww, r9.xyzx
                sample_l r9.xyzw, r9.xyzx, t0.xyzw, s1, l(0.000000)
                mad r7.xyzw, r8.xxxx, r9.xyzw, r7.xyzw
                mul r6.w, r6.w, l(3.000000)
                mul r8.x, r8.x, l(0.500000)
                iadd r8.y, r8.y, l(1)
              endloop 
              dp3 r6.w, r4.xyzx, r4.xyzx
              rsq r8.x, r6.w
              mad r8.xyz, r4.xyzx, r8.xxxx, r7.xyzx
              dp3 r8.x, r8.xyzx, r8.xyzx
              rsq r8.x, r8.x
              mul r8.x, r8.x, r8.y
              add r8.y, r2.w, -r3.w
              div_sat r8.y, r8.y, cb1[0].x
              add r6.w, -r6.w, l(1.000000)
              mul r6.w, r6.w, |r7.w|
              mad r4.w, r6.w, r8.y, r4.w
              mad_sat r6.w, r8.x, l(0.500000), l(0.500000)
              mad r6.xyz, cb3[8].xyzx, r6.wwww, r6.xyzx
              add r5.xyz, r1.xyzx, r5.xyzx
              add r4.xyz, r1.xyzx, r4.xyzx
              add r3.w, r1.w, r3.w
              iadd r5.w, r5.w, l(1)
            endloop 
            mul r0.xyz, r2.yyyy, r6.xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            mad o0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000), l(0.200000, 0.200000, 0.200000, 0.000000)
            mul_sat r0.x, r2.z, r4.w
            add r0.y, -v1.z, l(1.000000)
            mul o0.w, r0.y, r0.x
            ret 
            // Approximately 105 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderVolumeParticles_Hard_MSAA
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4 [unused]
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbNoiseOffset
            // {
            //
            //   float4 g_OctaveOffsets[4];         // Offset:    0 Size:    64
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepthMSAA                     texture   float       2dMS1             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbNoiseOffset                     cbuffer      NA          NA            cb2      1 
            // cbImmutable                       cbuffer      NA          NA            cb3      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float     z 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float       
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[21], immediateIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_constantbuffer CB2[4], dynamicIndexed
            dcl_constantbuffer CB3[9], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2dms(1) (float,float,float,float) t1
            dcl_input_ps linear v1.z
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyz
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 9
            add r0.xyz, v3.xyzx, -v4.xyzx
            dp3 r0.w, cb0[20].xyzx, cb0[20].xyzx
            dp3 r1.x, r0.xyzx, cb0[20].xyzx
            add r1.y, r1.x, r1.x
            dp3 r0.x, r0.xyzx, r0.xyzx
            mad r0.x, -v1.w, v1.w, r0.x
            mul r0.x, r0.w, r0.x
            mul r0.x, r0.x, l(4.000000)
            mad r0.x, r1.y, r1.y, -r0.x
            lt r0.y, r0.x, l(0.010000)
            discard_nz r0.y
            add r0.yz, v2.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
            mul r0.y, r0.y, cb1[0].z
            mad r0.z, l(-0.500000), r0.z, l(1.000000)
            mul r2.x, r0.y, l(0.500000)
            mul r2.y, r0.z, cb1[0].w
            ftoi r2.xy, r2.xyxx
            mov r2.zw, l(0,0,0,0)
            ldms r2.xyzw, r2.xyzw, t1.yzxw, l(0)
            mov r2.xy, v2.xyxx
            mov r2.w, l(1.000000)
            dp4 r0.y, r2.xyzw, cb0[18].xyzw
            dp4 r0.z, r2.xyzw, cb0[19].xyzw
            div r0.y, r0.y, r0.z
            sqrt r0.x, r0.x
            mad r0.z, -r1.x, l(2.000000), -r0.x
            add r0.w, r0.w, r0.w
            mad r0.x, -r1.x, l(2.000000), r0.x
            div r0.xz, r0.xxzx, r0.wwww
            mad r1.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mov r1.w, l(1.000000)
            dp4 r0.w, r1.xyzw, cb0[6].xyzw
            dp4 r1.w, r1.xyzw, cb0[7].xyzw
            div r0.w, r0.w, r1.w
            add r0.y, -r0.y, r0.w
            lt r0.w, l(0.000000), r0.y
            add r0.x, -r0.y, r0.x
            lt r0.y, r0.x, r0.z
            and r0.y, r0.y, r0.w
            discard_nz r0.y
            mad r2.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mad r0.xyz, cb0[20].xyzx, r0.zzzz, v3.xyzx
            movc r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
            add r2.xyz, r0.xyzx, -v4.xyzx
            div r2.xyz, r2.xyzx, v1.wwww
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb1[6].y
            mul r0.xyz, r0.wwww, r0.xyzx
            mad r1.xyz, r1.xyzx, r0.wwww, -r0.xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            sqrt r0.w, r0.w
            div r0.w, r0.w, cb1[6].x
            ftoi r0.w, r0.w
            imin r0.w, r0.w, l(6)
            iadd r3.xy, r0.wwww, l(2, 1, 0, 0)
            itof r0.w, r3.y
            div r1.xyz, r1.xyzx, r0.wwww
            div r1.w, cb1[6].z, r0.w
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
            mov r3.yzw, r2.xxyz
            mov r4.xyz, r0.xyzx
            mov r5.xyz, l(0,0,0,0)
            mov r2.w, l(0)
            mov r4.w, l(0)
            loop 
              ige r5.w, r4.w, r3.x
              breakc_nz r5.w
              mov r6.xyzw, l(0,0,0,0)
              mov r5.w, l(1.000000)
              mov r7.xy, l(1.000000,0,0,0)
              loop 
                ige r7.z, r7.y, l(4)
                breakc_nz r7.z
                add r8.xyz, r4.xyzx, cb2[r7.y + 0].xyzx
                mul r8.xyz, r5.wwww, r8.xyzx
                sample_l r8.xyzw, r8.xyzx, t0.xyzw, s0, l(0.000000)
                mad r6.xyzw, r7.xxxx, r8.xyzw, r6.xyzw
                mul r5.w, r5.w, l(3.000000)
                mul r7.x, r7.x, l(0.500000)
                iadd r7.y, r7.y, l(1)
              endloop 
              dp3 r5.w, r3.yzwy, r3.yzwy
              rsq r7.x, r5.w
              mad r7.xyz, r3.yzwy, r7.xxxx, r6.xyzx
              dp3 r7.x, r7.xyzx, r7.xyzx
              rsq r7.x, r7.x
              mul r7.x, r7.x, r7.y
              add r5.w, -r5.w, l(1.000000)
              mad r2.w, |r6.w|, r5.w, r2.w
              mad_sat r5.w, r7.x, l(0.500000), l(0.500000)
              mad r5.xyz, cb3[8].xyzx, r5.wwww, r5.xyzx
              add r4.xyz, r1.xyzx, r4.xyzx
              add r3.yzw, r1.xxyz, r3.yyzw
              iadd r4.w, r4.w, l(1)
            endloop 
            mul r0.xyz, r0.wwww, r5.xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            mad o0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000), l(0.200000, 0.200000, 0.200000, 0.000000)
            mul_sat r0.x, r1.w, r2.w
            add r0.y, -v1.z, l(1.000000)
            mul o0.w, r0.y, r0.x
            ret 
            // Approximately 101 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderBillboardParticles_Soft_MSAA
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepthMSAA                     texture   float       2dMS1             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbImmutable                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float       
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2dms(1) (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 3
            add r0.xy, v2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
            mul r0.x, r0.x, cb1[0].z
            div r1.z, v2.z, v2.w
            mad r0.y, l(-0.500000), r0.y, l(1.000000)
            mul r2.x, r0.x, l(0.500000)
            mul r2.y, r0.y, cb1[0].w
            ftoi r0.xy, r2.xyxx
            mov r0.zw, l(0,0,0,0)
            ldms r0.xyzw, r0.xyzw, t1.yzxw, l(0)
            mov r0.xy, v2.xyxx
            mov r0.w, l(1.000000)
            dp4 r2.x, r0.xyzw, cb0[18].xyzw
            dp4 r0.z, r0.xyzw, cb0[19].xyzw
            mov r1.xyw, r0.xyxw
            dp4 r0.x, r1.xyzw, cb0[18].xyzw
            dp4 r0.y, r1.xyzw, cb0[19].xyzw
            div r0.z, r2.x, r0.z
            div r0.x, r0.x, r0.y
            add r0.x, -r0.x, r0.z
            lt r0.y, r0.x, l(0.000000)
            discard_nz r0.y
            div_sat r0.x, r0.x, cb1[0].x
            sample r1.xyzw, v1.xyzx, t0.xyzw, s0
            add r0.yzw, cb2[8].xxyz, cb2[10].xxyz
            mul r0.yzw, r0.yyzw, v5.xxyz
            mul o0.xyz, r0.yzwy, r1.xyzx
            mul o0.w, r0.x, r1.w
            ret 
            // Approximately 28 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepthWrite;
    }

}

technique10 RenderBillboardParticles_ODepthSoft_MSAA
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4 [unused]
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4 [unused]
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4 [unused]
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepthMSAA                     texture   float       2dMS1             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbImmutable                       cbuffer      NA          NA            cb2      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float       
            // TEXCOORD                 5   xyz         4     NONE   float       
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            // SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
            //
            ps_4_0
            dcl_constantbuffer CB0[20], immediateIndexed
            dcl_constantbuffer CB1[1], immediateIndexed
            dcl_constantbuffer CB2[11], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2dms(1) (float,float,float,float) t1
            dcl_input_ps linear v1.xyz
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v2.zw
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_output oDepth
            dcl_temps 4
            add r0.xy, v2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
            mul r0.x, r0.x, cb1[0].z
            sample r1.xyzw, v1.xyzx, t0.xyzw, s0
            mul r0.z, v1.w, cb1[0].y
            dp2 r0.z, r0.zzzz, r1.wwww
            add r0.z, -r0.z, v2.z
            div r2.z, r0.z, v2.w
            mad r0.y, l(-0.500000), r0.y, l(1.000000)
            mul r3.x, r0.x, l(0.500000)
            mul r3.y, r0.y, cb1[0].w
            ftoi r0.xy, r3.xyxx
            mov r0.zw, l(0,0,0,0)
            ldms r0.xyzw, r0.xyzw, t1.yzxw, l(0)
            mov r0.xy, v2.xyxx
            mov r0.w, l(1.000000)
            dp4 r3.x, r0.xyzw, cb0[18].xyzw
            dp4 r0.z, r0.xyzw, cb0[19].xyzw
            mov r2.xyw, r0.xyxw
            dp4 r0.x, r2.xyzw, cb0[18].xyzw
            dp4 r0.y, r2.xyzw, cb0[19].xyzw
            div r0.z, r3.x, r0.z
            div r0.x, r0.x, r0.y
            add r0.x, -r0.x, r0.z
            lt r0.y, r0.x, l(0.000000)
            discard_nz r0.y
            div_sat r0.x, r0.x, cb1[0].x
            add r0.yzw, cb2[8].xxyz, cb2[10].xxyz
            mul r0.yzw, r0.yyzw, v5.xxyz
            mul o0.xyz, r0.yzwy, r1.xyzx
            mul o0.w, r0.x, r1.w
            mov oDepth, r2.z
            ret 
            // Approximately 32 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

technique10 RenderVolumeParticles_Soft_MSAA
{
    pass p0
    {
        VertexShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // VELOCITY                 0   xyz         1     NONE   float       
            // LIFE                     0   x           2     NONE   float   x   
            // SIZE                     0   x           3     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v2.x
            dcl_input v3.x
            dcl_output o0.xyz
            dcl_output o0.w
            dcl_output o1.x
            mov o0.xyz, v0.xyzx
            mov o0.w, v2.x
            mov o1.x, v3.x
            ret 
            // Approximately 4 instruction slots used
                    
        };
        GeometryShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64 [unused]
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64 [unused]
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12 [unused]
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16 [unused]
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samLinearClamp                  sampler      NA          NA             s0      1 
            // g_txColorGradient                 texture  float4          2d             t0      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbImmutable                       cbuffer      NA          NA            cb1      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // POSITION                 0   xyz         0     NONE   float   xyz 
            // LIFE                     0      w        0     NONE   float      w
            // SIZE                     0   x           1     NONE   float   x   
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float   xyzw
            // TEXCOORD                 0   xyz         1     NONE   float   xyz 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float     zw
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            gs_4_0
            dcl_constantbuffer CB0[15], immediateIndexed
            dcl_constantbuffer CB1[8], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture2d (float,float,float,float) t0
            dcl_input v[1][0].xyz
            dcl_input v[1][0].w
            dcl_input v[1][1].x
            dcl_temps 5
            dcl_inputprimitive point 
            dcl_outputtopology trianglestrip 
            dcl_output_siv o0.xyzw, position
            dcl_output o1.xyz
            dcl_output o1.w
            dcl_output o2.xy
            dcl_output o2.zw
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyz
            dcl_maxout 4
            lt r0.x, l(-1.000000), v[0][0].w
            if_nz r0.x
              mov r0.xyz, v[0][0].xyzx
              mov r0.w, l(1.000000)
              dp4 r1.x, r0.xyzw, cb0[8].xyzw
              dp4 r1.y, r0.xyzw, cb0[9].xyzw
              dp4 r0.x, r0.xyzw, cb0[10].xyzw
              mov r2.x, v[0][0].w
              mov r2.y, l(0)
              sample_l r2.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
              mul r0.yzw, cb1[0].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[4].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[1].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[5].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[2].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[6].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              mul r0.yzw, cb1[3].xxyz, v[0][1].xxxx
              dp3 r3.x, r0.yzwy, cb0[12].xyzx
              dp3 r3.y, r0.yzwy, cb0[13].xyzx
              dp3 r3.z, r0.yzwy, cb0[14].xyzx
              add r3.xyz, r3.xyzx, v[0][0].xyzx
              mov r3.w, l(1.000000)
              dp4 r4.x, r3.xyzw, cb0[0].xyzw
              dp4 r4.y, r3.xyzw, cb0[1].xyzw
              dp4 r0.y, r3.xyzw, cb0[2].xyzw
              dp4 r0.z, r3.xyzw, cb0[3].xyzw
              div r1.zw, r4.xxxy, r0.zzzz
              dp4 r0.w, r3.xyzw, cb0[8].xyzw
              dp4 r2.w, r3.xyzw, cb0[9].xyzw
              dp4 r3.x, r3.xyzw, cb0[10].xyzw
              mov o0.xy, r4.xyxx
              mov o0.z, r0.y
              mov o0.w, r0.z
              mov o1.xy, cb1[7].xyxx
              mov o1.z, v[0][0].w
              mov o1.w, v[0][1].x
              mov o2.xy, r1.zwzz
              mov o2.z, r0.y
              mov o2.w, r0.z
              mov o3.x, r0.w
              mov o3.y, r2.w
              mov o3.z, r3.x
              mov o4.x, r1.x
              mov o4.y, r1.y
              mov o4.z, r0.x
              mov o5.xyz, r2.xyzx
              emit 
              cut 
            endif 
            ret 
            // Approximately 137 instruction slots used
                    
        };
        PixelShader = asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 10.1
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbPerObject
            // {
            //
            //   float4x4 g_mWorldViewProj;         // Offset:    0 Size:    64 [unused]
            //   float4x4 g_mWorldView;             // Offset:   64 Size:    64
            //   float4x4 g_mWorld;                 // Offset:  128 Size:    64 [unused]
            //   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
            //   float4x4 g_mInvProj;               // Offset:  256 Size:    64
            //   float3 g_vViewDir;                 // Offset:  320 Size:    12
            //
            // }
            //
            // cbuffer cbUser
            // {
            //
            //   float g_fFadeDistance;             // Offset:    0 Size:     4
            //   float g_fSizeZScale;               // Offset:    4 Size:     4 [unused]
            //   float2 g_vScreenSize;              // Offset:    8 Size:     8
            //   float4 g_vViewLightDir1;           // Offset:   16 Size:    16 [unused]
            //   float4 g_vViewLightDir2;           // Offset:   32 Size:    16 [unused]
            //   float4 g_vWorldLightDir1;          // Offset:   48 Size:    16 [unused]
            //   float4 g_vWorldLightDir2;          // Offset:   64 Size:    16 [unused]
            //   float4 g_vEyePt;                   // Offset:   80 Size:    16 [unused]
            //   float g_stepSize;                  // Offset:   96 Size:     4
            //      = 0x3c23d70a 
            //   float g_noiseSize;                 // Offset:  100 Size:     4
            //      = 0x42200000 
            //   float g_noiseOpacity;              // Offset:  104 Size:     4
            //      = 0x41a00000 
            //
            // }
            //
            // cbuffer cbNoiseOffset
            // {
            //
            //   float4 g_OctaveOffsets[4];         // Offset:    0 Size:    64
            //
            // }
            //
            // cbuffer cbImmutable
            // {
            //
            //   float3 g_positions[4];             // Offset:    0 Size:    60 [unused]
            //      = 0xbf800000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 0x00000000 0x00000000 
            //        0xbf800000 0xbf800000 0x00000000 0x00000000 
            //        0x3f800000 0xbf800000 0x00000000 
            //   float2 g_texcoords[4];             // Offset:   64 Size:    56 [unused]
            //      = 0x00000000 0x00000000 0x00000000 0x00000000 
            //        0x3f800000 0x00000000 0x00000000 0x00000000 
            //        0x00000000 0x3f800000 0x00000000 0x00000000 
            //        0x3f800000 0x3f800000 
            //   float4 g_directional1;             // Offset:  128 Size:    16
            //      = 0x3f7df3b6 0x3f800000 0x3f6147ae 0x00000000 
            //   float4 g_directional2;             // Offset:  144 Size:    16 [unused]
            //      = 0x3f1851ec 0x3f19999a 0x3f072b02 0x00000000 
            //   float4 g_ambient;                  // Offset:  160 Size:    16 [unused]
            //      = 0x3f066666 0x3ef2b021 0x3ef2b021 0x00000000 
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                                 Type  Format         Dim      HLSL Bind  Count
            // ------------------------------ ---------- ------- ----------- -------------- ------
            // g_samVolume                       sampler      NA          NA             s0      1 
            // g_txVolumeDiff                    texture  float4          3d             t0      1 
            // g_txDepthMSAA                     texture   float       2dMS1             t1      1 
            // cbPerObject                       cbuffer      NA          NA            cb0      1 
            // cbUser                            cbuffer      NA          NA            cb1      1 
            // cbNoiseOffset                     cbuffer      NA          NA            cb2      1 
            // cbImmutable                       cbuffer      NA          NA            cb3      1 
            //
            //
            //
            // Input signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_POSITION              0   xyzw        0      POS   float       
            // TEXCOORD                 0   xyz         1     NONE   float     z 
            // TEXCOORD                 3      w        1     NONE   float      w
            // TEXCOORD                 1   xy          2     NONE   float   xy  
            // TEXCOORD                 2     zw        2     NONE   float       
            // TEXCOORD                 4   xyz         3     NONE   float   xyz 
            // TEXCOORD                 5   xyz         4     NONE   float   xyz 
            // TEXCOORD                 6   xyz         5     NONE   float   xyz 
            //
            //
            // Output signature:
            //
            // Name                 Index   Mask Register SysValue  Format   Used
            // -------------------- ----- ------ -------- -------- ------- ------
            // SV_Target                0   xyzw        0   TARGET   float   xyzw
            //
            ps_4_0
            dcl_constantbuffer CB0[21], immediateIndexed
            dcl_constantbuffer CB1[7], immediateIndexed
            dcl_constantbuffer CB2[4], dynamicIndexed
            dcl_constantbuffer CB3[9], immediateIndexed
            dcl_sampler s0, mode_default
            dcl_resource_texture3d (float,float,float,float) t0
            dcl_resource_texture2dms(1) (float,float,float,float) t1
            dcl_input_ps linear v1.z
            dcl_input_ps linear v1.w
            dcl_input_ps linear v2.xy
            dcl_input_ps linear v3.xyz
            dcl_input_ps linear v4.xyz
            dcl_input_ps linear v5.xyz
            dcl_output o0.xyzw
            dcl_temps 10
            add r0.xyz, v3.xyzx, -v4.xyzx
            dp3 r0.w, cb0[20].xyzx, cb0[20].xyzx
            dp3 r1.x, r0.xyzx, cb0[20].xyzx
            add r1.y, r1.x, r1.x
            dp3 r0.x, r0.xyzx, r0.xyzx
            mad r0.x, -v1.w, v1.w, r0.x
            mul r0.x, r0.w, r0.x
            mul r0.x, r0.x, l(4.000000)
            mad r0.x, r1.y, r1.y, -r0.x
            lt r0.y, r0.x, l(0.010000)
            discard_nz r0.y
            add r0.yz, v2.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
            mul r0.y, r0.y, cb1[0].z
            mad r0.z, l(-0.500000), r0.z, l(1.000000)
            mul r2.x, r0.y, l(0.500000)
            mul r2.y, r0.z, cb1[0].w
            ftoi r2.xy, r2.xyxx
            mov r2.zw, l(0,0,0,0)
            ldms r2.xyzw, r2.xyzw, t1.yzxw, l(0)
            mov r2.xy, v2.xyxx
            mov r2.w, l(1.000000)
            dp4 r0.y, r2.xyzw, cb0[18].xyzw
            dp4 r0.z, r2.xyzw, cb0[19].xyzw
            div r2.w, r0.y, r0.z
            sqrt r0.x, r0.x
            mad r0.y, -r1.x, l(2.000000), -r0.x
            add r0.z, r0.w, r0.w
            mad r0.x, -r1.x, l(2.000000), r0.x
            div r0.xy, r0.xyxx, r0.zzzz
            mad r1.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mov r1.w, l(1.000000)
            dp4 r0.z, r1.xyzw, cb0[6].xyzw
            dp4 r0.w, r1.xyzw, cb0[7].xyzw
            div r1.w, r0.z, r0.w
            add r0.z, -r2.w, r1.w
            lt r0.w, l(0.000000), r0.z
            add r0.x, -r0.z, r0.x
            lt r0.z, r0.x, r0.y
            and r0.z, r0.z, r0.w
            discard_nz r0.z
            mad r2.xyz, cb0[20].xyzx, r0.xxxx, v3.xyzx
            mad r3.xyz, cb0[20].xyzx, r0.yyyy, v3.xyzx
            mov r3.w, l(1.000000)
            dp4 r0.x, r3.xyzw, cb0[6].xyzw
            dp4 r0.y, r3.xyzw, cb0[7].xyzw
            div r0.x, r0.x, r0.y
            movc r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
            add r0.yzw, r3.xxyz, -v4.xxyz
            div r0.yzw, r0.yyzw, v1.wwww
            div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb1[6].y
            mul r3.xyz, r2.xxxx, r3.xyzx
            mad r1.xyz, r1.xyzx, r2.xxxx, -r3.xyzx
            dp3 r2.x, r1.xyzx, r1.xyzx
            sqrt r2.x, r2.x
            div r2.x, r2.x, cb1[6].x
            ftoi r2.x, r2.x
            imin r2.x, r2.x, l(6)
            iadd r2.xy, r2.xxxx, l(2, 1, 0, 0)
            itof r2.y, r2.y
            add r1.w, -r0.x, r1.w
            div r1.xyzw, r1.xyzw, r2.yyyy
            div r2.z, cb1[6].z, r2.y
            div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
            mov r4.xyz, r0.yzwy
            mov r5.xyz, r3.xyzx
            mov r6.xyz, l(0,0,0,0)
            mov r3.w, r0.x
            mov r4.w, l(0)
            mov r5.w, l(0)
            loop 
              ige r6.w, r5.w, r2.x
              breakc_nz r6.w
              mov r7.xyzw, l(0,0,0,0)
              mov r6.w, l(1.000000)
              mov r8.xy, l(1.000000,0,0,0)
              loop 
                ige r8.z, r8.y, l(4)
                breakc_nz r8.z
                add r9.xyz, r5.xyzx, cb2[r8.y + 0].xyzx
                mul r9.xyz, r6.wwww, r9.xyzx
                sample_l r9.xyzw, r9.xyzx, t0.xyzw, s0, l(0.000000)
                mad r7.xyzw, r8.xxxx, r9.xyzw, r7.xyzw
                mul r6.w, r6.w, l(3.000000)
                mul r8.x, r8.x, l(0.500000)
                iadd r8.y, r8.y, l(1)
              endloop 
              dp3 r6.w, r4.xyzx, r4.xyzx
              rsq r8.x, r6.w
              mad r8.xyz, r4.xyzx, r8.xxxx, r7.xyzx
              dp3 r8.x, r8.xyzx, r8.xyzx
              rsq r8.x, r8.x
              mul r8.x, r8.x, r8.y
              add r8.y, r2.w, -r3.w
              div_sat r8.y, r8.y, cb1[0].x
              add r6.w, -r6.w, l(1.000000)
              mul r6.w, r6.w, |r7.w|
              mad r4.w, r6.w, r8.y, r4.w
              mad_sat r6.w, r8.x, l(0.500000), l(0.500000)
              mad r6.xyz, cb3[8].xyzx, r6.wwww, r6.xyzx
              add r5.xyz, r1.xyzx, r5.xyzx
              add r4.xyz, r1.xyzx, r4.xyzx
              add r3.w, r1.w, r3.w
              iadd r5.w, r5.w, l(1)
            endloop 
            mul r0.xyz, r2.yyyy, r6.xyzx
            mul r0.xyz, r0.xyzx, v5.xyzx
            mad o0.xyz, r0.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000), l(0.200000, 0.200000, 0.200000, 0.000000)
            mul_sat r0.x, r2.z, r4.w
            add r0.y, -v1.z, l(1.000000)
            mul o0.w, r0.y, r0.x
            ret 
            // Approximately 111 instruction slots used
                    
        };
        AB_BlendFactor = float4(0, 0, 0, 0);
        AB_SampleMask = uint(0xffffffff);
        BlendState = AlphaBlending;
        DS_StencilRef = uint(0);
        DepthStencilState = DisableDepth;
    }

}

