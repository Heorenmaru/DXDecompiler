//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer cbLights
{
    float4  g_clipplanes[3];            // Offset:    0, size:   48
    Light   g_lights[8];                // Offset:   48, size:  640
}

cbuffer cbPerFrame
{
    float4x4 g_mWorld;                  // Offset:    0, size:   64
    float4x4 g_mView;                   // Offset:   64, size:   64
    float4x4 g_mProj;                   // Offset:  128, size:   64
    float4x4 g_mInvProj;                // Offset:  192, size:   64
    float4x4 g_mLightViewProj;          // Offset:  256, size:   64
}

cbuffer cbPerTechnique
{
    bool    g_bEnableLighting = true;   // Offset:    0, size:    4
    bool    g_bEnableClipping = true;   // Offset:    4, size:    4
    bool    g_bPointScaleEnable = false;// Offset:    8, size:    4
    float   g_pointScaleA;              // Offset:   12, size:    4
    float   g_pointScaleB;              // Offset:   16, size:    4
    float   g_pointScaleC;              // Offset:   20, size:    4
    float   g_pointSize;                // Offset:   24, size:    4
    int     g_fogMode = 0;              // Offset:   28, size:    4
    float   g_fogStart;                 // Offset:   32, size:    4
    float   g_fogEnd;                   // Offset:   36, size:    4
    float   g_fogDensity;               // Offset:   40, size:    4
    float4  g_fogColor;                 // Offset:   48, size:   16
}

cbuffer cbPerViewChange
{
    float   g_viewportHeight;           // Offset:    0, size:    4
    float   g_viewportWidth;            // Offset:    4, size:    4
    float   g_nearPlane;                // Offset:    8, size:    4
}

cbuffer cbImmutable
{
    float3  g_positions[4] = { -0.5, 0.5, 0, 0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0 };// Offset:    0, size:   60
}

//
// 5 local object(s)
//
Texture2D g_txDiffuse;
Texture2D g_txProjected;
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState EnableDepth
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 5 technique(s)
    //
    technique11 RenderSceneGouraud
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4 [unused]
                //   float g_fogEnd;                    // Offset:   36 Size:     4 [unused]
                //   float g_fogDensity;                // Offset:   40 Size:     4 [unused]
                //   float4 g_fogColor;                 // Offset:   48 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb2      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXTURE                  0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                vs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_constantbuffer CB2[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_temps 8
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw
                dp4 r1.w, r0.xyzw, cb1[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw
                dp4 r0.y, r1.xyzw, cb1[5].xyzw
                dp4 r0.z, r1.xyzw, cb1[6].xyzw
                dp4 r0.w, r1.xyzw, cb1[7].xyzw
                dp4 o0.x, r0.xyzw, cb1[8].xyzw
                dp4 o0.y, r0.xyzw, cb1[9].xyzw
                dp4 o0.z, r0.xyzw, cb1[10].xyzw
                dp4 o0.w, r0.xyzw, cb1[11].xyzw
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw
                dp4 r2.y, r1.xyzw, cb0[1].xyzw
                dp4 r2.z, r1.xyzw, cb0[2].xyzw
                movc o6.xyz, cb2[0].yyyy, r2.xyzx, l(1.000000,1.000000,1.000000,0)
                if_nz cb2[0].x
                  dp3 r2.x, v1.xyzx, cb1[0].xyzx
                  dp3 r2.y, v1.xyzx, cb1[1].xyzx
                  dp3 r2.z, v1.xyzx, cb1[2].xyzx
                  dp3 r0.w, r2.xyzx, r2.xyzx
                  rsq r0.w, r0.w
                  mul r2.xyz, r0.wwww, r2.xyzx
                  dp3 r0.w, -r0.xyzx, -r0.xyzx
                  rsq r0.w, r0.w
                  mov r3.x, l(1.000000)
                  mov r4.xyzw, l(0,0,0,0)
                  mov r5.xyzw, l(0,0,0,0)
                  mov r1.w, l(0)
                  loop 
                    ige r2.w, r1.w, l(8)
                    breakc_nz r2.w
                    imul null, r2.w, r1.w, l(5)
                    add r6.xyz, -r1.xyzx, cb0[r2.w + 3].xyzx
                    dp3 r3.z, r6.xyzx, r6.xyzx
                    sqrt r3.y, r3.z
                    dp3 r3.y, cb0[r2.w + 7].xyzx, r3.xyzx
                    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
                    rsq r3.z, r3.z
                    mul r6.xyz, r3.zzzz, r6.xyzx
                    mad r7.xyz, -r0.xyzx, r0.wwww, r6.xyzx
                    dp3 r3.z, r7.xyzx, r7.xyzx
                    rsq r3.z, r3.z
                    mul r7.xyz, r3.zzzz, r7.xyzx
                    dp3 r3.z, r6.xyzx, r2.xyzx
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 4].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyzw, r6.xyzw, cb0[r2.w + 6].xyzw
                    add r4.xyzw, r4.xyzw, r6.xyzw
                    dp3 r3.z, r7.xyzx, r2.xyzx
                    log r3.z, r3.z
                    mul r3.z, r3.z, l(64.000000)
                    exp r3.z, r3.z
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 5].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r5.xyzw, r5.xyzw, r6.xyzw
                    iadd r1.w, r1.w, l(1)
                  endloop 
                  mov o4.xyzw, r4.xyzw
                  mov o5.xyzw, r5.xyzw
                  mov o3.xyz, r2.xyzx
                else 
                  mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                  mov o5.xyzw, l(0,0,0,0)
                  mov o3.xyz, l(0,0,0,0)
                endif 
                mov o1.xy, v2.xyxx
                mov o1.z, r0.z
                mov o2.xyz, r1.xyzx
                ret 
                // Approximately 75 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64 [unused]
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4
                //   float g_fogEnd;                    // Offset:   36 Size:     4
                //   float g_fogDensity;                // Offset:   40 Size:     4
                //   float4 g_fogColor;                 // Offset:   48 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_samLinear                       sampler      NA          NA             s0      1 
                // g_txDiffuse                       texture  float4          2d             t0      1 
                // g_txProjected                     texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float       
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer CB0[20], immediateIndexed
                dcl_constantbuffer CB1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xyzw
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                add r0.x, -v1.z, cb1[2].y
                add r0.y, -cb1[2].x, cb1[2].y
                div r0.x, r0.x, r0.y
                mul r0.y, v1.z, cb1[2].z
                mul r0.y, r0.y, l(1.442694)
                exp r0.y, r0.y
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
                ieq r1.xyz, cb1[1].wwww, l(1, 2, 3, 0)
                mul r0.z, v1.z, v1.z
                mul r0.w, cb1[2].z, cb1[2].z
                mul r0.z, r0.z, r0.w
                mul r0.z, r0.z, l(1.442694)
                exp r0.z, r0.z
                div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
                movc r0.z, r1.z, r0.z, l(1.000000)
                movc r0.y, r1.y, r0.y, r0.z
                movc_sat r0.x, r1.x, r0.x, r0.y
                sample r1.xyzw, v1.xyxx, t0.xyzw, s0
                mad r1.xyzw, r1.xyzw, v4.xyzw, v5.xyzw
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r0.y, r2.xyzw, cb0[18].xyzw
                lt r0.y, l(0.000000), r0.y
                if_nz r0.y
                  dp4 r3.x, r2.xyzw, cb0[16].xyzw
                  dp4 r3.y, r2.xyzw, cb0[17].xyzw
                  dp4 r0.y, r2.xyzw, cb0[19].xyzw
                  mul r0.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
                  div r0.yz, r0.zzwz, r0.yyyy
                  add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
                  sample r2.xyzw, r0.yzyy, t1.xyzw, s0
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r0.y, -r0.x, l(1.000000)
                mul r2.xyzw, r0.yyyy, cb1[3].xyzw
                mad o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 39 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = EnableDepth;
        }

    }

    technique11 RenderSceneFlat
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4 [unused]
                //   float g_fogEnd;                    // Offset:   36 Size:     4 [unused]
                //   float g_fogDensity;                // Offset:   40 Size:     4 [unused]
                //   float4 g_fogColor;                 // Offset:   48 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb2      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXTURE                  0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                vs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_constantbuffer CB2[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_temps 8
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw
                dp4 r1.w, r0.xyzw, cb1[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw
                dp4 r0.y, r1.xyzw, cb1[5].xyzw
                dp4 r0.z, r1.xyzw, cb1[6].xyzw
                dp4 r0.w, r1.xyzw, cb1[7].xyzw
                dp4 o0.x, r0.xyzw, cb1[8].xyzw
                dp4 o0.y, r0.xyzw, cb1[9].xyzw
                dp4 o0.z, r0.xyzw, cb1[10].xyzw
                dp4 o0.w, r0.xyzw, cb1[11].xyzw
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw
                dp4 r2.y, r1.xyzw, cb0[1].xyzw
                dp4 r2.z, r1.xyzw, cb0[2].xyzw
                movc o6.xyz, cb2[0].yyyy, r2.xyzx, l(1.000000,1.000000,1.000000,0)
                if_nz cb2[0].x
                  dp3 r2.x, v1.xyzx, cb1[0].xyzx
                  dp3 r2.y, v1.xyzx, cb1[1].xyzx
                  dp3 r2.z, v1.xyzx, cb1[2].xyzx
                  dp3 r0.w, r2.xyzx, r2.xyzx
                  rsq r0.w, r0.w
                  mul r2.xyz, r0.wwww, r2.xyzx
                  dp3 r0.w, -r0.xyzx, -r0.xyzx
                  rsq r0.w, r0.w
                  mov r3.x, l(1.000000)
                  mov r4.xyzw, l(0,0,0,0)
                  mov r5.xyzw, l(0,0,0,0)
                  mov r1.w, l(0)
                  loop 
                    ige r2.w, r1.w, l(8)
                    breakc_nz r2.w
                    imul null, r2.w, r1.w, l(5)
                    add r6.xyz, -r1.xyzx, cb0[r2.w + 3].xyzx
                    dp3 r3.z, r6.xyzx, r6.xyzx
                    sqrt r3.y, r3.z
                    dp3 r3.y, cb0[r2.w + 7].xyzx, r3.xyzx
                    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
                    rsq r3.z, r3.z
                    mul r6.xyz, r3.zzzz, r6.xyzx
                    mad r7.xyz, -r0.xyzx, r0.wwww, r6.xyzx
                    dp3 r3.z, r7.xyzx, r7.xyzx
                    rsq r3.z, r3.z
                    mul r7.xyz, r3.zzzz, r7.xyzx
                    dp3 r3.z, r6.xyzx, r2.xyzx
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 4].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyzw, r6.xyzw, cb0[r2.w + 6].xyzw
                    add r4.xyzw, r4.xyzw, r6.xyzw
                    dp3 r3.z, r7.xyzx, r2.xyzx
                    log r3.z, r3.z
                    mul r3.z, r3.z, l(64.000000)
                    exp r3.z, r3.z
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 5].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r5.xyzw, r5.xyzw, r6.xyzw
                    iadd r1.w, r1.w, l(1)
                  endloop 
                  mov o4.xyzw, r4.xyzw
                  mov o5.xyzw, r5.xyzw
                  mov o3.xyz, r2.xyzx
                else 
                  mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                  mov o5.xyzw, l(0,0,0,0)
                  mov o3.xyz, l(0,0,0,0)
                endif 
                mov o1.xy, v2.xyxx
                mov o1.z, r0.z
                mov o2.xyz, r1.xyzx
                ret 
                // Approximately 75 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48 [unused]
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64 [unused]
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float       
                // COLOR                    1   xyzw        5     NONE   float       
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                gs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[7], immediateIndexed
                dcl_input_siv v[3][0].xyzw, position
                dcl_input v[3][1].xy
                dcl_input v[3][1].z
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xyz
                dcl_input v[3][4].xyzw
                dcl_input v[3][5].xyzw
                dcl_input v[3][6].xyz
                dcl_temps 8
                dcl_inputprimitive triangle 
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_maxout 3
                add r0.xyz, -v[0][2].zxyz, v[1][2].zxyz
                add r1.xyz, -v[0][2].yzxy, v[2][2].yzxy
                mul r2.xyz, r0.xyzx, r1.xyzx
                mad r0.xyz, r0.zxyz, r1.yzxy, -r2.xyzx
                add r1.xyz, v[1][2].xyzx, v[0][2].xyzx
                add r1.xyz, r1.xyzx, v[2][2].xyzx
                mul r2.xyz, r1.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb1[4].xyzw
                dp4 r3.y, r2.xyzw, cb1[5].xyzw
                dp4 r3.z, r2.xyzw, cb1[6].xyzw
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                dp3 r0.w, -r3.xyzx, -r3.xyzx
                rsq r0.w, r0.w
                mov r2.x, l(1.000000)
                mov r4.xyzw, l(0,0,0,0)
                mov r5.xyzw, l(0,0,0,0)
                mov r1.w, l(0)
                loop 
                  ige r2.w, r1.w, l(8)
                  breakc_nz r2.w
                  imul null, r2.w, r1.w, l(5)
                  mad r6.xyz, -r1.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000), cb0[r2.w + 3].xyzx
                  dp3 r2.z, r6.xyzx, r6.xyzx
                  sqrt r2.y, r2.z
                  dp3 r2.y, cb0[r2.w + 7].xyzx, r2.xyzx
                  div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
                  rsq r2.z, r2.z
                  mul r6.xyz, r2.zzzz, r6.xyzx
                  mad r7.xyz, -r3.xyzx, r0.wwww, r6.xyzx
                  dp3 r2.z, r7.xyzx, r7.xyzx
                  rsq r2.z, r2.z
                  mul r7.xyz, r2.zzzz, r7.xyzx
                  dp3 r2.z, r6.xyzx, r0.xyzx
                  mul r6.xyzw, r2.zzzz, cb0[r2.w + 4].xyzw
                  mul r6.xyzw, r2.yyyy, r6.xyzw
                  max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r6.xyzw, r6.xyzw, cb0[r2.w + 6].xyzw
                  add r4.xyzw, r4.xyzw, r6.xyzw
                  dp3 r2.z, r7.xyzx, r0.xyzx
                  log r2.z, r2.z
                  mul r2.z, r2.z, l(64.000000)
                  exp r2.z, r2.z
                  mul r6.xyzw, r2.zzzz, cb0[r2.w + 5].xyzw
                  mul r6.xyzw, r2.yyyy, r6.xyzw
                  max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r5.xyzw, r5.xyzw, r6.xyzw
                  iadd r1.w, r1.w, l(1)
                endloop 
                mov r0.x, l(0)
                loop 
                  ige r0.y, r0.x, l(3)
                  breakc_nz r0.y
                  mov o0.xyzw, v[r0.x + 0][0].xyzw
                  mov o1.xyz, v[r0.x + 0][1].xyzx
                  mov o2.xyz, v[r0.x + 0][2].xyzx
                  mov o3.xyz, v[r0.x + 0][3].xyzx
                  mov o4.xyzw, r4.xyzw
                  mov o5.xyzw, r5.xyzw
                  mov o6.xyz, v[r0.x + 0][6].xyzx
                  emit 
                  iadd r0.x, r0.x, l(1)
                endloop 
                cut 
                ret 
                // Approximately 67 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64 [unused]
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4
                //   float g_fogEnd;                    // Offset:   36 Size:     4
                //   float g_fogDensity;                // Offset:   40 Size:     4
                //   float4 g_fogColor;                 // Offset:   48 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_samLinear                       sampler      NA          NA             s0      1 
                // g_txDiffuse                       texture  float4          2d             t0      1 
                // g_txProjected                     texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float       
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer CB0[20], immediateIndexed
                dcl_constantbuffer CB1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xyzw
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                add r0.x, -v1.z, cb1[2].y
                add r0.y, -cb1[2].x, cb1[2].y
                div r0.x, r0.x, r0.y
                mul r0.y, v1.z, cb1[2].z
                mul r0.y, r0.y, l(1.442694)
                exp r0.y, r0.y
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
                ieq r1.xyz, cb1[1].wwww, l(1, 2, 3, 0)
                mul r0.z, v1.z, v1.z
                mul r0.w, cb1[2].z, cb1[2].z
                mul r0.z, r0.z, r0.w
                mul r0.z, r0.z, l(1.442694)
                exp r0.z, r0.z
                div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
                movc r0.z, r1.z, r0.z, l(1.000000)
                movc r0.y, r1.y, r0.y, r0.z
                movc_sat r0.x, r1.x, r0.x, r0.y
                sample r1.xyzw, v1.xyxx, t0.xyzw, s0
                mad r1.xyzw, r1.xyzw, v4.xyzw, v5.xyzw
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r0.y, r2.xyzw, cb0[18].xyzw
                lt r0.y, l(0.000000), r0.y
                if_nz r0.y
                  dp4 r3.x, r2.xyzw, cb0[16].xyzw
                  dp4 r3.y, r2.xyzw, cb0[17].xyzw
                  dp4 r0.y, r2.xyzw, cb0[19].xyzw
                  mul r0.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
                  div r0.yz, r0.zzwz, r0.yyyy
                  add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
                  sample r2.xyzw, r0.yzyy, t1.xyzw, s0
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r0.y, -r0.x, l(1.000000)
                mul r2.xyzw, r0.yyyy, cb1[3].xyzw
                mad o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 39 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = EnableDepth;
        }

    }

    technique11 RenderScenePoint
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4 [unused]
                //   float g_fogEnd;                    // Offset:   36 Size:     4 [unused]
                //   float g_fogDensity;                // Offset:   40 Size:     4 [unused]
                //   float4 g_fogColor;                 // Offset:   48 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb2      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXTURE                  0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                vs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_constantbuffer CB2[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_temps 8
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw
                dp4 r1.w, r0.xyzw, cb1[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw
                dp4 r0.y, r1.xyzw, cb1[5].xyzw
                dp4 r0.z, r1.xyzw, cb1[6].xyzw
                dp4 r0.w, r1.xyzw, cb1[7].xyzw
                dp4 o0.x, r0.xyzw, cb1[8].xyzw
                dp4 o0.y, r0.xyzw, cb1[9].xyzw
                dp4 o0.z, r0.xyzw, cb1[10].xyzw
                dp4 o0.w, r0.xyzw, cb1[11].xyzw
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw
                dp4 r2.y, r1.xyzw, cb0[1].xyzw
                dp4 r2.z, r1.xyzw, cb0[2].xyzw
                movc o6.xyz, cb2[0].yyyy, r2.xyzx, l(1.000000,1.000000,1.000000,0)
                if_nz cb2[0].x
                  dp3 r2.x, v1.xyzx, cb1[0].xyzx
                  dp3 r2.y, v1.xyzx, cb1[1].xyzx
                  dp3 r2.z, v1.xyzx, cb1[2].xyzx
                  dp3 r0.w, r2.xyzx, r2.xyzx
                  rsq r0.w, r0.w
                  mul r2.xyz, r0.wwww, r2.xyzx
                  dp3 r0.w, -r0.xyzx, -r0.xyzx
                  rsq r0.w, r0.w
                  mov r3.x, l(1.000000)
                  mov r4.xyzw, l(0,0,0,0)
                  mov r5.xyzw, l(0,0,0,0)
                  mov r1.w, l(0)
                  loop 
                    ige r2.w, r1.w, l(8)
                    breakc_nz r2.w
                    imul null, r2.w, r1.w, l(5)
                    add r6.xyz, -r1.xyzx, cb0[r2.w + 3].xyzx
                    dp3 r3.z, r6.xyzx, r6.xyzx
                    sqrt r3.y, r3.z
                    dp3 r3.y, cb0[r2.w + 7].xyzx, r3.xyzx
                    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
                    rsq r3.z, r3.z
                    mul r6.xyz, r3.zzzz, r6.xyzx
                    mad r7.xyz, -r0.xyzx, r0.wwww, r6.xyzx
                    dp3 r3.z, r7.xyzx, r7.xyzx
                    rsq r3.z, r3.z
                    mul r7.xyz, r3.zzzz, r7.xyzx
                    dp3 r3.z, r6.xyzx, r2.xyzx
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 4].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyzw, r6.xyzw, cb0[r2.w + 6].xyzw
                    add r4.xyzw, r4.xyzw, r6.xyzw
                    dp3 r3.z, r7.xyzx, r2.xyzx
                    log r3.z, r3.z
                    mul r3.z, r3.z, l(64.000000)
                    exp r3.z, r3.z
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 5].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r5.xyzw, r5.xyzw, r6.xyzw
                    iadd r1.w, r1.w, l(1)
                  endloop 
                  mov o4.xyzw, r4.xyzw
                  mov o5.xyzw, r5.xyzw
                  mov o3.xyz, r2.xyzx
                else 
                  mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                  mov o5.xyzw, l(0,0,0,0)
                  mov o3.xyz, l(0,0,0,0)
                endif 
                mov o1.xy, v2.xyxx
                mov o1.z, r0.z
                mov o2.xyz, r1.xyzx
                ret 
                // Approximately 75 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48 [unused]
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4
                //   float g_pointScaleB;               // Offset:   16 Size:     4
                //   float g_pointScaleC;               // Offset:   20 Size:     4
                //   float g_pointSize;                 // Offset:   24 Size:     4
                //   int g_fogMode;                     // Offset:   28 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4 [unused]
                //   float g_fogEnd;                    // Offset:   36 Size:     4 [unused]
                //   float g_fogDensity;                // Offset:   40 Size:     4 [unused]
                //   float4 g_fogColor;                 // Offset:   48 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerViewChange
                // {
                //
                //   float g_viewportHeight;            // Offset:    0 Size:     4
                //   float g_viewportWidth;             // Offset:    4 Size:     4 [unused]
                //   float g_nearPlane;                 // Offset:    8 Size:     4
                //
                // }
                //
                // cbuffer cbImmutable
                // {
                //
                //   float3 g_positions[4];             // Offset:    0 Size:    60
                //      = 0xbf000000 0x3f000000 0x00000000 0x00000000 
                //        0x3f000000 0x3f000000 0x00000000 0x00000000 
                //        0xbf000000 0xbf000000 0x00000000 0x00000000 
                //        0x3f000000 0xbf000000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb2      1 
                // cbPerViewChange                   cbuffer      NA          NA            cb3      1 
                // cbImmutable                       cbuffer      NA          NA            cb4      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float       
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                gs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_constantbuffer CB2[2], immediateIndexed
                dcl_constantbuffer CB3[1], immediateIndexed
                dcl_constantbuffer CB4[4], dynamicIndexed
                dcl_input_siv v[3][0].xyzw, position
                dcl_input v[3][1].xy
                dcl_input v[3][1].z
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xyz
                dcl_input v[3][4].xyzw
                dcl_input v[3][5].xyzw
                dcl_input v[3][6].xyz
                dcl_temps 10
                dcl_inputprimitive triangle 
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_maxout 12
                div r0.x, cb2[1].z, cb3[0].x
                mul r0.x, r0.x, l(0.250000)
                mul r0.y, cb2[1].z, cb3[0].x
                mov r1.w, l(1.000000)
                mov r2.zw, l(0,0,0,0)
                mov r3.x, l(1.000000)
                mov r0.zw, r0.xxxx
                mov r3.w, l(0)
                loop 
                  ige r4.x, r3.w, l(3)
                  breakc_nz r4.x
                  mov r1.xyz, v[r3.w + 0][2].xyzx
                  dp4 r4.x, r1.xyzw, cb1[4].xyzw
                  dp4 r4.y, r1.xyzw, cb1[5].xyzw
                  dp4 r4.z, r1.xyzw, cb1[6].xyzw
                  dp3 r5.x, r4.xyzx, r4.xyzx
                  sqrt r5.y, r5.x
                  mad r5.y, cb2[1].x, r5.y, cb2[0].w
                  mad r5.x, cb2[1].y, r5.x, r5.y
                  div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
                  sqrt r5.x, r5.x
                  mul r5.x, r0.y, r5.x
                  movc r0.zw, cb2[0].zzzz, r5.xxxx, r0.zzzw
                  if_nz cb2[0].x
                    dp3 r5.x, -r4.xyzx, -r4.xyzx
                    rsq r5.x, r5.x
                    mov r6.xyzw, l(0,0,0,0)
                    mov r7.xyzw, l(0,0,0,0)
                    mov r5.y, l(0)
                    loop 
                      ige r5.z, r5.y, l(8)
                      breakc_nz r5.z
                      imul null, r5.z, r5.y, l(5)
                      add r8.xyz, cb0[r5.z + 3].xyzx, -v[r3.w + 0][2].xyzx
                      dp3 r3.z, r8.xyzx, r8.xyzx
                      sqrt r3.y, r3.z
                      dp3 r3.y, cb0[r5.z + 7].xyzx, r3.xyzx
                      div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
                      rsq r3.z, r3.z
                      mul r8.xyz, r3.zzzz, r8.xyzx
                      mad r9.xyz, -r4.xyzx, r5.xxxx, r8.xyzx
                      dp3 r3.z, r9.xyzx, r9.xyzx
                      rsq r3.z, r3.z
                      mul r9.xyz, r3.zzzz, r9.xyzx
                      dp3 r3.z, r8.xyzx, v[r3.w + 0][3].xyzx
                      mul r8.xyzw, r3.zzzz, cb0[r5.z + 4].xyzw
                      mul r8.xyzw, r3.yyyy, r8.xyzw
                      max r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r8.xyzw, r8.xyzw, cb0[r5.z + 6].xyzw
                      add r6.xyzw, r6.xyzw, r8.xyzw
                      dp3 r3.z, r9.xyzx, v[r3.w + 0][3].xyzx
                      log r3.z, r3.z
                      mul r3.z, r3.z, l(64.000000)
                      exp r3.z, r3.z
                      mul r8.xyzw, r3.zzzz, cb0[r5.z + 5].xyzw
                      mul r8.xyzw, r3.yyyy, r8.xyzw
                      max r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyzw, r7.xyzw, r8.xyzw
                      iadd r5.y, r5.y, l(1)
                    endloop 
                  else 
                    mov r6.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                    mov r7.xyzw, v[r3.w + 0][5].xyzw
                  endif 
                  dp4 r4.w, r1.xyzw, cb1[7].xyzw
                  dp4 r5.x, r4.xyzw, cb1[8].xyzw
                  dp4 r5.y, r4.xyzw, cb1[9].xyzw
                  dp4 r5.z, r4.xyzw, cb1[10].xyzw
                  dp4 r5.w, r4.xyzw, cb1[11].xyzw
                  div r1.x, r4.z, cb3[0].z
                  mov r1.y, l(0)
                  loop 
                    ige r1.z, r1.y, l(4)
                    breakc_nz r1.z
                    mul r3.yz, r0.wwzw, cb4[r1.y + 0].xxyx
                    mul r2.xy, r1.xxxx, r3.yzyy
                    add r4.xyzw, r2.xyzw, r5.xyzw
                    mov o0.xyzw, r4.xyzw
                    mov o1.xyz, v[r3.w + 0][1].xyzx
                    mov o2.xyz, v[r3.w + 0][2].xyzx
                    mov o3.xyz, v[r3.w + 0][3].xyzx
                    mov o4.xyzw, r6.xyzw
                    mov o5.xyzw, r7.xyzw
                    mov o6.xyz, v[r3.w + 0][6].xyzx
                    emit 
                    iadd r1.y, r1.y, l(1)
                  endloop 
                  cut 
                  iadd r3.w, r3.w, l(1)
                endloop 
                ret 
                // Approximately 91 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64 [unused]
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4
                //   float g_fogEnd;                    // Offset:   36 Size:     4
                //   float g_fogDensity;                // Offset:   40 Size:     4
                //   float4 g_fogColor;                 // Offset:   48 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_samLinear                       sampler      NA          NA             s0      1 
                // g_txDiffuse                       texture  float4          2d             t0      1 
                // g_txProjected                     texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float       
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer CB0[20], immediateIndexed
                dcl_constantbuffer CB1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xyzw
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                add r0.x, -v1.z, cb1[2].y
                add r0.y, -cb1[2].x, cb1[2].y
                div r0.x, r0.x, r0.y
                mul r0.y, v1.z, cb1[2].z
                mul r0.y, r0.y, l(1.442694)
                exp r0.y, r0.y
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
                ieq r1.xyz, cb1[1].wwww, l(1, 2, 3, 0)
                mul r0.z, v1.z, v1.z
                mul r0.w, cb1[2].z, cb1[2].z
                mul r0.z, r0.z, r0.w
                mul r0.z, r0.z, l(1.442694)
                exp r0.z, r0.z
                div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
                movc r0.z, r1.z, r0.z, l(1.000000)
                movc r0.y, r1.y, r0.y, r0.z
                movc_sat r0.x, r1.x, r0.x, r0.y
                sample r1.xyzw, v1.xyxx, t0.xyzw, s0
                mad r1.xyzw, r1.xyzw, v4.xyzw, v5.xyzw
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r0.y, r2.xyzw, cb0[18].xyzw
                lt r0.y, l(0.000000), r0.y
                if_nz r0.y
                  dp4 r3.x, r2.xyzw, cb0[16].xyzw
                  dp4 r3.y, r2.xyzw, cb0[17].xyzw
                  dp4 r0.y, r2.xyzw, cb0[19].xyzw
                  mul r0.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
                  div r0.yz, r0.zzwz, r0.yyyy
                  add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
                  sample r2.xyzw, r0.yzyy, t1.xyzw, s0
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r0.y, -r0.x, l(1.000000)
                mul r2.xyzw, r0.yyyy, cb1[3].xyzw
                mad o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 39 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = EnableDepth;
        }

    }

    technique11 RenderScreenSpaceAlphaTest
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerViewChange
                // {
                //
                //   float g_viewportHeight;            // Offset:    0 Size:     4
                //   float g_viewportWidth;             // Offset:    4 Size:     4
                //   float g_nearPlane;                 // Offset:    8 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerViewChange                   cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXTURE                  0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                //
                vs_4_0
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 1
                mul r0.xy, cb0[0].yxyy, l(0.500000, 0.500000, 0.000000, 0.000000)
                div r0.xy, v0.xyxx, r0.xyxx
                mad o0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
                mov o0.z, v0.z
                mov o0.w, l(1.000000)
                mov o1.xy, v2.xyxx
                mov o1.z, l(0)
                mov o2.xyz, l(0,0,0,0)
                mov o3.xyz, l(0,0,0,0)
                mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                mov o5.xyzw, l(0,0,0,0)
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_samLinear                       sampler      NA          NA             s0      1 
                // g_txDiffuse                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float       
                // TEXTURE                  1   xyz         2     NONE   float       
                // TEXTURE                  2   xyz         3     NONE   float       
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 2
                sample r0.xyzw, v1.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, v4.xyzw
                lt r1.x, r0.w, l(0.500000)
                discard_nz r1.x
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 6 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 RenderTextureOnly
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLights
                // {
                //
                //   float4 g_clipplanes[3];            // Offset:    0 Size:    48
                //   
                //   struct
                //   {
                //       
                //       float4 Position;               // Offset:   48
                //       float4 Diffuse;                // Offset:   64
                //       float4 Specular;               // Offset:   80
                //       float4 Ambient;                // Offset:   96
                //       float4 Atten;                  // Offset:  112
                //
                //   } g_lights[8];                     // Offset:   48 Size:   640
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64
                //   float4x4 g_mView;                  // Offset:   64 Size:    64
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4 [unused]
                //   float g_fogEnd;                    // Offset:   36 Size:     4 [unused]
                //   float g_fogDensity;                // Offset:   40 Size:     4 [unused]
                //   float4 g_fogColor;                 // Offset:   48 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbLights                          cbuffer      NA          NA            cb0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb1      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb2      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXTURE                  0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                // SV_ClipDistance          0   xyz         6  CLIPDST   float   xyz 
                //
                vs_4_0
                dcl_constantbuffer CB0[43], dynamicIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_constantbuffer CB2[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.z
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output_siv o6.xyz, clip_distance
                dcl_temps 8
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw
                dp4 r1.w, r0.xyzw, cb1[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw
                dp4 r0.y, r1.xyzw, cb1[5].xyzw
                dp4 r0.z, r1.xyzw, cb1[6].xyzw
                dp4 r0.w, r1.xyzw, cb1[7].xyzw
                dp4 o0.x, r0.xyzw, cb1[8].xyzw
                dp4 o0.y, r0.xyzw, cb1[9].xyzw
                dp4 o0.z, r0.xyzw, cb1[10].xyzw
                dp4 o0.w, r0.xyzw, cb1[11].xyzw
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[0].xyzw
                dp4 r2.y, r1.xyzw, cb0[1].xyzw
                dp4 r2.z, r1.xyzw, cb0[2].xyzw
                movc o6.xyz, cb2[0].yyyy, r2.xyzx, l(1.000000,1.000000,1.000000,0)
                if_nz cb2[0].x
                  dp3 r2.x, v1.xyzx, cb1[0].xyzx
                  dp3 r2.y, v1.xyzx, cb1[1].xyzx
                  dp3 r2.z, v1.xyzx, cb1[2].xyzx
                  dp3 r0.w, r2.xyzx, r2.xyzx
                  rsq r0.w, r0.w
                  mul r2.xyz, r0.wwww, r2.xyzx
                  dp3 r0.w, -r0.xyzx, -r0.xyzx
                  rsq r0.w, r0.w
                  mov r3.x, l(1.000000)
                  mov r4.xyzw, l(0,0,0,0)
                  mov r5.xyzw, l(0,0,0,0)
                  mov r1.w, l(0)
                  loop 
                    ige r2.w, r1.w, l(8)
                    breakc_nz r2.w
                    imul null, r2.w, r1.w, l(5)
                    add r6.xyz, -r1.xyzx, cb0[r2.w + 3].xyzx
                    dp3 r3.z, r6.xyzx, r6.xyzx
                    sqrt r3.y, r3.z
                    dp3 r3.y, cb0[r2.w + 7].xyzx, r3.xyzx
                    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
                    rsq r3.z, r3.z
                    mul r6.xyz, r3.zzzz, r6.xyzx
                    mad r7.xyz, -r0.xyzx, r0.wwww, r6.xyzx
                    dp3 r3.z, r7.xyzx, r7.xyzx
                    rsq r3.z, r3.z
                    mul r7.xyz, r3.zzzz, r7.xyzx
                    dp3 r3.z, r6.xyzx, r2.xyzx
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 4].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyzw, r6.xyzw, cb0[r2.w + 6].xyzw
                    add r4.xyzw, r4.xyzw, r6.xyzw
                    dp3 r3.z, r7.xyzx, r2.xyzx
                    log r3.z, r3.z
                    mul r3.z, r3.z, l(64.000000)
                    exp r3.z, r3.z
                    mul r6.xyzw, r3.zzzz, cb0[r2.w + 5].xyzw
                    mul r6.xyzw, r3.yyyy, r6.xyzw
                    max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r5.xyzw, r5.xyzw, r6.xyzw
                    iadd r1.w, r1.w, l(1)
                  endloop 
                  mov o4.xyzw, r4.xyzw
                  mov o5.xyzw, r5.xyzw
                  mov o3.xyz, r2.xyzx
                else 
                  mov o4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                  mov o5.xyzw, l(0,0,0,0)
                  mov o3.xyz, l(0,0,0,0)
                endif 
                mov o1.xy, v2.xyxx
                mov o1.z, r0.z
                mov o2.xyz, r1.xyzx
                ret 
                // Approximately 75 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
                //   float4x4 g_mView;                  // Offset:   64 Size:    64 [unused]
                //   float4x4 g_mProj;                  // Offset:  128 Size:    64 [unused]
                //   float4x4 g_mInvProj;               // Offset:  192 Size:    64 [unused]
                //   float4x4 g_mLightViewProj;         // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerTechnique
                // {
                //
                //   bool g_bEnableLighting;            // Offset:    0 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bEnableClipping;            // Offset:    4 Size:     4 [unused]
                //      = 0xffffffff 
                //   bool g_bPointScaleEnable;          // Offset:    8 Size:     4 [unused]
                //      = 0x00000000 
                //   float g_pointScaleA;               // Offset:   12 Size:     4 [unused]
                //   float g_pointScaleB;               // Offset:   16 Size:     4 [unused]
                //   float g_pointScaleC;               // Offset:   20 Size:     4 [unused]
                //   float g_pointSize;                 // Offset:   24 Size:     4 [unused]
                //   int g_fogMode;                     // Offset:   28 Size:     4
                //      = 0x00000000 
                //   float g_fogStart;                  // Offset:   32 Size:     4
                //   float g_fogEnd;                    // Offset:   36 Size:     4
                //   float g_fogDensity;                // Offset:   40 Size:     4
                //   float4 g_fogColor;                 // Offset:   48 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_samLinear                       sampler      NA          NA             s0      1 
                // g_txDiffuse                       texture  float4          2d             t0      1 
                // g_txProjected                     texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerTechnique                    cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXTURE                  0   xy          1     NONE   float   xy  
                // FOGDISTANCE              0     z         1     NONE   float     z 
                // TEXTURE                  1   xyz         2     NONE   float   xyz 
                // TEXTURE                  2   xyz         3     NONE   float       
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                // COLOR                    1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_4_0
                dcl_constantbuffer CB0[20], immediateIndexed
                dcl_constantbuffer CB1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xyzw
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 4
                add r0.x, -v1.z, cb1[2].y
                add r0.y, -cb1[2].x, cb1[2].y
                div r0.x, r0.x, r0.y
                mul r0.y, v1.z, cb1[2].z
                mul r0.y, r0.y, l(1.442694)
                exp r0.y, r0.y
                div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
                ieq r1.xyz, cb1[1].wwww, l(1, 2, 3, 0)
                mul r0.z, v1.z, v1.z
                mul r0.w, cb1[2].z, cb1[2].z
                mul r0.z, r0.z, r0.w
                mul r0.z, r0.z, l(1.442694)
                exp r0.z, r0.z
                div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
                movc r0.z, r1.z, r0.z, l(1.000000)
                movc r0.y, r1.y, r0.y, r0.z
                movc_sat r0.x, r1.x, r0.x, r0.y
                sample r1.xyzw, v1.xyxx, t0.xyzw, s0
                mad r1.xyzw, r1.xyzw, v4.xyzw, v5.xyzw
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r0.y, r2.xyzw, cb0[18].xyzw
                lt r0.y, l(0.000000), r0.y
                if_nz r0.y
                  dp4 r3.x, r2.xyzw, cb0[16].xyzw
                  dp4 r3.y, r2.xyzw, cb0[17].xyzw
                  dp4 r0.y, r2.xyzw, cb0[19].xyzw
                  mul r0.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
                  div r0.yz, r0.zzwz, r0.yyyy
                  add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
                  sample r2.xyzw, r0.yzyy, t1.xyzw, s0
                else 
                  mov r2.xyzw, l(0,0,0,0)
                endif 
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r0.y, -r0.x, l(1.000000)
                mul r2.xyzw, r0.yyyy, cb1[3].xyzw
                mad o0.xyzw, r0.xxxx, r1.xyzw, r2.xyzw
                ret 
                // Approximately 39 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = EnableDepth;
        }

    }

}

