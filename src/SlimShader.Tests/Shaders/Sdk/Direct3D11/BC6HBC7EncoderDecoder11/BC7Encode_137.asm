//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbCS
// {
//
//   uint g_tex_width;                  // Offset:    0 Size:     4 [unused]
//   uint g_num_block_x;                // Offset:    4 Size:     4
//   uint g_format;                     // Offset:    8 Size:     4 [unused]
//   uint g_mode_id;                    // Offset:   12 Size:     4
//   uint g_start_block_id;             // Offset:   16 Size:     4
//   uint g_num_total_blocks;           // Offset:   20 Size:     4 [unused]
//
// }
//
// Resource bind info for g_InBuff
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_OutBuff
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_Input                           texture  float4          2d             t0      1 
// g_InBuff                          texture  struct         r/o             t1      1 
// g_OutBuff                             UAV  struct         r/w             u0      1 
// cbCS                              cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0x0000cccc, 15, 0, -649211347377382870840004092887040.000000},
                              { 0x00008888, 15, 0, 10184774488364746447430036226048.000000},
                              { 0x0000eeee, 15, 0, 0.000000},
                              { 0x0000ecc8, 15, 0, 0.000000},
                              { 0x0000c880, 15, 0, -33606656.000000},
                              { 0x0000feec, 15, 0, -33555248.000000},
                              { 0x0000fec8, 15, 0, 0.000000},
                              { 0x0000ec80, 15, 0, 0.000000},
                              { 0x0000c800, 15, 0, -158528860577705552937570271232.000000},
                              { 0x0000ffec, 15, 0, -158533394049529107796975419392.000000},
                              { 0x0000fe80, 15, 0, -170146051238774108132589051056192749568.000000},
                              { 0x0000e800, 15, 0, -0.000000},
                              { 0x0000ffe8, 15, 0, -0.000000},
                              { 0x0000ff00, 15, 0, -107024656.000000},
                              { 0x0000fff0, 15, 0, -1238673776977656146024202240.000000},
                              { 0x0000f000, 15, 0, 11409024651668810661554787713024.000000},
                              { 0x0000f710, 15, 0, -131291.125000},
                              { 142, 2, 0, 0.000000},
                              { 0x00007100, 8, 0, -100768128.000000},
                              { 2254, 2, 0, 0.000000},
                              { 140, 2, 0, -9903801295088772943083208704.000000},
                              { 0x00007310, 8, 0, 2606965549330689467107316712079360.000000},
                              { 0x00003100, 8, 0, -33590016.000000},
                              { 0x00008cce, 15, 0, 0.000000},
                              { 2188, 2, 0, 0.000000},
                              { 0x00003110, 8, 0, -5649748860036787859731005628131311616.000000},
                              { 0x00006666, 2, 0, 0.000000},
                              { 0x0000366c, 2, 0, 151823044794904947458048.000000},
                              { 6120, 8, 0, -286745.500000},
                              { 4080, 8, 0, -41538879947814649463396129476444160.000000},
                              { 0x0000718e, 2, 0, 0.000000},
                              { 0x0000399c, 2, 0, 11452183303429052923091798196224.000000},
                              { 0x0000aaaa, 15, 0, -1238657838990776460971606016.000000},
                              { 0x0000f0f0, 15, 0, 0.000000},
                              { 0x00005a5a, 6, 0, -1237951254905777090306506752.000000},
                              { 0x000033cc, 8, 0, 784.533325},
                              { 0x00003c3c, 2, 0, 0.000000},
                              { 0x000055aa, 8, 0, 672329.125000},
                              { 0x00009696, 15, 0, 74.080582},
                              { 0x0000a55a, 15, 0, 0.000000},
                              { 0x000073ce, 2, 0, 0.000000},
                              { 5064, 8, 0, -170144631470101852515659374748602728448.000000},
                              { 0x0000324c, 2, 0, 8841727049728.000000},
                              { 0x00003bdc, 2, 0, -107053440.000000},
                              { 0x00006996, 2, 0, 0.000000},
                              { 0x0000c33c, 15, 0, 272202749625043509051392.000000},
                              { 0x00009966, 15, 0, 0.000000},
                              { 1632, 6, 0, 14339452960768.000000},
                              { 626, 6, 0, -158507893270521611712821460992.000000},
                              { 1252, 2, 0, 0.000000},
                              { 0x00004e40, 6, 0, -0.000000},
                              { 0x00002720, 8, 0, -0.000000},
                              { 0x0000c936, 15, 0, -40945461174657351680.000000},
                              { 0x0000936c, 15, 0, -0.000000},
                              { 0x000039c6, 2, 0, -158487265973724437102528036864.000000},
                              { 0x0000639c, 2, 0, -0.000000},
                              { 0x00009336, 15, 0, -170143252266248804202070546335515279360.000000},
                              { 0x00009cc6, 15, 0, -2.188278},
                              { 0x0000817e, 15, 0, -106961280.000000},
                              { 0x0000e718, 15, 0, -0.000000},
                              { 0x0000ccf0, 15, 0, 0.000000},
                              { 4044, 2, 0, -36838425354228843168808304640.000000},
                              { 0x00007744, 2, 0, 0xfff0000a},
                              { 0x0000ee22, 15, 0, 11411580320851475987630116569088.000000},
                              { 0, 3, 15, 0},
                              { 0, 3, 8, 4},
                              { 0, 15, 8, 9},
                              { 1, 15, 3, 13},
                              { 1, 8, 15, 17},
                              { 1, 3, 15, 21},
                              { 1, 15, 3, 26},
                              { 2, 15, 8, 30},
                              { 2, 8, 15, 34},
                              { 2, 8, 15, 38},
                              { 2, 6, 15, 43},
                              { 2, 6, 15, 47},
                              { 3, 6, 15, 51},
                              { 3, 5, 15, 55},
                              { 3, 3, 15, 60},
                              { 3, 3, 8, 64},
                              { 4, 3, 15, 0},
                              { 4, 3, 8, 9},
                              { 4, 8, 15, 18},
                              { 4, 15, 3, 27},
                              { 5, 3, 15, 37},
                              { 5, 3, 8, 46},
                              { 5, 6, 15, 55},
                              { 5, 10, 8, 64},
                              { 6, 5, 3, 0},
                              { 6, 8, 15, 0},
                              { 6, 8, 6, 0},
                              { 6, 6, 10, 0},
                              { 6, 8, 15, 0},
                              { 7, 5, 15, 0},
                              { 7, 15, 10, 0},
                              { 7, 15, 8, 0},
                              { 7, 8, 15, 0},
                              { 8, 15, 3, 21},
                              { 8, 3, 15, 43},
                              { 8, 5, 10, 64},
                              { 8, 6, 10, 0},
                              { 9, 10, 8, 0},
                              { 9, 8, 9, 0},
                              { 9, 15, 10, 0},
                              { 9, 15, 6, 0},
                              { 10, 3, 15, 0},
                              { 10, 15, 8, 0},
                              { 10, 5, 15, 0},
                              { 10, 15, 3, 0},
                              { 10, 15, 6, 0},
                              { 11, 15, 6, 0},
                              { 11, 15, 8, 0},
                              { 11, 3, 15, 0},
                              { 11, 15, 3, 0},
                              { 12, 5, 15, 0},
                              { 12, 5, 15, 0},
                              { 12, 5, 15, 0},
                              { 12, 8, 15, 0},
                              { 13, 5, 15, 0},
                              { 13, 10, 15, 0},
                              { 13, 5, 15, 0},
                              { 13, 10, 15, 0},
                              { 14, 8, 15, 0},
                              { 14, 13, 15, 0},
                              { 14, 15, 3, 0},
                              { 14, 12, 15, 0},
                              { 15, 3, 15, 0},
                              { 15, 3, 8, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 4, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 7, 0, 0, 0},
                              { 7, 0, 0, 0},
                              { 7, 0, 0, 0},
                              { 7, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 0, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 1, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 2, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0},
                              { 3, 0, 0, 0} }
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 16
dcl_uav_structured u0, 16
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_temps 14
dcl_indexableTemp x0[8], 4
dcl_tgsm_structured g0, 68, 64
dcl_thread_group 64, 1, 1
iadd r0.x, vThreadGroupID.x, cb0[1].x
ult r1.xyzw, vThreadIDInGroupFlattened.xxxx, l(16, 32, 8, 4)
if_nz r1.x
  udiv r0.y, null, r0.x, cb0[0].y
  imad r0.z, -r0.y, cb0[0].y, r0.x
  ishl r0.y, r0.y, l(2)
  bfi r2.x, l(30), l(2), r0.z, vThreadIDInGroupFlattened.x
  ushr r0.z, vThreadIDInGroupFlattened.x, l(2)
  iadd r2.y, r0.z, r0.y
  mov r2.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xyzw, t0.xyzw
  mul r2.xyzw, r2.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000)
  ftou r2.xyzw, r2.xyzw
  umin r2.xyzw, r2.xyzw, l(255, 255, 255, 255)
  store_structured g0.xyzw, vThreadIDInGroupFlattened.x, l(0), r2.xyzw
endif 
sync_g_t
mov x0[0].x, l(-1)
mov x0[1].x, l(-1)
mov x0[2].x, l(-1)
mov x0[3].x, l(-1)
mov x0[0].y, l(0)
mov x0[1].y, l(0)
mov x0[2].y, l(0)
mov x0[3].y, l(0)
mov x0[4].x, l(-1)
mov x0[5].x, l(-1)
mov x0[6].x, l(-1)
mov x0[7].x, l(-1)
mov x0[4].y, l(0)
mov x0[5].y, l(0)
mov x0[6].y, l(0)
mov x0[7].y, l(0)
mov r0.y, l(0)
loop 
  uge r0.z, r0.y, l(16)
  breakc_nz r0.z
  ld_structured r2.xyzw, r0.y, l(0), g0.xyzw
  mov r0.z, vThreadIDInGroupFlattened.x
  ushr r0.z, icb[r0.z + 0].x, r0.y
  and r0.z, r0.z, l(1)
  ieq r0.z, r0.z, l(1)
  if_nz r0.z
    mov r3.x, x0[4].x
    mov r3.y, x0[5].x
    mov r3.z, x0[6].x
    mov r3.w, x0[7].x
    umin r3.xyzw, r2.xyzw, r3.xyzw
    mov x0[4].x, r3.x
    mov x0[5].x, r3.y
    mov x0[6].x, r3.z
    mov x0[7].x, r3.w
    mov r3.x, x0[4].y
    mov r3.y, x0[5].y
    mov r3.z, x0[6].y
    mov r3.w, x0[7].y
    umax r3.xyzw, r2.xyzw, r3.xyzw
    mov x0[4].y, r3.x
    mov x0[5].y, r3.y
    mov x0[6].y, r3.z
    mov x0[7].y, r3.w
  else 
    mov r3.x, x0[0].x
    mov r3.y, x0[1].x
    mov r3.z, x0[2].x
    mov r3.w, x0[3].x
    umin r3.xyzw, r2.xyzw, r3.xyzw
    mov x0[0].x, r3.x
    mov x0[1].x, r3.y
    mov x0[2].x, r3.z
    mov x0[3].x, r3.w
    mov r3.x, x0[0].y
    mov r3.y, x0[1].y
    mov r3.z, x0[2].y
    mov r3.w, x0[3].y
    umax r2.xyzw, r2.xyzw, r3.xyzw
    mov x0[0].y, r2.x
    mov x0[1].y, r2.y
    mov x0[2].y, r2.z
    mov x0[3].y, r2.w
  endif 
  iadd r0.y, r0.y, l(1)
endloop 
ieq r0.yz, cb0[0].wwww, l(0, 1, 7, 0)
if_nz r0.y
  mov r2.x, x0[0].x
  mov r2.y, x0[1].x
  mov r2.z, x0[2].x
  mov r3.x, x0[0].y
  mov r3.y, x0[1].y
  mov r3.z, x0[2].y
  and r4.xyz, r2.xyzx, l(3, 3, 3, 0)
  and r5.xyz, r3.xyzx, l(3, 3, 3, 0)
  iadd r4.xyz, r4.xyzx, r5.xyzx
  iadd r0.y, r4.z, r4.y
  iadd r0.y, r0.y, r4.x
  udiv r0.y, null, r0.y, l(6)
  and r0.y, r0.y, l(2)
  and r2.xyz, r2.xyzx, l(252, 252, 252, 0)
  iadd r2.xzw, r0.yyyy, r2.zzxy
  and r3.xyz, r3.xyzx, l(252, 252, 252, 0)
  iadd r3.xyz, r0.yyyy, r3.yxzy
  mov r2.y, r3.z
  mov r3.w, r2.w
  mov r0.yw, r3.wwwx
  mov r3.x, r2.z
  mov r4.x, x0[4].x
  mov r4.y, x0[5].x
  mov r4.z, x0[6].x
  mov r5.x, x0[4].y
  mov r5.y, x0[5].y
  mov r5.z, x0[6].y
  and r6.xyz, r4.xyzx, l(3, 3, 3, 0)
  and r7.xyz, r5.xyzx, l(3, 3, 3, 0)
  iadd r6.xyz, r6.xyzx, r7.xyzx
  iadd r4.w, r6.z, r6.y
  iadd r4.w, r4.w, r6.x
  udiv r4.w, null, r4.w, l(6)
  and r4.xyzw, r4.xyzw, l(252, 252, 252, 2)
  iadd r6.xzw, r4.zzxy, r4.wwww
  and r4.xyz, r5.xyzx, l(252, 252, 252, 0)
  iadd r4.xyz, r4.yxzy, r4.wwww
  mov r6.y, r4.z
  mov r4.w, r6.w
  mov r5.xy, r4.wxww
  mov r4.x, r6.z
else 
  ieq r5.z, cb0[0].w, l(3)
  if_nz r5.z
    mov r7.x, x0[0].x
    mov r7.y, x0[1].x
    mov r7.z, x0[2].x
    mov r8.x, x0[0].y
    mov r8.y, x0[1].y
    mov r8.z, x0[2].y
    and r9.xyz, r7.xyzx, l(1, 1, 1, 0)
    iadd r5.w, r9.z, r9.y
    iadd r5.w, r5.w, r9.x
    and r7.xyz, r7.xyzx, l(254, 254, 254, 0)
    udiv r5.w, null, r5.w, l(3)
    iadd r2.xzw, r7.zzxy, r5.wwww
    and r7.xyz, r8.xyzx, l(1, 1, 1, 0)
    iadd r5.w, r7.z, r7.y
    iadd r5.w, r5.w, r7.x
    and r7.xyz, r8.xyzx, l(254, 254, 254, 0)
    udiv r5.w, null, r5.w, l(3)
    iadd r3.xyz, r7.yxzy, r5.wwww
    mov r2.y, r3.z
    mov r3.w, r2.w
    mov r0.yw, r3.wwwx
    mov r3.x, r2.z
  else 
    mov r7.x, x0[0].x
    mov r7.y, x0[1].x
    mov r7.z, x0[2].x
    mov r7.w, x0[3].x
    mov r8.x, x0[0].y
    mov r8.y, x0[1].y
    mov r8.z, x0[2].y
    mov r8.w, x0[3].y
    and r9.xyzw, r7.xyzw, l(7, 7, 7, 7)
    iadd r2.z, r9.z, r9.y
    iadd r2.z, r9.w, r2.z
    iadd r2.z, r2.z, r9.x
    and r7.xyzw, r7.xyzw, l(248, 248, 248, 248)
    ushr r2.z, r2.z, l(2)
    and r2.z, r2.z, l(4)
    iadd r7.xyzw, r7.xyzw, r2.zzzz
    and r9.xyzw, r8.xyzw, l(7, 7, 7, 7)
    iadd r2.z, r9.z, r9.y
    iadd r2.z, r9.w, r2.z
    iadd r2.z, r2.z, r9.x
    and r8.xyzw, r8.xyzw, l(248, 248, 248, 248)
    ushr r2.z, r2.z, l(2)
    and r2.z, r2.z, l(4)
    iadd r3.xyzw, r8.yxzw, r2.zzzz
    mov x0[3].x, r7.w
    mov x0[3].y, r3.w
    mov r2.x, r7.z
    mov r2.y, r3.z
    mov r0.y, r7.y
    mov r0.w, r3.x
    mov r3.x, r7.x
  endif 
  if_nz r5.z
    mov r7.x, x0[4].x
    mov r7.y, x0[5].x
    mov r7.z, x0[6].x
    mov r8.x, x0[4].y
    mov r8.y, x0[5].y
    mov r8.z, x0[6].y
    and r9.xyz, r7.xyzx, l(1, 1, 1, 0)
    iadd r2.z, r9.z, r9.y
    iadd r2.z, r2.z, r9.x
    and r7.xyz, r7.xyzx, l(254, 254, 254, 0)
    udiv r2.z, null, r2.z, l(3)
    iadd r6.xzw, r7.zzxy, r2.zzzz
    and r7.xyz, r8.xyzx, l(1, 1, 1, 0)
    iadd r2.z, r7.z, r7.y
    iadd r2.z, r2.z, r7.x
    and r7.xyz, r8.xyzx, l(254, 254, 254, 0)
    udiv r2.z, null, r2.z, l(3)
    iadd r4.xyz, r7.yxzy, r2.zzzz
    mov r6.y, r4.z
    mov r4.w, r6.w
    mov r5.xy, r4.wxww
    mov r4.x, r6.z
  else 
    mov r7.x, x0[4].x
    mov r7.y, x0[5].x
    mov r7.z, x0[6].x
    mov r7.w, x0[7].x
    mov r8.x, x0[4].y
    mov r8.y, x0[5].y
    mov r8.z, x0[6].y
    mov r8.w, x0[7].y
    and r9.xyzw, r7.xyzw, l(7, 7, 7, 7)
    iadd r2.z, r9.z, r9.y
    iadd r2.z, r9.w, r2.z
    iadd r2.z, r2.z, r9.x
    and r7.xyzw, r7.xyzw, l(248, 248, 248, 248)
    ushr r2.z, r2.z, l(2)
    and r2.z, r2.z, l(4)
    iadd r7.xyzw, r7.xyzw, r2.zzzz
    and r9.xyzw, r8.xyzw, l(7, 7, 7, 7)
    iadd r2.z, r9.z, r9.y
    iadd r2.z, r9.w, r2.z
    iadd r2.z, r2.z, r9.x
    and r8.xyzw, r8.xyzw, l(248, 248, 248, 248)
    ushr r2.z, r2.z, l(2)
    and r2.z, r2.z, l(4)
    iadd r4.xyzw, r8.yxzw, r2.zzzz
    mov x0[7].x, r7.w
    mov x0[7].y, r4.w
    mov r6.x, r7.z
    mov r6.y, r4.z
    mov r5.x, r7.y
    mov r5.y, r4.x
    mov r4.x, r7.x
  endif 
endif 
mov r7.w, x0[3].y
mov r2.z, x0[3].x
ineg r8.x, r3.x
ineg r8.y, r0.y
ineg r8.zw, r2.xxxz
mov r7.x, r3.y
mov r7.y, r0.w
mov r7.z, r2.y
iadd r9.xyzw, r7.xyzw, r8.xyzw
mov r10.w, x0[7].y
mov r2.w, x0[7].x
ineg r11.x, r4.x
ineg r11.y, r5.x
ineg r11.z, r6.x
ineg r11.w, r2.w
mov r10.x, r4.y
mov r10.y, r5.y
mov r10.z, r6.y
iadd r12.xyzw, r10.xyzw, r11.xyzw
ine r3.zw, cb0[0].wwww, l(0, 0, 7, 1)
movc r12.w, r3.z, l(0), r12.w
movc r9.w, r3.z, l(0), r9.w
imul null, r4.zw, r9.xxxy, r9.xxxy
iadd r4.z, r4.w, r4.z
imad r4.z, r9.z, r9.z, r4.z
imad r4.z, r9.w, r9.w, r4.z
imul null, r5.zw, r12.xxxy, r12.xxxy
iadd r4.w, r5.w, r5.z
imad r4.w, r12.z, r12.z, r4.w
imad r4.w, r12.w, r12.w, r4.w
ld_structured r13.xyzw, l(0), l(0), g0.xyzw
iadd r8.xyzw, r8.xyzw, r13.xyzw
imul null, r5.zw, r8.xxxy, r9.xxxy
iadd r5.z, r5.w, r5.z
imad r5.z, r9.z, r8.z, r5.z
imad r5.z, r9.w, r8.w, r5.z
ilt r5.w, l(0), r4.z
ilt r6.z, l(0), r5.z
and r5.w, r5.w, r6.z
itof r5.z, r5.z
mul r5.z, r5.z, l(63.499989)
ftou r5.z, r5.z
ishl r6.z, r4.z, l(5)
ult r5.z, r6.z, r5.z
and r5.z, r5.z, r5.w
ineg r8.xyzw, r9.xyzw
movc r8.xyzw, r5.zzzz, r8.xyzw, r9.xyzw
movc r3.xy, r5.zzzz, r3.yxyy, r3.xyxx
mov x0[0].x, r3.x
movc r0.yw, r5.zzzz, r0.wwwy, r0.yyyw
mov x0[1].x, r0.y
movc r2.xy, r5.zzzz, r2.yxyy, r2.xyxx
mov x0[2].x, r2.x
swapc r7.x, r9.x, r5.z, r7.w, r2.z
mov x0[3].x, r9.x
mov x0[0].y, r3.y
mov x0[1].y, r0.w
mov x0[2].y, r2.y
mov x0[3].y, r7.x
mov r0.w, vThreadIDInGroupFlattened.x
mov r2.y, icb[r0.w + 0].y
ld_structured r7.xyzw, r2.y, l(0), g0.xyzw
iadd r7.xyzw, r11.xyzw, r7.xyzw
imul null, r2.yz, r7.xxyx, r12.xxyx
iadd r2.y, r2.z, r2.y
imad r2.y, r12.z, r7.z, r2.y
imad r2.y, r12.w, r7.w, r2.y
ilt r2.z, l(0), r4.w
ilt r3.y, l(0), r2.y
and r2.z, r2.z, r3.y
itof r2.y, r2.y
mul r2.y, r2.y, l(63.499989)
ftou r2.y, r2.y
ishl r3.y, r4.w, l(5)
ult r2.y, r3.y, r2.y
and r2.y, r2.y, r2.z
ineg r7.xyzw, r12.xyzw
movc r7.xyzw, r2.yyyy, r7.xyzw, r12.xyzw
movc r4.xy, r2.yyyy, r4.yxyy, r4.xyxx
mov x0[4].x, r4.x
movc r5.xy, r2.yyyy, r5.yxyy, r5.xyxx
mov x0[5].x, r5.x
movc r5.zw, r2.yyyy, r6.yyyx, r6.xxxy
mov x0[6].x, r5.z
swapc r6.x, r10.x, r2.y, r10.w, r2.w
mov x0[7].x, r10.x
mov x0[4].y, r4.y
mov x0[5].y, r5.y
mov x0[6].y, r5.w
mov x0[7].y, r6.x
ineg r6.x, r4.x
ineg r6.yz, r5.xxzx
ineg r6.w, r10.x
ige r2.y, l(0), r4.w
movc r5.xyz, r3.wwww, l(2,128,3,0), l(1,64,7,0)
ineg r10.x, r3.x
ineg r10.y, r0.y
ineg r10.z, r2.x
ineg r10.w, r9.x
ige r0.y, l(0), r4.z
itof r2.xz, r4.zzwz
mov r9.xy, l(0,0,0,0)
loop 
  uge r2.w, r9.y, l(16)
  breakc_nz r2.w
  ushr r2.w, icb[r0.w + 0].x, r9.y
  and r2.w, r2.w, l(1)
  ieq r3.x, r2.w, l(1)
  if_nz r3.x
    ld_structured r11.xyzw, r9.y, l(0), g0.xyzw
    iadd r11.xyzw, r6.xyzw, r11.xyzw
    imul null, r3.xy, r7.xyxx, r11.xyxx
    iadd r3.x, r3.y, r3.x
    imad r3.x, r7.z, r11.z, r3.x
    imad r3.x, r7.w, r11.w, r3.x
    ige r3.y, l(0), r3.x
    or r3.y, r2.y, r3.y
    ilt r3.w, r3.x, r4.w
    itof r3.x, r3.x
    mul r3.x, r3.x, l(63.499989)
    div r3.x, r3.x, r2.z
    ftou r3.x, r3.x
    iadd r3.x, r3.x, r5.y
    movc r3.x, r3.w, icb[r3.x + 64].x, r5.z
    movc r3.x, r3.y, l(0), r3.x
  else 
    ld_structured r11.xyzw, r9.y, l(0), g0.xyzw
    iadd r11.xyzw, r10.xyzw, r11.xyzw
    imul null, r3.yw, r8.xxxy, r11.xxxy
    iadd r3.y, r3.w, r3.y
    imad r3.y, r8.z, r11.z, r3.y
    imad r3.y, r8.w, r11.w, r3.y
    ige r3.w, l(0), r3.y
    or r3.w, r0.y, r3.w
    ilt r4.x, r3.y, r4.z
    itof r3.y, r3.y
    mul r3.y, r3.y, l(63.499989)
    div r3.y, r3.y, r2.x
    ftou r3.y, r3.y
    iadd r3.y, r3.y, r5.y
    movc r3.y, r4.x, icb[r3.y + 64].x, r5.z
    movc r3.x, r3.w, l(0), r3.y
  endif 
  iadd r11.yz, r9.yyyy, l(0, 15, 1, 0)
  ushr r3.y, icb[r0.w + 0].w, r11.y
  and r3.y, r3.y, l(2)
  ushr r3.w, icb[r0.w + 0].w, r9.y
  bfi r3.y, l(1), l(0), r3.w, r3.y
  movc r2.w, r0.z, r2.w, r3.y
  imad r3.x, r5.x, l(16), r3.x
  iadd r3.y, l(64), -icb[r3.x + 64].w
  ishl r2.w, r2.w, l(2)
  mov r12.x, x0[r2.w + 0].x
  mov r12.y, x0[r2.w + 1].x
  mov r12.z, x0[r2.w + 2].x
  mov r12.w, x0[r2.w + 3].x
  mov r13.x, x0[r2.w + 0].y
  mov r13.y, x0[r2.w + 1].y
  mov r13.z, x0[r2.w + 2].y
  mov r13.w, x0[r2.w + 3].y
  imul null, r13.xyzw, r13.xyzw, icb[r3.x + 64].wwww
  imad r12.xyzw, r3.yyyy, r12.xyzw, r13.xyzw
  iadd r12.xyzw, r12.xyzw, l(32, 32, 32, 32)
  ushr r12.xyzw, r12.xyzw, l(6, 6, 6, 6)
  ld_structured r13.xyzw, r9.y, l(0), g0.xyzw
  iadd r12.xyzw, r12.xyzw, -r13.xyzw
  movc r2.w, r3.z, l(0), r12.w
  imul null, r3.xy, r12.xyxx, r12.xyxx
  iadd r3.x, r3.y, r3.x
  imad r3.x, r12.z, r12.z, r3.x
  imad r2.w, r2.w, r2.w, r3.x
  iadd r11.x, r2.w, r9.x
  mov r9.xy, r11.xzxx
endloop 
mov r9.y, cb0[0].w
mov r9.z, vThreadIDInGroupFlattened.x
store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r9.xyzx
sync_g_t
if_nz r1.y
  iadd r0.y, vThreadIDInGroupFlattened.x, l(32)
  ld_structured r2.yzw, r0.y, l(16), g0.xxyz
  ult r0.z, r2.y, r9.x
  if_nz r0.z
    ld_structured r2.x, r0.y, l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r2.xzwx
  endif 
endif 
if_nz r1.x
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(16)
  ld_structured r2.yzw, r0.z, l(16), g0.xxyz
  ult r0.y, r2.y, r0.y
  if_nz r0.y
    ld_structured r2.x, r0.z, l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r2.xzwx
  endif 
endif 
if_nz r1.z
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(8)
  ld_structured r2.yzw, r0.z, l(16), g0.xxyz
  ult r0.y, r2.y, r0.y
  if_nz r0.y
    ld_structured r2.x, r0.z, l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r2.xzwx
  endif 
endif 
if_nz r1.w
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(4)
  ld_structured r1.yzw, r0.z, l(16), g0.xxyz
  ult r0.y, r1.y, r0.y
  if_nz r0.y
    ld_structured r1.x, r0.z, l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r1.xzwx
  endif 
endif 
ult r0.yz, vThreadIDInGroupFlattened.xxxx, l(0, 2, 1, 0)
if_nz r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  iadd r0.w, vThreadIDInGroupFlattened.x, l(2)
  ld_structured r1.yzw, r0.w, l(16), g0.xxyz
  ult r0.y, r1.y, r0.y
  if_nz r0.y
    ld_structured r1.x, r0.w, l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r1.xzwx
  endif 
endif 
if_nz r0.z
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  ld_structured r1.yzw, l(1), l(16), g0.xxyz
  ult r0.y, r1.y, r0.y
  if_nz r0.y
    ld_structured r1.x, l(1), l(16), g0.xxxx
    store_structured g0.xyz, vThreadIDInGroupFlattened.x, l(16), r1.xzwx
  endif 
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(0), t1.xxxx
  ld_structured r0.z, vThreadIDInGroupFlattened.x, l(16), g0.xxxx
  ult r0.y, r0.z, r0.y
  if_nz r0.y
    ld_structured r1.xyz, vThreadIDInGroupFlattened.x, l(16), g0.xyzx
    mov r1.w, l(0)
  else 
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), t1.xyzw
  endif 
  store_structured u0.xyzw, r0.x, l(0), r1.xyzw
endif 
ret 
// Approximately 489 instruction slots used
